[{"/Users/amador/UWEAST-Community-Kitchen/frontend/src/index.js":"1","/Users/amador/UWEAST-Community-Kitchen/frontend/src/reportWebVitals.js":"2","/Users/amador/UWEAST-Community-Kitchen/frontend/src/App.js":"3","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/About.js":"4","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Register.js":"5","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Login.js":"6","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/ResetPassword.js":"7","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Menu.js":"8","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Admin.js":"9","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Contact.js":"10","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Orders.js":"11","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/CartSummary.js":"12","/Users/amador/UWEAST-Community-Kitchen/frontend/src/config.js":"13","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/ForgotPasswordDialogue.js":"14","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/NavBar.js":"15","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuSection.js":"16","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/ContactForm.js":"17","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/PayPal.js":"18","/Users/amador/UWEAST-Community-Kitchen/frontend/src/util/Auth.js":"19","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/CustomTimePicker.js":"20","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/CartPreview.js":"21","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/SearchSection.js":"22","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/Banner.js":"23","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Emails.js":"24","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/AdminMenuItems.js":"25","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/ContactMap.js":"26","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/OrdersTable.js":"27","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuItemPopup.js":"28","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/EditMenuItemModal.js":"29","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/ChangeHeaderModal.js":"30","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/AddMenuItemModal.js":"31","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuFilter.js":"32","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuItems.js":"33","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/ChangeSecondaryEmailScreen.js":"34","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/ChangeEmailScreen.js":"35","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/OrdersTableColumns.js":"36","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuItemCategory.js":"37","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuFilterButton.js":"38","/Users/amador/UWEAST-Community-Kitchen/frontend/src/util/OrdersTableFunctions.js":"39","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuItem.js":"40"},{"size":500,"mtime":1613602950436,"results":"41","hashOfConfig":"42"},{"size":362,"mtime":1613602950438,"results":"43","hashOfConfig":"42"},{"size":1851,"mtime":1614830945365,"results":"44","hashOfConfig":"42"},{"size":1483,"mtime":1613978494344,"results":"45","hashOfConfig":"42"},{"size":7842,"mtime":1613978494346,"results":"46","hashOfConfig":"42"},{"size":6139,"mtime":1613978494345,"results":"47","hashOfConfig":"42"},{"size":7584,"mtime":1613978494346,"results":"48","hashOfConfig":"42"},{"size":9476,"mtime":1615093474041,"results":"49","hashOfConfig":"42"},{"size":4642,"mtime":1614622927788,"results":"50","hashOfConfig":"42"},{"size":749,"mtime":1614622927788,"results":"51","hashOfConfig":"42"},{"size":5330,"mtime":1614721414734,"results":"52","hashOfConfig":"42"},{"size":18039,"mtime":1615093200826,"results":"53","hashOfConfig":"42"},{"size":297,"mtime":1613978494336,"results":"54","hashOfConfig":"42"},{"size":3704,"mtime":1613978494331,"results":"55","hashOfConfig":"42"},{"size":5301,"mtime":1614830945369,"results":"56","hashOfConfig":"42"},{"size":4403,"mtime":1614832516085,"results":"57","hashOfConfig":"42"},{"size":2994,"mtime":1613978494330,"results":"58","hashOfConfig":"42"},{"size":7965,"mtime":1614830945370,"results":"59","hashOfConfig":"42"},{"size":1436,"mtime":1614721414734,"results":"60","hashOfConfig":"42"},{"size":1948,"mtime":1614830945367,"results":"61","hashOfConfig":"42"},{"size":4302,"mtime":1615092784200,"results":"62","hashOfConfig":"42"},{"size":1179,"mtime":1614622927783,"results":"63","hashOfConfig":"42"},{"size":433,"mtime":1614622927779,"results":"64","hashOfConfig":"42"},{"size":3666,"mtime":1614622927788,"results":"65","hashOfConfig":"42"},{"size":21631,"mtime":1614721414732,"results":"66","hashOfConfig":"42"},{"size":2666,"mtime":1614622927781,"results":"67","hashOfConfig":"42"},{"size":5000,"mtime":1614622927782,"results":"68","hashOfConfig":"42"},{"size":13826,"mtime":1615003235021,"results":"69","hashOfConfig":"42"},{"size":25924,"mtime":1614721414734,"results":"70","hashOfConfig":"42"},{"size":6573,"mtime":1614721414733,"results":"71","hashOfConfig":"42"},{"size":25403,"mtime":1614721414731,"results":"72","hashOfConfig":"42"},{"size":901,"mtime":1613978494331,"results":"73","hashOfConfig":"42"},{"size":919,"mtime":1613978494333,"results":"74","hashOfConfig":"42"},{"size":7392,"mtime":1614721414734,"results":"75","hashOfConfig":"42"},{"size":5351,"mtime":1614721414732,"results":"76","hashOfConfig":"42"},{"size":3686,"mtime":1614622927783,"results":"77","hashOfConfig":"42"},{"size":3307,"mtime":1614832516085,"results":"78","hashOfConfig":"42"},{"size":1028,"mtime":1613978494332,"results":"79","hashOfConfig":"42"},{"size":6399,"mtime":1614721414735,"results":"80","hashOfConfig":"42"},{"size":1014,"mtime":1614832516085,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"hzv0p5",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"84"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"84"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"84"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"84"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"84"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"84"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"84"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"84"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"84"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"84"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"84"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"84"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"84"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"84"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"84"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"84"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"84"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"84"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"84"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"84"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"84"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"84"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"84"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"84"},"/Users/amador/UWEAST-Community-Kitchen/frontend/src/index.js",[],["187","188"],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/reportWebVitals.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/App.js",["189"],"import './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport Menu from './pages/Menu';\nimport About from './pages/About';\nimport Admin from './pages/Admin';\nimport Contact from './pages/Contact';\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport ResetPassword from './pages/ResetPassword';\nimport CartSummary from './components/CartSummary';\nimport Orders from './pages/Orders';\nimport { CookiesProvider } from 'react-cookie';\nimport { withCookies } from 'react-cookie';\n\nfunction App() {\n  return (\n    // CookiesProvider allows cookies to be used in any page component\n    <CookiesProvider>\n      <Router>\n        {/* Switch gurantees that a URL can match to only one route*/}\n        <Switch>\n          {/* Login Page */}\n          <Route exact path=\"/login\">\n            <Login />\n          </Route>\n          {/* Register Page */}\n          <Route exact path=\"/register\">\n            <Register />\n          </Route>\n          {/* Reset Password Page */}\n          <Route exact path=\"/reset-password\">\n            <ResetPassword />\n          </Route>\n          {/* About Page */}\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          {/* Contact Page */}\n          <Route exact path=\"/contact\">\n            <Contact />\n          </Route>\n          {/* Admin Page */}\n          <Route exact path=\"/admin\">\n            <Admin />\n          </Route>\n          {/* Cart Summary Page for when screen size is mobile*/}\n          <Route exact path=\"/cart\">\n            <CartSummary />\n          </Route>\n          {/* Any other URL is automatically matched to Menu Page */}\n          <Route path=\"/\">\n            <Menu />\n          </Route>\n        </Switch>\n      </Router>\n    </CookiesProvider>\n  );\n}\n\nexport default withCookies(App);","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/About.js",["190"],"import React, { Component} from 'react';\nimport Navbar from '../components/NavBar';\nimport PayPal from '../components/PayPal';\n\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nclass About extends Component {\n\n    // For paypal payment handling, we assume the cart passed into the PayPal object looks like...\n    // {\n    //     item_total: \"\",\n    //     tax_total: \"\",\n    //     items: [\n    //         {\n    //             name: \"\",\n    //             quantity: \"\", \n    //             size: \"\", (Individual or Family)\n    //             addons: [\"\", \"\"], (Sides, gluten free)\n    //             individual_price: \"\", (price per item)\n    //             individual_tax: \"\", (tax per item)\n    //         },\n\n    //     ]\n    // }\n    \n    render (){\n    const cart = {\n        cart_total: \"15.00\",\n        item_total: \"12.00\",\n        tax_total: \"3.00\",\n        items: [\n            {\n                name: \"Food 1\",\n                quantity: \"2\",\n                size: \"Individual\",\n                addons: [\"Gluten Free\"],\n                individual_price: \"6.00\",\n                individual_tax: \"1.50\",\n            },\n        ],\n        pickup_date: \"2021-02-04\"\n    }\n      return (\n\n          <div>\n              <Navbar/>\n              <div style={{marginTop: \"30px\"}}>\n                  This is the About Page.\n              </div>\n              <PayPal cart={cart}/>           \n          </div>\n\n      )\n    }\n  }\n  \n  export default About;","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Register.js",["191"],"import React, { useEffect } from 'react';\nimport { Link, Redirect, useHistory } from 'react-router-dom';\nimport { \n  TextField, Button, Grid, \n  Snackbar, Typography \n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { isAuthenticated, setJWT } from '../util/Auth';\nimport Navbar from '../components/NavBar';\nimport \"../css/Register.css\";\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nconst useStyles = makeStyles((theme) => ({\n\n  centered: {\n    textAlign: 'center'\n  },\n  form: {\n    //Input Field - General Layout\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '95%'\n    },\n    \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"black\"\n    },\n    \"& .MuiInputLabel-outlined.Mui-focused\": {\n      color: \"black\"\n    },\n    '& .MuiTypography-root': {\n      margin: theme.spacing(1),\n      width: '100%'\n    },\n\n    '& .MuiButton-root': {\n      margin: theme.spacing(3),\n      color: 'black',\n      background: '#F9CE1D',\n      width:'30%'\n    }\n  },\n  title: {\n    margin: theme.spacing(2),\n    textAlign: 'center',\n    fontWeight: 'bolder',\n    textTransform: 'uppercase'\n  }\n}));\n\nexport default function Register() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [state, setState] = React.useState({\n    isAuthenticatingUser: true,\n    isUserAuthenticated: false,\n    email: '',\n    password: '',\n    passwordConfirmation: '',\n    secret: '',\n    snack: {\n      message: '',\n      open: false\n    },\n    errors: {\n      email: false,\n      password: false,\n      passwordConfirmation: false,\n      secret: false\n    },\n    form_disabled: false\n  });\n\n  useEffect(() => {\n    isAuthenticated().then(async result => {\n      setState({...state, isAuthenticatingUser: false, isUserAuthenticated: result});\n    })\n  }, []);\n\n  // Updates given state with given value \n  const handleChange = (prop) => (event) => {\n    setState({ ...state, [prop]: event.target.value });\n  };\n\n  // Handles submission of the form (button click)\n  // Validates form data for completion/length, making a backend request to Users DB for secret key autentication + \n  // email uniqueness. If register succeeds, user is redirected to admin page and added to user DB. Otherwise, an error message appears. \n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setState({ ...state, form_disabled: true });\n\n    const submission = {\n      email: state.email,\n      password: state.password,\n      secret: state.secret\n    };\n\n    let email = false;\n    let password = false; \n    let passwordConfirmation = false;\n    let secret = false; \n\n    //Check if any field is empty\n    if (state.email === ''){\n        email = true;\n    }\n    if (state.password === ''){\n        password = true;\n    }\n    if (state.passwordConfirmation === ''){\n      passwordConfirmation = true;\n    }\n    if (state.secret === ''){\n      secret = true;\n    }\n    if(email + password + passwordConfirmation + secret > 0){\n        setState({...state, errors: {email: email, password: password, passwordConfirmation: passwordConfirmation, secret: secret}, form_disabled: false, snack: {message: 'Please fill out all required fields.', open: true}});\n        return;\n    }\n    //Check Password Length\n    if (submission.password.length < 6) {\n      setState({...state, errors: {email: false, password: true, passwordConfirmation: false, secret: false}, form_disabled: false,  snack: {message: 'Password must be at least 6 characters long.', open: true}});\n      return;\n    }\n\n    //Check Passwords Match\n    if (state.password !== state.passwordConfirmation) {\n      setState({...state,errors: {email: false, password: true, passwordConfirmation: true, secret: false}, form_disabled: false, snack: {message: 'Passwords Do Not Match.', open: true}});\n      return;\n    }\n\n    try {\n        //Attempt to register with given credentials \n      const response = await fetch(`${BACKEND_URL}user/register`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(submission)\n      });\n\n      //Successful Registration\n      if (response.ok) {\n        const json = await response.json();\n        setJWT(json.token);\n        history.push(\"/admin\");\n      }\n      //Invalid Credentials \n      else if (response.status === 401) {\n        setState({...state, errors: {email: false, password: false, passwordConfirmation: false, secret: true}, form_disabled: false, snack: {message: 'Could not register account: Invalid Secret Key!', open: true}});\n      }\n       //Duplicate User \n      else if (response.status === 409) {\n        setState({...state, form_disabled: false, errors: {email: true, password: false, passwordConfirmation: false, secret: false}, snack: {message: 'Could not register account: Email already in use!', open: true}});\n      }\n      //Any other server response\n      else {\n        const text = await response.text();\n        setState({...state, errors: {email: false, password: false, passwordConfirmation: false, secret: false}, form_disabled: false, snack: {message: `Could not register account: ${text}`, open: true}});\n      }\n    } \n    //General Error\n    catch (error) {\n      setState({...state, errors: {email: false, password: false, passwordConfirmation: false, secret: false}, form_disabled: false, snack: {message: `An error occurred: ${error.message}`, open: true}});\n    }\n  };\n\n  //Error Message Display: Auto close itself by updating its states\n  const handleSnackClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setState({...state, snack: {...state.snack, open: false}});\n  };\n\n  if(state.isAuthenticatingUser){\n    return(\n      <div>\n        <Navbar/>\n        <p> Loading... </p>\n    </div>\n    )\n  } else if(state.isUserAuthenticated){\n    return (<Redirect to=\"/admin\"/>)\n  } else {\n    return (\n      <div>\n          <Navbar/>\n           <Grid\n                container\n                spacing={0}\n                alignItems=\"center\"\n                justify=\"center\"\n                style={{marginTop: \"2rem\"}}\n                >\n                <Grid item md={6} xs={12}>\n                <div className=\"Border\">\n                    <Typography variant=\"h4\" className={classes.title}>\n                    Register New Account\n                    </Typography>\n                    <p className={classes.centered} style={{color: \"#8d8d8d\"}}> Fill out the fields below to create a new account </p>\n                    <form className={classes.form} onSubmit={handleSubmit}>\n                    <TextField label='Email' variant='outlined' type='email' onChange={handleChange('email')} error={state.errors.email}/>\n                    <TextField label='Password' variant='outlined' type='password' onChange={handleChange('password')} error={state.errors.password}/>\n                    <TextField label='Confirm Password' variant='outlined' type='password' onChange={handleChange('passwordConfirmation')} error={state.errors.passwordConfirmation}/>\n                    <TextField label='Secret Key' variant='outlined' type='password' onChange={handleChange('secret')} error={state.errors.secret}/>\n                    <Link to=\"login\"><Typography>Already have an account? Sign-In</Typography></Link>\n                    <div className={classes.centered}>\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={state.form_disabled}>Register</Button>\n                    </div>\n                    </form>\n                  </div>         \n                </Grid>   \n                <Snackbar open={state.snack.open} autoHideDuration={6000} onClose={handleSnackClose} message={state.snack.message}/>\n            </Grid> \n      </div>\n    )\n  }\n}","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Login.js",["192"],"import React from 'react';\nimport { Link, Redirect, useHistory } from 'react-router-dom';\nimport { \n  TextField, Button,  \n  Snackbar, Typography \n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport '../css/Login.css';\nimport { isAuthenticated, setJWT} from '../util/Auth';\nimport Navbar from '../components/NavBar';\nimport { useEffect } from 'react';\nconst config = require('../config');\n\n\nconst BACKEND_URL = config.backend.uri;\n\nconst useStyles = makeStyles((theme) => ({\n\n  centered: {\n    textAlign: 'center'\n  },\n  form: {\n    //Input Field - General Layout\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '95%'\n    },\n    \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"black\"\n    },\n    \"& .MuiInputLabel-outlined.Mui-focused\": {\n      color: \"black\"\n    },\n    '& .MuiTypography-root': {\n      margin: theme.spacing(1),\n      width: '100%'\n    },\n\n    '& .MuiButton-root': {\n      margin: theme.spacing(3),\n      color: 'black',\n      background: '#F9CE1D',\n      width:'30%'\n    }\n  },\n  title: {\n    margin: theme.spacing(2),\n    textAlign: 'center',\n    fontWeight: 'bolder',\n    textTransform: 'uppercase'\n  }\n}));\n\nexport default function Login() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [state, setState] = React.useState({\n    isAuthenticatingUser: true,\n    isUserAuthenticated: false,\n    email: '',\n    password: '',\n    snack: {\n      message: '',\n      open: false\n    },\n    errors: {\n      email: false,\n      password: false\n    },\n    form_disabled: false\n  });\n\n  useEffect(() => {\n    isAuthenticated().then(async result => {\n      setState({...state, isAuthenticatingUser: false, isUserAuthenticated: result});\n    })\n  }, []);\n\n  // Updates given state with given value \n  const handleChange = (prop) => (event) => {\n    setState({ ...state, [prop]: event.target.value });\n  };\n\n  \n  // Handles submission of the form (button click)\n  // Validates form data for completion/length, making a backend request to Users DB for user authetnication. If\n  // user is authenticated, user is redirected to admin page. Otherwise, an error message appears. \n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setState({ ...state, form_disabled: true });\n    const submission = {\n      email: state.email,\n      password: state.password\n    };\n\n    //Check if either field is empty\n    let email = false;\n    let password = false; \n\n    if(state.email === ''){\n        email = true;\n    }\n    if(state.password === ''){\n        password = true;\n    }\n    if(email + password > 0){\n        setState({...state, errors: {email: email, password: password}, form_disabled: false, snack: {message: 'Please fill out all required fields.', open: true}});\n        return;\n    }\n   \n    //Check Password Length\n    if (submission.password.length < 6) {\n      setState({...state, errors: {email: false, password: true}, form_disabled: false, snack: {message: 'Password must be at least 6 characters long.', open: true}});\n      return;\n    }\n    try {\n        //Attempt to login with given credentials \n      const response = await fetch(`${BACKEND_URL}user/login`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(submission)\n      });\n\n      //Successful Login\n      if (response.ok) {\n        const json = await response.json();\n        setJWT(json.token);\n        history.push(\"/admin\");\n      }\n      //Invalid Credentials\n      else if (response.status === 401) {\n        setState({...state, errors: {email: true, password: true}, form_disabled: false, snack: {message: 'Invalid Login: Email or password not recognized.', open: true}});\n      }\n      //Any other server response\n      else {\n        const text = await response.text();\n        setState({...state, form_disabled: false, errors: {email: false, password: false}, snack: {message: `Could not log in: ${text}`, open: true}});\n      }\n    } \n    //General Error\n    catch (error) {\n      setState({...state, form_disabled: false, errors: {email: false, password: false}, snack: {message: `An error occurred: ${error.message}`, open: true}});\n    }\n  };\n\n  //Error Message Display: Auto close itself by updating its states\n  const handleSnackClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setState({...state, snack: {...state.snack, open: false}});\n  };\n\n  if(state.isAuthenticatingUser){\n    return(\n      <div>\n        <Navbar/>\n        <p> Loading... </p>\n      </div>\n    )\n  } else if(state.isUserAuthenticated){\n    return(\n      <Redirect to=\"/admin\"/>\n    )\n  } else {\n    return (\n      <div>\n        <Navbar/>\n        <div className=\"Main\">\n          <div className=\"Border\">\n            <Typography variant=\"h4\" className={classes.title} style={{fontSize: \"2.5rem\"}} > Login </Typography>\n            <p className={classes.centered} style={{color: \"#8d8d8d\"}}> Sign-in into an existing account below </p>\n            <form className={classes.form} onSubmit={handleSubmit}>\n                  <TextField label='Email' variant='outlined' type='email' onChange={handleChange('email')} error={state.errors.email}/>\n                  <TextField label='Password' variant='outlined' type='password' onChange={handleChange('password')} error={state.errors.password}/>\n                  <Link to=\"register\" className=\"Child\"><Typography>Register Account</Typography></Link>\n                  <Link to=\"reset-password\"><Typography>Reset Password</Typography></Link>\n                  <div className={classes.centered}>\n                      <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={state.form_disabled}\n                      // style={{fontWeight: \"bolder\", borderRadius: \"3px\", fontSize: \"16px\"}}\n                      >Login</Button>\n                  </div>\n              </form>\n            </div>\n          </div>\n          <Snackbar open={state.snack.open} autoHideDuration={6000} onClose={handleSnackClose} message={state.snack.message}/>\n      </div>\n    );\n  }\n}","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/ResetPassword.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Menu.js",["193"],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Admin.js",["194"],"/**\n  * This file contains renders the Admin page. It includes a Nav Bar that links\n  * to the orders page, menu page, update emails page, and change passwords page.\n  *\n  * @summary    Renders admin page\n  * @author     PatrickBrown1\n  */\nimport React, { useEffect } from 'react';\nimport Navbar from '../components/NavBar';\nimport AdminMenuItems from \"../components/AdminMenuItems\";\nimport Orders from \"./Orders\";\nimport Emails from \"./Emails\";\nimport { isAuthenticated } from '../util/Auth';\nimport {Redirect} from 'react-router-dom';\nimport '../css/Admin.css';\n\nexport default function Admin() {\n\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {\n    //         currentScreen: \"orders\"\n    //     }\n\n    //     //Admin NavBar binding\n    //     this.adminNavBar = this.adminNavBar.bind(this);\n    // }\n\n    const [state, setState] = React.useState({\n        isAuthenticatingUser: true,\n        isUserAuthenticated: false,\n        currentScreen: \"orders\"\n      });\n\n    useEffect(() => {\n        isAuthenticated().then(async result => {\n          setState({ ...state, isAuthenticatingUser: false, isUserAuthenticated: result});\n        })\n      }, []);\n\n    /**\n     * Renders the admin page navigation bar between orders, menu, and email screens.\n     */\n    const adminNavBar = () => {\n        var currentScreen = state.currentScreen;\n        return(\n            <div className=\"adminNavContainer\">\n                { currentScreen === \"orders\" ? \n                    <h2 className=\"adminNavSelected\" onClick={() => setState({...state, currentScreen: \"orders\"})}>\n                        All Orders\n                    </h2> : \n                    <h2 className=\"adminNavUnselected\" onClick={() => setState({...state, currentScreen: \"orders\"})}>\n                        All Orders\n                    </h2>\n                }\n                { currentScreen === \"menu\" ? \n                    <h2 className=\"adminNavSelected\" onClick={() => setState({...state, currentScreen: \"menu\"})}>\n                        Edit Menu\n                    </h2> : \n                    <h2 className=\"adminNavUnselected\" onClick={() => setState({...state, currentScreen: \"menu\"})}>\n                        Edit Menu\n                    </h2>\n                }\n                { currentScreen === \"email\" ? \n                    <h2 className=\"adminNavSelected\" onClick={() => setState({...state, currentScreen: \"email\"})}>\n                        Email\n                    </h2> : \n                    <h2 className=\"adminNavUnselected\" onClick={() => setState({...state, currentScreen: \"email\"})}>\n                        Email\n                    </h2>\n                }\n                 { currentScreen === \"resetPassword\" ? \n                    <h2 className=\"adminNavSelected\" onClick={() => setState({...state, currentScreen: \"resetPassword\"})}>\n                        Reset Password\n                    </h2> : \n                    <h2 className=\"adminNavUnselected\" onClick={() => setState({...state, currentScreen: \"resetPassword\"})}>\n                        Reset Password\n                    </h2>\n                }\n            </div>\n        );\n    }\n\n        // redirect to login if user is trying to access admin panel without being logged in \n        if(state.isAuthenticatingUser){\n            return (\n                <div>\n                    <Navbar/>\n                    <p> Authenticating... </p>\n                </div>\n            );\n        }\n        else if (!state.isUserAuthenticated){\n            return (\n                <Redirect to=\"/login\"/> \n            );\n        } else {\n            return (\n                <div>\n                {/* The navbar on top of the page */}\n                  <Navbar/>\n    \n                  {/* This is the contents on the admin page */}\n                  <div class=\"admin-section\">\n                        {adminNavBar()}\n    \n                        {/* <div class=\"col-12\">\n                            <h2 class=\"admin-title\">Orders</h2>\n                            <p>View placed orders and mark them as fulfilled.</p>\n                            <a class=\"btn btn-primary\" href=\"/orders\" role=\"button\">Orders</a>\n                        </div> */}\n                        {state.currentScreen === \"orders\" && <Orders />}\n                        {state.currentScreen === \"menu\" && <AdminMenuItems />}\n                        {state.currentScreen === \"email\" && <Emails />}\n                        {state.currentScreen === \"resetPassword\" && <Redirect to=\"/reset-password\"/>}\n                    </div>       \n              </div>\n            );\n        }\n  };\n","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Contact.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Orders.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/CartSummary.js",["195","196","197"],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/config.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/ForgotPasswordDialogue.js",["198"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Link } from 'react-router-dom';\nimport { Typography } from '@material-ui/core';\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\nexport default function FormDialog() {\n  \n  const [state, setState] = React.useState({\n    open: false,\n    email: '',\n    error:{\n      display: false,\n      message: ''\n    }\n  });\n\n  // Handles submission of the form (button click)\n  // Validates form data for valid email address (must be a user's email address). If valid, \n  // it autogenerates a random password and sends it as an email to the user. If invalid, an error is displayed. \n  const handleSend = async() => {\n      const submission = {\n          email: state.email\n      };\n\n      //Check if email field is empty\n    if (state.email === ''){\n        setState({...state, error:{display: true, message: \"Field cannot be empty!\"}})\n        return;\n    }\n    //Backend call\n    try{\n      const response = await fetch(`${BACKEND_URL}user/forgotPassword`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(submission)\n      });\n\n      //Everything went great\n      if (response.ok) {\n        alert(\"Email Successfully Sent!\");\n        handleClose();\n      } \n      //Invalid Email\n      else if(response.status == 401){\n        setState({...state, error:{display: true, message: \"Invalid Email\"}});\n      }\n      //Any Server Errors\n      else {\n            setState({...state, error:{display: true, message: \"System Error: Try Again Later\"}});\n      }\n    }\n    //General Errors\n    catch(error){\n        setState({...state, error:{display: true, message: `An error occurred: ${error.message}`}});\n    }\n\n  }\n\n  //Display pop-up\n  const handleClickOpen = () => {\n    setState({...state, email:'', open: true, error:{display: false}});\n  };\n\n  //Close pop-up\n  const handleClose = () => {\n    setState({...state, open: false, error:{display: false}});\n  };\n\n  //track the email address put in the text field\n  const handleEmailChange = (event) => {\n    setState({...state, email: event.target.value, open: true});\n  }\n\n  //Render component \n  return (\n    <div>\n      <Link onClick={handleClickOpen}><Typography>Forgot Password?</Typography></Link>\n      <Dialog open={state.open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Forgot Password?</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please enter the email address of the associated account here. An email will be sent to\n            you there containing next steps. \n          </DialogContentText>\n          <TextField\n            onChange={handleEmailChange}\n            error={state.error.display}\n            helperText={state.error.display ? state.error.message: null}\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Email Address\"\n            type=\"email\"\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleSend} color=\"primary\">\n            Send Email\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/NavBar.js",["199","200","201","202","203","204"],"import React, { useEffect } from 'react';\n/**\n * The NavBar component. Renders at the top of the website and is fixed to the top.\n * Contains all the relevant tabs that route the user to the specified page.\n * Cart Icon is used for the mobile/tablet rendering of the webpage. \n * \n */\nimport { useHistory } from \"react-router-dom\";\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faShoppingCart } from '@fortawesome/free-solid-svg-icons'\nimport Logo from \"../media/UWEAST_Logo_Detail_Transparent.png\";\nimport '../css/NavBar.css';\nimport { isAuthenticated, logout } from '../util/Auth';\n\n\nexport default function NavBar(props) {\n\n    {/* history hook to redirect on logout */ }\n    const history = useHistory();\n\n    const [state, setState] = React.useState({\n        isUserAuthenticated: false\n    });\n\n    {/* stores class names to toggle whether content is shown */ }\n    var adminContentClass;\n    var loginButtonClass;\n\n    {/* removes login token and redirects to menu page */ }\n    function Logout() {\n        logout();\n        history.push(\"/login\");\n        history.go(0);\n    }\n\n    /**\n     * Renders the cart page for mobile navbar\n     */\n    function OpenCart() {\n        history.push(\"/cart\");\n    }\n\n    useEffect(() => {\n        isAuthenticated().then(async result => {\n            if (!result) {\n                logout();\n            }\n            setState({ ...state, isUserAuthenticated: result });\n        })\n    }, []);\n\n    {/* Hides admin content (admin page + logout) or login button depending on whether user is logged in */ }\n    if (state.isUserAuthenticated) {\n        adminContentClass = \"nav-link\";\n        loginButtonClass = \"nav-link d-none\";\n    } else {\n        adminContentClass = \"nav-link d-none\";\n        loginButtonClass = \"nav-link\";\n    }\n\n    {/* Check current page from props to change active nav-link color */ }\n    function isPageActive(pageToCheck) {\n        return (pageToCheck === window.location.pathname) ? \" active\" : \"\";\n    }\n\n    return (\n        <html>\n            <head>\n                {/* Bootstrap Resources */}\n                <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossOrigin=\"anonymous\" />\n            </head>\n            <Navbar className=\"navbar navbar-bg-color\" collapseOnSelect expand=\"md\" variant=\"dark\">\n\n                {/* Left Hand Side of Navbar - Title & Image linked to Menu Page */}\n                <Navbar.Brand href=\"/\">\n                    <img src={Logo} className=\"logo-img\" alt=\"UWEAST Logo\" width={window.innerWidth > 768 ? '90' : '80'}\n                        height={window.innerWidth > 768 ? '90' : '80'} />\n                </Navbar.Brand>\n\n                {/* Text to complement the logo */}\n                <div className=\"brand-name\">\n                    <p>Community Kitchen</p>\n                </div>\n\n                {/* The shopping cart will only render if it is a mobile component */}\n                <div className=\"cart-icon\">\n                    <FontAwesomeIcon icon={faShoppingCart} style={{ color: 'white' }}\n                        onClick={OpenCart} />\n\n                </div>\n\n                {/* Triggers on Collapse - Hamburger Icon replaces pages */}\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n\n                {/* Right Hand Side of Navbar - Linked Pages (based off of Router paths in App.js) */}\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"ml-auto\">\n                        {/* Menu Page */}\n                        <Nav.Link className={\"nav-link\" + isPageActive(\"/\")} href=\"/\">Menu</Nav.Link>\n\n                        {/* Contact Page */}\n                        <Nav.Link className={\"nav-link\" + isPageActive(\"/contact\")} href=\"/contact\">Contact</Nav.Link>\n\n                        {/* About Page */}\n                        <Nav.Link className={\"nav-link\" + isPageActive(\"/about\")} href=\"/about\">About</Nav.Link>\n\n                        {/* Admin Page */}\n                        <span className=\"desktop-tabs\">\n                            <Nav.Link className={adminContentClass + isPageActive(\"/admin\")} href=\"/admin\">Admin</Nav.Link>\n                        </span>\n\n                        {/* Logout */}\n                        <span className=\"desktop-tabs\">\n                            <Nav.Link className={adminContentClass} onClick={Logout}>Logout</Nav.Link>\n                        </span>\n\n                        {/* Login */}\n                        <span className=\"desktop-tabs\">\n                            <Nav.Link className={loginButtonClass + isPageActive(\"/login\")} href=\"/login\">Login</Nav.Link>\n                        </span>\n                    </Nav>\n                </Navbar.Collapse>\n\n                {/* The shopping cart will only render for smaller desktop screens/tablets */}\n                <div className=\"cart-icon-smaller-desktop\">\n                    <FontAwesomeIcon icon={faShoppingCart} style={{ color: 'white' }}\n                        onClick={() => props.toggleCart()} />\n\n                </div>\n            </Navbar>\n        </html>\n    )\n}\n","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuSection.js",["205","206","207"],"/**\n * Hub of menu portion of page. Almost all  states are elevated to this level. \n * Defines most of the form processing and renders MenuFilter, MenuItems, and \n * MenuCart.\n * \n * @summary   Hub of menu items, most states are elevated to this level.\n * @author    Navid Boloorian\n */\n\nimport React, { useState } from 'react';\nimport MenuFilter from './MenuFilter';\nimport MenuItems from './MenuItems';\nimport '../css/MenuSection.css';\n\n/**\n * Handle the display of menu categories and sections. Stores states of what is \n * currently visible.\n * \n * @param {function} onItemAdd - Function returning boolean\n */\nconst MenuSection = ({onItemAdd}) => {\n  // filterCategories populates the filter buttons\n  const filterCategories = [\"Whole Menu\", \"Featured\", \"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\n\n  // populates the menu item categories\n  const defaultCategories = [\"Featured\", \"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\n\n  // stores all the categories currently visible\n  let displayedCategories = [];\n\n  // states that are managed and passed down to components\n  const [visibleCategories, setVisibleCategories] = useState(defaultCategories);\n\n  const [toggledFilter, setToggledFilter] = useState(\"none\");\n\n  // stores whether or not the popup is currently visible\n  const [popupVisible, setPopupVisible] = useState(false);\n\n  // map with all of the data that will be displayed in the popup\n  const [popupValues, setPopupValues] = useState(new Map());\n\n  // changes visible categories when filter button is clicked\n  const changeVisibleCategories = categoryName => {\n    if(categoryName == \"Whole Menu\") {\n      displayedCategories = defaultCategories;\n    }\n    else {\n      // if the option is not \"whole menu\", a new item is added to the \n      // displayedCategories array that is then passed to be rendered\n      displayedCategories.push(categoryName);\n    }\n\n    if(displayedCategories.length == 0) {\n      displayedCategories = defaultCategories;\n    }\n    \n    // responsible for actually rendering/setting what will be visible\n    setVisibleCategories(displayedCategories);\n  }\n\n  // processes the form submitted from the popup\n  const processForm = e => {\n    // prevents page reload\n    e.preventDefault();\n\n    // gets the form data\n    var data = new FormData(e.target);\n    var object = {};\n\n    // goes through and makes an object from the FormData\n    data.forEach((value, key) => {\n        if(!Reflect.has(object, key)){\n            object[key] = value;\n            return;\n        }\n\n        if(!Array.isArray(object[key])){\n            object[key] = [object[key]];    \n        }\n        object[key].push(value);\n    });\n\n    // converts the FormData to a JSON string, optional\n    var json = JSON.stringify(object);\n\n    // calls parent function to add item from popup to cart\n    onItemAdd(object);\n    \n    // when submit button is clicked, the popup is closed\n    togglePopup();\n  }\n  \n  // closes popup when open and opens popup when closed\n  const togglePopup = (title, description, price, image, dietaryInfo, accommodations, id, fillIns) => {\n    setPopupVisible(!popupVisible);\n    \n    // sets the values of the map based on passed-in information\n    popupValues.set(\"title\", title);\n    popupValues.set(\"description\", description);\n    popupValues.set(\"price\", price);\n    popupValues.set(\"image\", image);\n    popupValues.set(\"dietary-info\", dietaryInfo);\n    popupValues.set(\"accommodations\", accommodations);\n    popupValues.set(\"id\", id);\n    popupValues.set(\"fillIns\", fillIns);\n\n    setPopupValues(popupValues);\n  }\n\n  /**\n   * MenuSection is split into three columns:\n   * 1. filter column\n   * 2. menu column\n   * 3. cart column\n   */\n  return (\n    <div className=\"menu-section-wrapper\">\n      <div className=\"menu-section\">\n        <div className=\"menu-filter-wrapper\">\n          <MenuFilter toggledFilter={toggledFilter} setToggledFilter={setToggledFilter} foodCategories={filterCategories} changeVisibleCategories={() => changeVisibleCategories} />\n        </div>\n        <div className=\"menu-items\">\n          {/** parameters are states being passed down */}\n          <MenuItems foodCategories={visibleCategories} processForm={processForm} popupVisible={popupVisible} popupValues={popupValues} togglePopup={togglePopup}/>\n        </div>\n        <div className=\"menu-cart\">\n      </div>\n      </div>\n    </div>\n  )\n}\n\nexport default MenuSection;","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/ContactForm.js",["208","209"],"/**\n * Component creating the form on the contact page. Form takes user's \n * information and sends an email to UWEAST on their behalf. Error handling \n * makes sure that backend response is 200, otherwise notify user.\n * \n * @summary   Form to contact UWEAST found on contact page.\n * @author    Navid Boloorian, Amrit Kaur Singh\n */\nimport React from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { Snackbar } from '@material-ui/core';\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\nconst ContactForm = () => {\n\n  const [state, setState] = React.useState({\n    snack: {\n      message: '',\n      open: false\n    },\n  });\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n  \n    const formData = new FormData(e.target);\n    let data = {};\n    \n    // make FormData into a js object to pass to route\n    for(var [key, value] of formData.entries()) {\n      data[key] = value;\n    }\n  \n    try{\n  \n      const response = await fetch(`${BACKEND_URL}autoEmails/contact`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(data)\n      });\n      \n      // successful response\n      if (response.status == 200){\n        alert(\"Message sent!\");\n        // reload window to clear input boxes \n        window.location.reload();\n        \n        // malformed email\n      } else if(response.status == 400) {\n        setState({...state, snack: {message: 'Invalid Email Address!', open: true}});\n\n        // system error\n      } else {\n        setState({...state, snack: {message: 'System Error: Cannot send email!', open: true}});\n      }\n      \n      // general error\n    } catch(error){\n      setState({...state, snack: {message: 'System Error: Cannot send email!', open: true}});\n    }\n  };\n  \n  // error message display: auto close itself by updating its states\n  const handleSnackClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setState({...state, snack: {open: false}});\n  };\n\n  return (\n    <div className=\"contact-form\">\n      <div className=\"contact-form-text\">\n      <h1>CONTACT US</h1>\n      <p>Please email us using the form below</p>\n      <form onSubmit={sendMessage}>\n        <input type=\"text\" name=\"name\" className=\"first-input contact-form-input\" placeholder=\"Your Name\" required/>\n        <br />\n        <input type=\"text\" name=\"email\" className=\"contact-form-input\" placeholder=\"Your Email\" required />\n        <br />\n        {/** automatically-resizing textarea component */}\n        <TextareaAutosize className=\"contact-form-input\" name=\"message\" placeholder=\"Your message\" maxRows={3} required />\n        <br />\n        <input type=\"submit\" className=\"contact-form-submit\" value=\"Submit\"  />\n      </form>\n      </div>\n      <Snackbar open={state.snack.open} autoHideDuration={6000} onClose={handleSnackClose} message={state.snack.message}/>\n    </div>\n  )\n}\n\nexport default ContactForm;","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/PayPal.js",["210","211"],"/**\n * This file contains the code for the PayPal Smart Buttons integration.\n * It calls the backend once an order is completed to create a new order object.\n * The expected form of the props is shown below.\n *\n * @summary Renders paypal buttons for payment based on cart passed in through props\n * @author PatrickBrown1\n */\nimport React from 'react'\nimport { useHistory } from \"react-router-dom\";\nimport { useCookies } from 'react-cookie';\n\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\n//PayPal script is located in public/index.html (contains Client ID)\nexport default function PayPal(props) {\n    const { cart } = props;\n    let history = useHistory();\n    \n    //stores cookie object and function to remove cookie\n    const [cookies, removeCookie] = useCookies([\"cart\"]);\n    // I assume the cart object looks like this:\n    // {\n    //     cart_total: \"\",\n    //     item_total: \"\",\n    //     tax_total: \"\",\n    //     items: [\n    //         {\n    //             name: \"\",\n    //             quantity: \"\",\n    //             size: \"\",\n    //             addons: [\"\", \"\"],\n    //             individual_price: \"\",\n    //             individual_tax: \"\",\n    //         },\n    //     ],\n    //     pickup_date: \"\"\n    // }\n    const paypalRef = React.useRef();\n    const paypalOrderObject = {\n        intent: \"CAPTURE\",\n        application_context: {\n            shipping_preference: 'NO_SHIPPING',\n        },\n        purchase_units: [{\n            description: \"Food order from UWEAST Kitchen\",\n            // Deals with pricing of the cart\n            amount: {\n                currency_code: \"USD\",\n                value: cart.cart_total,\n                breakdown: {\n                    // includes totals for items and taxes. Shipping and handling can be ignored\n                    // because the items are for pickup and handling is included in price\n                    item_total: {\n                        currency_code: \"USD\",\n                        value: cart.item_total,\n                    },\n                    tax_total: {\n                        currency_code: \"USD\",\n                        value: cart.tax_total,\n                    },\n                }\n            },\n            // Deals with the individual item entries for the order\n            items: \n            cart.items.map((item) => {\n                return {\n                    name: item.name,\n                    // Description follows the format:\n                    // Size: {size}, (Gluten Free,) (Other addons,) \n                    description: [`Size: ${item.size}`, ...item.addons].join(\", \"),\n                    unit_amount: {\n                        currency_code: \"USD\",\n                        value: item.individual_price,\n                    },\n                    tax: {\n                        currency_code: \"USD\",\n                        value: item.individual_tax,\n                    },\n                    quantity: item.quantity,\n                    category: \"PHYSICAL_GOODS\"\n                }\n            })\n        }],\n        shipping_type: 'PICKUP',\n    }\n    // THE FOLLOWING TWO METHODS ARE NOT USED. THEY WERE CREATED FOR\n    // SERVER SIDE PAYMENT INTEGRATION, BUT THIS ISN'T BEST PRACTICE,\n    // SO IT WAS NOT PURSUED. THEREFORE THESE METHODS ARE COMMENTED OUT.\n    /* const createOrder = async () => {\n        console.log(\"Creating order...\");\n        return fetch(`${BACKEND_URL}paypal/createPayment`, {\n            method: \"POST\",\n            body: JSON.stringify(paypalOrderObject),\n            headers: {\n                \"content-type\": \"application/json\"\n            }, \n        }).then((res) => {\n            if(res.ok) {\n                return res.json();\n            }\n        }).then((data) => {\n            console.log(\"finished creating order\")\n            return data.orderID; // make sure to use the same key name for order ID on the client and server\n        })\n        .catch((err) => {\n            console.log(err);\n            alert(\"Create order Error\");\n        });\n    }\n    const onApprove = async (data) => {\n        console.log(\"Authorizing order...\");\n        return fetch(`${BACKEND_URL}paypal/executePayment`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                orderID: data.orderID,\n            }),\n        }).then((res) => {\n           // handle show completion\n           console.log(\"ORDER COMPLETE!\");\n           return res.json();\n        })\n        .catch(() => {\n            alert(\"Error\");\n        }).then((details) => {\n            alert(\"Successful order!\");\n            console.log(details);\n        });\n    } */\n\n     // To show PayPal buttons once the component loads\n    React.useEffect(() => {\n        window.paypal\n        .Buttons({\n            createOrder: async(data, actions) => {\n                return actions.order.create(paypalOrderObject);\n            },\n            onApprove: async (data, actions) => {\n                return actions.order.capture().then(function(details) {\n                    // Details here includes payer name, phone number, and email.\n\n                    // create order object\n                    const orderObj = {\n                        \"Customer\": {\n                            \"Name\": details.payer.name.given_name + \" \" + details.payer.name.surname,\n                            \"Email\": details.payer.email_address,\n                            \"Phone\": details.payer.phone.phone_number.national_number\n                        },\n                        \"Pickup\": cart.pickup_date,\n                        \"PayPal\": {\n                            \"Amount\": cart.cart_total,\n                            \"transactionID\": details.id\n                        },\n                        \"Order\": \n                        cart.items.map((item) => {\n                            return {\n                                \"item\": item.name,\n                                \"quantity\": item.quantity,\n                                \"extra\": [`${item.size} size`, ...item.addons],\n                            }\n                        })\n                    }\n                    // signal email automation by calling the /autoEmails/automate route, \n                    // this will automatically add the order to the database \n                    return fetch(`${BACKEND_URL}autoEmails/automate`, {\n                        method: \"POST\",\n                        headers: {\n                            \"content-type\": \"application/json\",\n                        },\n                        body: JSON.stringify(orderObj),\n                    }).then((res) => {\n                        if(res.ok){\n                            alert('Transaction completed! You will receive a confirmation email shortly.');\n                        } else {\n                            alert('Transaction completed, but email automation failed. You paid for your meal, and should get a confirmation from PayPal');\n                        }\n                        //clears the cart cookie after order is placed\n                        removeCookie(\"cart\");\n                        history.push(\"/\");\n                    })\n                    .catch(() => {\n                        alert(\"Error\");\n                    });\n                });\n            },\n            onCancel: () => {\n                // If the user cancels their order, send them back to the cart summary\n                // The cart summary exists at the menu page\n                console.log(\"cancel\");\n                history.push(\"/\");\n            },\n            onError: (err) => {\n                alert(\"An error occurred!\");\n                console.error(err);\n                history.push(\"/\");\n\n            },\n        })\n        .render(paypalRef.current);\n    }, [cart]);\n\n    return (\n        <div>\n            <div ref={paypalRef}/>\n        </div>\n    )\n}","/Users/amador/UWEAST-Community-Kitchen/frontend/src/util/Auth.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/CustomTimePicker.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/CartPreview.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/SearchSection.js",["212","213"],"/**\n * Upper portion of menu page. Has formatting for \"jumbotron\" background image.\n * \n * @summary   Upper portion of menu page with main background image.\n * @author    Navid Boloorian\n */\n\nimport React, {useState, useEffect} from 'react';\nimport \"../css/SearchSection.css\";\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\nconst SearchSection = () => {\n  // set a default header image here\n  var defaultImg = \"https://idental.com.sg/wp-content/uploads/soft-food-for-braces-1200x675.png\"\n\n  const [headerImg, setHeaderImg] = useState(\"\"); \n\n  /**\n   * UseEffect gets the background image for the header.\n   */\n  useEffect(() => {\n    fetch(`${BACKEND_URL}menuImages`)\n    .then(async result => {\n      if (result.ok) {\n        const json = await result.json();\n\n        if(json.imageUrl != undefined) {\n          setHeaderImg(json.imageUrl.imageUrl);\n        }\n      }\n      else {\n        console.log(\"error\");\n      }\n    })\n  }, []);\n\n  return (\n    <div className=\"search-section\">\n      <img alt=\"Menu Image\" src={headerImg} className=\"header-img\" onError={(e)=>{e.target.src=defaultImg}} />\n    </div>\n  );\n}\n  \nexport default SearchSection;","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/Banner.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Emails.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/AdminMenuItems.js",["214","215"],"/**\n * This file renders a table filled with each item in the menu. It includes information\n * such as name, icon, price, addons, sizing, etc. This table is searchable based on name,\n * and sortable based on item caregory (main dish, appetizer, side, etc.). This table gives\n * the user the option to edit and remove existing items, and add new items.\n *\n * @summary     Renders admin menu items table for the Admin page\n * @author      PatrickBrown1\n */\n\n\nimport React, {useState, useEffect, useReducer} from 'react';\nimport {Modal, Button} from 'react-bootstrap';\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport SearchBar from \"material-ui-search-bar\";\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport '../css/AdminMenuItems.css';\nimport AddMenuItemModal from './AddMenuItemModal.js';\nimport EditMenuItemModal from './EditMenuItemModal.js';\nimport ChangeHeaderModal from './ChangeHeaderModal.js';\n\nimport {getJWT, logout} from '../util/Auth';\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\n/**\n * This function takes in data points from the get item route and formats them into\n * an object readable by the table.\n *\n * @param {string} itemName - name of the item\n * @param {string} imgSource - url of image source\n * @param {string} categoryName - item's category\n * @param {Object[]} options -  array of accommodation objects\n * @param {Object} baseprice - object with Individual and Family price properties\n * @param {string} description - description of the item\n * @param {string} id - item's id in database\n * @param {boolean} featured - indicates whether or not the item is featured on the menu\n * @param {Object} dietaryInfo - object containing dairyFree, vegan, vegetarian, and gluten-free boolean properties\n *\n * @return {Object} - Object with above parameters formatted in proper order.\n */\nfunction createData(itemName, imgSource, categoryName, options, baseprice, description, id, featured, dietaryInfo) {\n  return {\n        \"itemName\": itemName, \n        \"imgSource\": imgSource,\n        \"categoryName\": categoryName, \n        \"options\": options, \n        \"basePrice\": baseprice, \n        \"description\": description,\n        \"id\": id,\n        \"isFeatured\": featured,\n        \"dietaryInfo\": dietaryInfo\n    };\n}\n/**\n * Renders modal that asks the user if they want to remove the item from the menu.\n *\n * @param {boolean} deleteConfirmation - indicates whether or not to show the delete confirmation modal\n * @param {function} setDeleteConfirmation - sets value of deleteConfirmation\n * @param {Object[]} itemList - list of all menu item objects\n * @param {function} setItemList -  sets itemList\n * @param {Object} displayContent - list of menu item objects currently being displayed\n * @param {string} setDisplayContent - sets displayContent\n\n * @return - modal displaying delete confirmation message\n */\nconst deleteConfirmationModal = (deleteConfirmation, setDeleteConfirmation, itemList, setItemList, displayContent, setDisplayContent) => {\n    return (\n        <Modal \n            show={deleteConfirmation !== []} \n            onHide={() => setDeleteConfirmation([\"\", \"\"])} \n            backdrop='static'\n            style={{\"marginTop\": \"30vh\"}}\n        >\n                <Modal.Header closeButton>\n                    <Modal.Title>Delete Menu Item</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div>\n                        <p>Are you sure you want to remove {deleteConfirmation[0]} from the menu?</p>\n                    </div>\n                </Modal.Body>\n                \n                <Modal.Footer>\n                    <Button variant=\"primary\" className=\"menuAddButton\" onClick={() => {\n                        // REMOVE ITEM FROM MENU\n                        console.log(\"removing item from menu\")\n                        \n                        // Call database, remove item from menu\n                        handleRemoveByID(deleteConfirmation[1], itemList, setItemList, displayContent, setDisplayContent);\n                        setDeleteConfirmation([\"\", \"\"]);\n                    }}>\n                        Remove Item\n                    </Button>\n                    <Button variant=\"secondary\" onClick={() => {\n                        setDeleteConfirmation([\"\", \"\"]);\n                    }}>\n                        Cancel\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        );\n}\n/**\n * Renders table of items based on what is passed in through displayContent\n *\n * @param {Object} display - list of menu item objects currently being displayed\n * @param {string} setDisplay - sets display\n * @param {function} setDeleteConfirmation - sets value of deleteConfirmation\n * @param {function} handleFeatureChange -  function that handles when featured checkbox is toggled\n * @param {function} setCurrentEditItem - sets the item being edited if edit button is pressed\n\n * @return - renders table of menu items\n */\nfunction menuTable(display, setDisplay, setDeleteConfirmation, handleFeatureChange, setCurrentEditItem) {\n    return (\n        <TableContainer component={Paper} className=\"menuTableContainer\">\n            <Table aria-label=\"simple table\" className=\"menuTable\">\n                <TableHead>\n                    <TableRow style={{\"overflow\": \"hidden\"}}>\n                        <TableCell className=\"menuTableHeaders\" width=\"5%\">Feature</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"15%\" align=\"center\">Item Image</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"10%\" align=\"left\">Item Name</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"10%\" align=\"left\">Category Name</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"10%\" align=\"left\">Size</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"10%\" align=\"left\">Base Price</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"30%\" align=\"left\">Add-ons</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"10%\" align=\"left\">Edit</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {display.displayContent.map((row, index) => {\n                        const bgColor = index % 2 === 0 ? \"evenrowbg\" : \"oddrowbg\";\n                        // console.log(row);\n                        return (\n                            <TableRow key={row._id} className={bgColor}>\n                                <TableCell component=\"th\" scope=\"row\" className=\"menuRowText\" width=\"5%\">\n                                    <Checkbox\n                                        id={row._id + \"checkbox\"}\n                                        checked={row.isFeatured}\n                                        onChange={(e) => {\n                                            handleFeatureChange(row);\n                                        }}\n                                        name={row.itemName}\n                                        style ={{\n                                            color: \"#747474\",\n                                        }}\n                                    />\n                                </TableCell>\n                                <TableCell align=\"center\" className=\"menuRowText\" width=\"15%\">\n                                    <img src={row.imgSource} alt={row.itemName} className=\"menuItemImage\"/>\n                                </TableCell>\n                                <TableCell className=\"menuRowText\" width=\"10%\">{row.itemName}</TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"10%\">{row.categoryName}</TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"10%\">\n                                {\n                                    row.basePrice.map((v) => {return (<>{v[0]}<br /></>)})\n                                }\n                                </TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"10%\">\n                                {\n                                    row.basePrice.map((v) => <>${v[1]}<br /></>)\n                                }\n                                </TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"30%\">\n                                {\n                                    row.options.map((v) => <p>{v[1].Description}</p>)\n                                }\n                                </TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"10%\">\n                                    <IconButton onClick={() => setCurrentEditItem(row.id)}>\n                                        <EditIcon style={{\"marginRight\": \"5px\"}}/>\n                                    </IconButton>\n                                    <IconButton aria-label=\"delete item\" onClick={() => setDeleteConfirmation([row.itemName, row.id])}>\n                                        <DeleteIcon style={{\"marginLeft\": \"5px\"}}/>\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                    )})}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n/**\n * Removed an item from the database and from page state\n *\n * @param {string} id - id of item being removed\n * @param {Object[]} itemList - list of all menu items\n * @param {function} setItemList - sets value of itemList\n * @param {Object[]} displayContent -  list of all menu items being displayed\n * @param {function} setDisplayContent - sets value of displayContent\n */\nasync function handleRemoveByID(id, itemList, setItemList, displayContent, setDisplayContent){\n    // remove from database\n    console.log(\"Removing \" + id);\n    await fetch(`${BACKEND_URL}item/remove`, {\n            method: \"DELETE\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                \"_id\": id,\n                \"token\": getJWT()\n            })\n        }).then(res => {\n            if(res.ok){\n                console.log(\"Remove successful!\")\n                // remove from rows\n                setItemList(itemList.filter(x => x.id !== id));\n                // remove from filtered rows\n                setDisplayContent({displayContent: displayContent.displayContent.filter(x => x.id !== id)});\n            }\n             // invalid admin token\n             else if(res.status === 401){\n                logout();\n                // refresh will cause a redirect to login page\n                window.location.reload();\n                return;\n            }\n        })\n    \n}\nexport default function AdminMenuItems (props) {\n    const [deleteConfirmation, setDeleteConfirmation] = useState([\"\", \"\"]);\n    \n    const [itemList, setItemList] = useState([]);\n    const [loaded, setLoaded] = useState(false);\n    const [checkboxUpdate, setCheckboxUpdate] = useState(\"\");\n    const [changeHeaderModal, setChangeHeaderModal] = useState(false);\n    const [addItemModal, setAddItemModal] = useState(false);\n    const [currentEditItem, setCurrentEditItem] = useState(\"\");\n    const [itemAddedSuccess, setItemAddedSuccess] = useState(false)\n    const [itemEditedSuccess, setItemEditedSuccess] = useState(false);\n\n    // const [searchTerm, setSearchTerm] = useState(\"\");\n    // const [filter, setFilter] = useState(\"All\");\n    // const [displayContent, setDisplayContent] = useState([]);\n    const [display, setDisplay] = useReducer(\n        (state, newState) => ({...state, ...newState}),\n        {searchTerm: \"\", filter: \"All\", displayContent: itemList}\n    )\n    const [headerImageURL, setHeaderImageURL] = useState(\"\");\n\n    // fetch all menu items to display in table\n    useEffect(() => {\n        var data = null;\n        var imgUrl = null;\n        const fetchData = async () => {\n            const res = await fetch(`${BACKEND_URL}item/`, {\n                method: \"GET\",\n                headers: {\n                    \"content-type\": \"application/json\",\n                },\n            })\n            data = await res.json();\n            console.log(data.items);\n            const rows = [];\n            data.items.forEach(element => {\n                // log(element);\n                rows.push(\n                    createData(\n                        element.Name,\n                        element.pictureURL, \n                        element.Category, \n                        Object.entries(element.Accommodations),\n                        Object.entries(element.Prices), \n                        element.Description,\n                        element._id,\n                        element.isFeatured,\n                        element.dietaryInfo\n                ));\n            });\n            const urlFetch = await fetch(`${BACKEND_URL}menuImages/`, {\n                method: \"GET\",\n                headers: {\n                    \"content-type\": \"application/json\",\n                },\n            })\n            data = await urlFetch.json();\n            setHeaderImageURL(data.imageUrl.imageUrl);\n            setItemList(rows);\n            setDisplay({displayContent: rows});\n            setLoaded(true);\n        }\n        \n        fetchData();\n    }, [loaded])\n\n    /**\n     * This functions takes in the filter string and the search term, and updates\n     * the display state to these new two values, and the items that correspond to\n     * these two values\n     *\n     * @param {String} filter - current filter\n     * @param {String} searchTerm - current search term\n     */\n    const handleDisplayChange = (filter, searchTerm) => {\n        // takes item list, filters by category then search term\n        let workingItems = [];\n        // filter by category\n        if(filter === \"All\"){ \n            workingItems = itemList;\n        }\n        else if(filter === \"Featured\"){\n            for(var index in itemList) { \n                if (itemList[index].isFeatured){\n                    workingItems.push(itemList[index]); \n                }\n            }\n        }\n        else{\n            for(var i in itemList) { \n                if (itemList[i][\"categoryName\"] === filter){\n                    workingItems.push(itemList[i]); \n                }\n            }\n        }\n        // filter by search term\n        if(searchTerm !== \"\"){\n            workingItems = workingItems.filter(x => x.itemName.toLowerCase().includes(searchTerm.toLowerCase()));\n\n        }\n        setDisplay({filter: filter, searchTerm: searchTerm, displayContent: workingItems});\n    }\n    /**\n    * Updates items and database when a feature checkbox is pressed\n    *\n    * @param {Object} row - row being updated\n    */\n    const handleFeatureChange = async (row) => {\n        const itemID = row.id;\n        const newValue = !row.isFeatured;\n        row.isFeatured = newValue;\n        // update item's feature property in local (displayContent and itemList)\n        var itemListIndex = -1;\n        itemList.forEach((x, index) => {\n            itemListIndex = x.id === itemID ? index : itemListIndex;\n        })\n        if(itemListIndex !== -1){\n            setItemList(prev => {\n                prev[itemListIndex].isFeatured = newValue;\n                return prev;\n            })\n        }\n        var displayContentIndex = display.displayContent.findIndex(x => x.id === itemID);\n        if(displayContentIndex !== -1){\n            display.displayContent[displayContentIndex].isFeatured = newValue;\n            setDisplay({displayContent: display.displayContent});\n        }\n        setCheckboxUpdate(row.itemName + \"\" + newValue);\n\n        // update item's feature property in database\n        await fetch(`${BACKEND_URL}item/feature`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                \"_id\": itemID,\n                \"isFeatured\": newValue,\n                \"token\": getJWT()\n            })\n        }).then(res =>{\n             // invalid admin token\n             if(res.status === 401){\n                logout();\n                // refresh will cause a redirect to login page\n                window.location.reload();\n                return;\n            }\n        })\n    }\n    if(loaded){\n        return (  \n            <div className=\"adminMenuPageContainer\">\n                {currentEditItem !== \"\" && <EditMenuItemModal showModal={currentEditItem !== \"\"} setCurrentEditItem={setCurrentEditItem} item={itemList.filter(item => item.id === currentEditItem)[0]} setLoaded={setLoaded} setItemEditedSuccess={setItemEditedSuccess}/>}\n                {deleteConfirmation[0] !== \"\" && deleteConfirmationModal(deleteConfirmation, setDeleteConfirmation, itemList, setItemList, display, setDisplay)}\n                {addItemModal && <AddMenuItemModal addItemModal={addItemModal} setAddItemModal={setAddItemModal} setLoaded={setLoaded} setItemAddedSuccess={setItemAddedSuccess}/>}\n                {changeHeaderModal && <ChangeHeaderModal changeHeaderModal={changeHeaderModal} setChangeHeaderModal={setChangeHeaderModal} setLoaded={setLoaded} headerImageURL={headerImageURL}/>}\n                {/* Add/Edit item success snackbars*/}\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                    open={itemAddedSuccess}\n                    autoHideDuration={5000}\n                    onClose={() => setItemAddedSuccess(false)}\n                    message={<span id=\"message-id\">Item successfully added!</span>}\n                />\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                    open={itemEditedSuccess}\n                    autoHideDuration={5000}\n                    onClose={() => setItemEditedSuccess(false)}\n                    message={<span id=\"message-id\">Item successfully edited!</span>}\n                />\n\n                <div className=\"aboveTableContainer\">\n                    <div className=\"addUpdateButtonContainer\">\n                        <Button className=\"menuAddButton\" onClick={() => {setAddItemModal(true)}}>\n                            <AddCircleIcon className=\"menuAddButtonIcon\" />\n                            Add Item\n                        </Button>\n                        <Button className=\"menuChangeHeaderButton\" onClick={() => {setChangeHeaderModal(true)}}>\n                            Change Header\n                        </Button>\n                    </div>\n                    <div className=\"searchFilterContainer\">\n                        <Select\n                            className=\"menuFilterSelect\"\n                            id=\"item-filter-select\"\n                            defaultValue=\"All\"\n                            displayEmpty=\"false\"\n                            variant=\"outlined\"\n                            value={display.filter}\n                            onChange={(v) => {\n                                handleDisplayChange(v.target.value, display.searchTerm);\n                            }}\n                        >\n                            <MenuItem value=\"All\">All</MenuItem>\n                            <MenuItem value=\"Featured\">Featured</MenuItem>\n                            <MenuItem value=\"Appetizers\">Appetizers</MenuItem>\n                            <MenuItem value=\"Main Dishes\">Main Dishes</MenuItem>\n                            <MenuItem value=\"Sides\">Sides</MenuItem>\n                            <MenuItem value=\"Drinks\">Drinks</MenuItem>\n                        </Select>\n                        <SearchBar\n                            className=\"menuSearchBar\"\n                            value={display.searchTerm}\n                            onChange={(newValue) => {\n                                handleDisplayChange(display.filter, newValue);\n                            }}\n                            onRequestSearch={(newValue) => {\n                                handleDisplayChange(display.filter, newValue);\n                            }}\n                            onCancelSearch={() => {                                \n                                handleDisplayChange(display.filter, \"\");\n                            }}\n                        />\n                    </div>\n                </div>\n                {menuTable(display, setDisplay, setDeleteConfirmation, handleFeatureChange, setCurrentEditItem)}\n            </div>\n        )\n    }\n    else{\n        return (\n            <div>Loading...</div>\n        )\n    }\n}\n","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/ContactMap.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/OrdersTable.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuItemPopup.js",["216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231"],"/**\r\n * Popup that displays specified item when MenuItem is clicked. Has form to \r\n * pass data to/add items to cart. Popup gives relevant information such as \r\n * pricing, description, additional accommodations etc.\r\n * \r\n * @summary     Displays item information and allows user to add item to cart.\r\n * @author      Aaron Kirk, Navid Boloorian\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport '../css/MenuItemPopup.css';\r\nimport plus from '../media/plus.svg';\r\nimport minus from '../media/minus.svg';\r\nimport info from '../media/info.svg';\r\n\r\nconst MenuItemPopup = ({ values, togglePopup, processForm }) => {\r\n\r\n    /**\r\n     * Calculates the initial cost to add on from default selected accommodations\r\n     * when editing an item (when auto-selecting fields). Must be used first to\r\n     * set the inital totalPrice state when editing items.\r\n     * \r\n     * @returns {number} - Sum of the price of all auto-selected accommodations\r\n     */\r\n    const getInitialAccommodationsCost = () => {\r\n        var sum = 0;\r\n        if(values.get(\"fillIns\") != undefined) {\r\n            values.get(\"accommodations\").forEach((accommodation) => {\r\n                if(values.get(\"fillIns\").accommodations.includes(accommodation.Description)) {\r\n                    sum += parseFloat(accommodation.Price).toFixed(2);\r\n                }\r\n            });\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    // TODO: fix the absurd tertiary statements here...\r\n    const [quantity, setQuantity] = useState((values.get(\"fillIns\") != undefined) ? parseInt(values.get(\"fillIns\").quantity) : 1);\r\n    // if individual price exists, use that as default; otherwise, use family\r\n    const [currPrice, setCurrPrice] = useState((values.get(\"fillIns\") != undefined) ? ((values.get(\"fillIns\").size == \"Individual\") ? values.get(\"price\").Individual : values.get(\"price\").Family) : ((\"Individual\" in values.get(\"price\")) ? values.get(\"price\").Individual : values.get(\"price\").Family));\r\n    const [accommodationCost, setAccommodationCost] = useState(getInitialAccommodationsCost());\r\n    const [totalPrice, setTotalPrice] = useState((parseFloat(currPrice * quantity) + parseFloat(accommodationCost)).toFixed(2));\r\n\r\n    /**\r\n     * Updates the quantity and price states accordingly when the user tries to\r\n     * increment or decrement the quantity.\r\n     * \r\n     * @param {*} sign - Symbol (+ or -) indicating whether to increase or decrease quantity\r\n     */\r\n    const changeQuantity = sign => {\r\n        // two scenarios: increments or decrements quantity\r\n        if(sign == \"+\") {\r\n            setQuantity(quantity + 1);\r\n            // calulates on quantity + 1 b/c state hasn't updated yet\r\n            setTotalPrice((parseFloat(accommodationCost) + currPrice * (quantity + 1)).toFixed(2));\r\n        }\r\n        else if(sign == \"-\") {\r\n            if(quantity > 1) {\r\n                setQuantity(quantity - 1);\r\n                // calulates on quantity - 1 b/c state hasn't updated yet\r\n                setTotalPrice((parseFloat(accommodationCost) + currPrice * (quantity - 1)).toFixed(2));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates price when accommodations are selected or unselected.\r\n     * \r\n     * @param {*} checked - Checked state of the accommodation field \r\n     * @param {*} price - Price of the accommodation to be added or removed\r\n     */\r\n    const handleAccommodation = (checked, price) => {\r\n        // adds price if field is now checked; removes price otherwise\r\n        if(checked) {\r\n            // parseFloat() is necessary because otherwise they get treated like strings for addition\r\n            setAccommodationCost((parseFloat(accommodationCost) + parseFloat(price)).toFixed(2));\r\n            setTotalPrice((parseFloat(totalPrice) + parseFloat(price)).toFixed(2));\r\n        } else {\r\n            setAccommodationCost((accommodationCost - price).toFixed(2));\r\n            setTotalPrice((totalPrice - price).toFixed(2));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to render a sizing option and determine whether or not\r\n     * it should be checked by default.\r\n     * \r\n     * @param {*} name - Name of Size (Individual or Family)\r\n     * @param {*} price - Price of Size\r\n     * @param {*} hasBothPrices - boolean indicating whether both options are being rendered in order to choose default selection\r\n     */\r\n    const renderSize = (name, price, hasBothPrices) => {\r\n        return(\r\n            // conditionally displays family size as an \"add-on\" if both are possible\r\n            // TODO: fix the absurd nested tertiary statements\r\n            //      (these decide whether the element should be checked by default\r\n            //       depending on which size this is, whether both sizes are \r\n            //       available, and whether an item is passed in to fill populate fields)\r\n            <label className=\"choice-label\">\r\n                <input onClick={() => handleSize(price)} type=\"radio\" name=\"size\" value={name} defaultChecked={(name == \"Individual\" || ((values.get(\"fillIns\") != undefined) && values.get(\"fillIns\").size == name) || !(\"Individual\" in values.get(\"price\")))} required />\r\n                <span onClick={() => handleSize(price)} className=\"label-title\">{name + \" \"}<span title=\"Suited for 5-6 people\"><img src={info} class={(name == \"Family\") ? \"size-info\" : \"hidden size-info\"} alt=\"Size Info\"/></span>{(hasBothPrices) ? \" +($\" + parseFloat(price - values.get(\"price\").Individual).toFixed(2) + \")\": null}</span>\r\n            </label>\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * Changes price depending on the size selected.\r\n     * \r\n     * @param {*} newPrice - Price of the newly selected size\r\n     */\r\n    const handleSize = (newPrice) => {\r\n        setCurrPrice(newPrice);\r\n        // currPrice has yet to update, so still using newPrice\r\n        // fix to 2 decimal places\r\n        setTotalPrice((parseFloat(accommodationCost) + newPrice * (quantity)).toFixed(2));\r\n    }\r\n\r\n    /**\r\n     * Helper function to render the entire accommodations section.\r\n     */\r\n    const renderAccommodations = () => {\r\n        // return nothing if there are no accommodations\r\n        if(values.get(\"accommodations\").length == 0) return;\r\n        else {\r\n            return (\r\n                /** Header */\r\n                <div className=\"section accommodations-section\">\r\n                <div className=\"section-title\">\r\n                    <h3>Accommodations</h3>\r\n                    <i>optional</i>\r\n                </div>\r\n                {/* map through and render all accommodations */}\r\n                {values.get(\"accommodations\").map((accommodation) => {\r\n                    return(\r\n                        <label className=\"choice-label\">\r\n\r\n                            <input type=\"checkbox\" name=\"accommodations\" \r\n                                defaultChecked={values.get(\"fillIns\") != undefined && values.get(\"fillIns\").accommodations.includes(accommodation.Description)}\r\n                                value={accommodation.Description} id={accommodation.Description} onChange={(e) => handleAccommodation(e.target.checked, accommodation.Price)} />\r\n\r\n                            <span className=\"label-title\">{accommodation.Description + \" +($\" + parseFloat(accommodation.Price).toFixed(2) + \")\"}</span>\r\n                        </label>\r\n                    );\r\n                })}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to count number of dietary information.\r\n     * \r\n     * @returns {number} - Number of dietary information fields that are true for this item.\r\n     */\r\n    const numDietaryInfo = () => {\r\n        // convert to Object\r\n        const dietaryInfo = Object.entries(values.get(\"dietary-info\"));\r\n        var count = 0;\r\n        // loop through all the dietaryInfo and account for ones that are true\r\n        for (const [key, value] of dietaryInfo) {\r\n            if(value) count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Helper function to render all the dietary information\r\n     */\r\n    const renderDietaryInfo = () => {\r\n        // returns nothing in the trivial case that there is no information to show\r\n        // this is so that the horizontal line (<hr/>) will not render\r\n        if (numDietaryInfo() == 0) return;\r\n        else {\r\n            return (\r\n                <>\r\n                <hr/>\r\n                <p className=\"dietary-info\">\r\n                    {(values.get(\"dietary-info\").vegan) ? \"*Vegan\" : null}\r\n                    {(values.get(\"dietary-info\").vegan) ? <br/> : null}\r\n                    {(values.get(\"dietary-info\").vegetarian) ? \"*Vegetarian\" : null}\r\n                    {(values.get(\"dietary-info\").vegetarian) ? <br/> : null}\r\n                    {(values.get(\"dietary-info\").glutenFree) ? \"*Gluten-free\" : null}\r\n                    {(values.get(\"dietary-info\").glutenFree) ? <br/> : null}\r\n                    {(values.get(\"dietary-info\").containsDairy) ? \"*Contains Dairy\" : null}\r\n                </p>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/** div that fades out the background */}\r\n            <div className=\"greyout\" onClick={togglePopup}></div>\r\n            <div className=\"menu-item-popup\">\r\n                <span className=\"close-button\" onClick={togglePopup}>+</span>\r\n                <div className=\"group-popup\">\r\n\r\n                    {/** Left side with dish details */}\r\n                    <div className=\"left-popup\">\r\n                        <div className=\"popup-image\" style={{backgroundImage: \"url(\" + values.get(\"image\") + \")\", backgroundSize:\"cover\"}}>\r\n                            <div className=\"popup-image-price\"><h3>{\"$\" + parseFloat(currPrice).toFixed(2)}</h3></div>\r\n                        </div>\r\n                        <div className=\"popup-item-info\">\r\n                            <h3 className=\"title-popup\">{values.get(\"title\")}</h3>\r\n                            <p className=\"desc-popup\">{values.get(\"description\")}</p>\r\n                            {renderDietaryInfo()}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/** right side with order options */}\r\n                    <div className=\"right-popup\">\r\n                        <form onSubmit={processForm} id=\"popup-form\">\r\n\r\n                            {/** sizing options */}\r\n                            <div className=\"section size-section\">\r\n                                <div className=\"section-title\">\r\n                                    <h3>Choose Size</h3>\r\n                                    <i>required</i>\r\n                                </div>\r\n                                {/** checks to ensure individual/family sizes exist; conditionally displays family size as an \"add-on\" if both are possible */}\r\n                                {(\"Individual\" in values.get(\"price\")) ? renderSize(\"Individual\", values.get(\"price\").Individual, false) : null}\r\n                                {(\"Family\" in values.get(\"price\")) ? renderSize(\"Family\", values.get(\"price\").Family, (\"Individual\" in values.get(\"price\"))) : null}\r\n                            </div>\r\n\r\n                            {/** accommodations options */}\r\n                            {renderAccommodations()}\r\n\r\n                            {/** custom instructions text area */}\r\n                            <div className=\"section instructions-section\">\r\n                                <div className=\"section-title\">\r\n                                    <h3>Special Instructions</h3>\r\n                                    <i>optional</i>\r\n                                </div>\r\n                                <p className=\"instructions-note\">Special accommodations can be made for orders placed in advanced but are not guaranteed, please <a href=\"/contact\">contact us</a> directly for more info.</p>\r\n                                <textarea name=\"instructions\" maxLength=\"75\" className=\"instructions-textarea\">{(values.get(\"fillIns\") != undefined) ? values.get(\"fillIns\").instructions : \"\"}</textarea>\r\n                            </div>\r\n\r\n                            {/** quantity selection */}\r\n                            <div className=\"section quantity-section\">\r\n                                <div className=\"section-title\"><h3>Quantity</h3></div>\r\n                                <div className=\"quantity-buttons\">\r\n                                    <button type=\"button\" className=\"button decrease-button\" onClick={() => {changeQuantity(\"-\");}\r\n                                    }><img src={minus} alt=\"Decrease Quantity\" /></button>\r\n                                    <span className=\"quantity-number\">{quantity}</span>\r\n                                    <button type=\"button\" className=\"button increase-button\" \r\n                                    onClick={() => {changeQuantity(\"+\");}}><img src={plus} alt=\"Increase Quantity\" /></button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/** hidden fields to pass along to the total price and  quantity */}\r\n                            <input name=\"popupValues\" type=\"hidden\" value={JSON.stringify(Object.fromEntries(values))} />\r\n                            <input name=\"price\" type=\"hidden\" value={parseFloat(totalPrice).toFixed(2)} />\r\n                            <input name=\"quantity\" type=\"hidden\" value={quantity} />\r\n                            <input className=\"submit-order-button\" type=\"submit\" value={(values.get(\"fillIns\") != undefined) ? \"Save Changes: $\" + totalPrice : \"Add \" + quantity + \" to cart: $\" + totalPrice} />\r\n                        </form>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n  \r\n    export default MenuItemPopup;\r\n","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/EditMenuItemModal.js",["232","233"],"/**\n * This file contains the modal for editing an item that exists the menu. It's split\n * into sections for each of the form items, including name, image url, category,\n * prices, accommodations, and description. The fields are automatically filled\n * in with the current information from the item for the user to edit.\n * \n * It uses MaterialUI's form control\n * to create the form. \n * The required fields are name, image url, category, description, and price.\n * Price is considered to be filled out if one of the prices is complete (so\n * one of the prices can be empty).\n * Also, a given accommodations is considered to be filled out if it has\n * 0 or 2 fields completed. If 0, it is removed, if 1, it is considered incomplete.\n * \n * Errors are thrown under the following cases:\n *     1. one of the required fields is empty\n *     2. one of the accommodations fields has one of the fields filled out\n *     3. none of the prices are filled out\n *   \n * A new accommodation field can be added if both fields of the previous one\n * has values, if not it will not be added.\n * Disclaimer: This file seems really long (it is), but it isn't very hard to\n * understand. A lot of the bulk comes from Material UI's form control handling\n * and general HTML property tags.\n *\n * @summary     Renders a modal for editing an item existing in the menu.\n * @author      PatrickBrown1\n */\n\nimport React, { useState, useReducer } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { Modal, FormControl, Checkbox, FormControlLabel, FormGroup, OutlinedInput, Select, MenuItem, InputAdornment, FormHelperText, Snackbar, IconButton } from '@material-ui/core';\nimport '../css/AddMenuItemModal.css';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport {getJWT, logout} from '../util/Auth';\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\n// renders a red asterix that indicates a required field\nfunction requiredAsterix(){\n    return (\n        <p className=\"requiredAsterix\">*</p>\n    );\n}\nexport default function EditMenuItemModal (props) {\n\n    const showModal = props.showModal;\n    const setShowModal = props.setCurrentEditItem;\n    const setLoaded = props.setLoaded;\n    // form states\n    const [itemName, setItemName] = useState(props.item.itemName);\n    const [itemCategory, setItemCategory] = useState(props.item.categoryName)\n\n    let [individualItemPrice, setIndividualItemPrice] = useState(props.item.basePrice[0][0] === \"Individual\" ? props.item.basePrice[0][1] : \"\"); \n    let [familyItemPrice, setFamilyItemPrice] = useState(props.item.basePrice[0][0] === \"Family\" ? props.item.basePrice[0][1] : props.item.basePrice.length === 2 ? props.item.basePrice[1][1] : \"\" );\n    \n    const [itemImageURL, setItemImageURL] = useState(props.item.imgSource)\n    const [itemDescription, setItemDescription] = useState(props.item.description)\n    /*  addOns is an array of objects \n    [\n        {\n            name: \"\",\n            price: \"\"\n        }\n    ]\n    */\n    let tempaddon = [];\n    props.item.options.forEach(item => {\n        tempaddon.push({\"name\": item[1].Description, \"price\": item[1].Price});\n    })\n    const [addOns, setAddOns] = useState(tempaddon);\n    \n        // dietary info\n    const [vegan, setVegan] = useState(props.item.dietaryInfo !== undefined ? props.item.dietaryInfo.vegan : false);\n    const [vegetarian, setVegetarian] = useState(props.item.dietaryInfo !== undefined ? props.item.dietaryInfo.vegetarian : false);\n    const [glutenFree, setGlutenFree] = useState(props.item.dietaryInfo !== undefined ? props.item.dietaryInfo.glutenFree : false);\n    const [containsDairy, setContainsDairy] = useState(props.item.dietaryInfo !== undefined ? props.item.dietaryInfo.containsDairy : false);\n\n    const [menuError, setMenuError] = useState(false);\n    const [errorSnackbar, setErrorSnackbar] = useReducer(\n        (state, newState) => ({...state, ...newState}),\n        {visible: false, message: \"\"}\n    )\n    \n    const handleSubmit = async () => {\n        // validate basic input\n        if(itemName === \"\" || \n            itemCategory === \"\" || \n            (individualItemPrice === \"\" && familyItemPrice === \"\") || \n            itemImageURL === \"\" || itemDescription === \"\"\n        ){\n            console.log(\"fail basic\");\n            setMenuError(true);\n            setErrorSnackbar({visible: true, message: \"There was an error in the form\"});\n            return;\n        }\n        // validate addons\n        let failAddOn = false;\n        addOns.forEach(item => {\n            if((item.price === \"\" && item.name !== \"\") || (item.price !== \"\" && item.name === \"\")){\n                // error\n                console.log(\"fail add on\");\n                failAddOn = true;\n                setMenuError(true);\n                setErrorSnackbar({visible: true, message: \"One or more addons weren't properly filled in\"});\n                return;\n            }\n            else if(item.name !== \"\" && parseFloat(item.price) < 0){\n                //negative number\n                console.log(\"add on price was negative\");\n                failAddOn = true;\n                setMenuError(true);\n                setErrorSnackbar({visible: true, message: \"Negative prices are not allowed in the menu\"});\n                return;\n            }\n        })\n        if(failAddOn){\n            setMenuError(true);\n            setErrorSnackbar({visible: true, message: \"One or more addons weren't properly filled in\"});\n            return;\n        }\n        // send to db\n        console.log(\"sending to database\");\n\n        // format data into item object\n        let pricesObj = {};\n        if(individualItemPrice !== \"\"){\n            pricesObj.Individual = individualItemPrice;\n        }\n        if(familyItemPrice !== \"\"){\n            pricesObj.Family = familyItemPrice;\n        }\n        let accommodations = [];\n        addOns.forEach(addon => {\n            if(addon.name !== \"\" && addon.price !== \"\"){\n                accommodations.push({\"Description\": addon.name, \"Price\": addon.price});\n            }\n        })\n        const dietaryInfo = {\n            \"vegan\": vegan,\n            \"vegetarian\": vegetarian,\n            \"glutenFree\": glutenFree,\n            \"containsDairy\": containsDairy,\n        };\n        const itemObject = {\n            \"_id\": props.item.id,\n            \"Name\": itemName,\n            \"pictureURL\": itemImageURL,\n            \"Description\": itemDescription,\n            \"Category\": itemCategory,\n            \"Prices\": pricesObj,\n            \"isFeatured\": false,\n            \"isCompleted\": false,\n            \"Accommodations\": accommodations,\n            \"dietaryInfo\": dietaryInfo,\n            \"token\": getJWT()\n        }\n        // push to database\n        await fetch(`${BACKEND_URL}item/edit`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify(itemObject)\n        }).then(res => {\n            if(res.ok){\n                props.setItemEditedSuccess(true);\n                // refetch\n                setLoaded(false);\n                setShowModal(\"\");\n            }\n             // invalid admin token\n             else if(res.status === 401){\n                logout();\n                // refresh will cause a redirect to login page\n                window.location.reload();\n                return;\n            }\n            else{\n                alert(\"There was an error. Recheck your inputs and try again\");\n            }\n        })\n        \n    }\n    return (\n        <>\n            {/* Failure Snackbar */}\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                open={errorSnackbar.visible}\n                autoHideDuration={5000}\n                onClose={() => setErrorSnackbar({visible: false, message: \"\"})}\n                message={<span id=\"message-id\">{errorSnackbar.message}</span>}\n            />\n            <Modal open={showModal} onClose={() => setShowModal(\"\")} \n                className=\"modalContainer\"\n            >\n                <div className=\"modalBackground\">\n                    <div className=\"headerContainer\">\n                    <IconButton\n                        className=\"removeAddOnButton\"\n                        onClick={() => setShowModal(\"\")}\n                    >\n                        <ClearIcon/>\n                    </IconButton>\n                    </div>\n                    <form autocomplete=\"off\">\n                        <div className=\"modalBody\">\n                            {/* Item Name */}\n                            <p className=\"formLabelText\">Name {requiredAsterix()}</p>\n                            <FormControl fullWidth error={menuError && itemName === \"\"} className=\"formItem\" margin='dense'>\n                                <OutlinedInput name=\"name\" id=\"name\" className=\"formTextInput\"\n                                    required \n                                    value={itemName}\n                                    onChange={(e) => setItemName(e.target.value)}\n                                    size=\"small\"\n                                />\n                            </FormControl>\n                            {/* Item Image URL */}\n                            <p className=\"formLabelText\">Image Link {requiredAsterix()}</p>\n                            <FormControl fullWidth error={menuError && (itemImageURL === \"\")} className=\"formItem\" margin='dense'>\n                                <OutlinedInput name=\"imageURL\" id=\"imageURL\" className=\"formTextInput\"\n                                    required \n                                    value={itemImageURL}\n                                    onChange={(e) => setItemImageURL(e.target.value)}\n                                    size=\"small\"\n                                />\n                            </FormControl>\n\n                            {/* Item Category */}\n                            <p className=\"formLabelText\">Category Name {requiredAsterix()}</p>\n                            <FormControl fullWidth error={menuError && itemCategory === \"\"} className=\"formItem\" margin='dense' variant=\"outlined\">\n                                <Select name=\"category\" type=\"text\" id=\"category\" className=\"formSelectInput\" required \n                                    placeholder=\"\"\n                                    value={itemCategory}\n                                    onChange={(e) => setItemCategory(e.target.value)}\n                                    size=\"small\"\n                                    displayEmpty\n                                >\n                                    <MenuItem value=\"Appetizers\">Appetizers</MenuItem>\n                                    <MenuItem value=\"Main Dishes\">Main Dishes</MenuItem>\n                                    <MenuItem value=\"Sides\">Sides</MenuItem>\n                                    <MenuItem value=\"Drinks\">Drinks</MenuItem>\n                                </Select>\n                            </FormControl>\n                            {/* Item Sizing and Price */}\n                            <div className=\"priceSizeContainer\">\n                                <div className=\"sizeContainer\">\n                                    <p className=\"formLabelText\">Size</p>\n                                    <FormControl margin='dense'>\n                                        <OutlinedInput name=\"name\" id=\"individuallabel\" className=\"formTextInput\"\n                                            required \n                                            value={\"Individual\"}\n                                            size=\"small\"\n                                            disabled\n                                        />\n                                    </FormControl>\n                                    <FormControl margin='dense'>\n                                        <OutlinedInput name=\"name\" id=\"familylabel\" className=\"formTextInput\"\n                                            required \n                                            value={\"Family\"}\n                                            size=\"small\"\n                                            disabled\n                                        />\n                                    </FormControl>\n                                </div>\n                                \n                                <div className=\"priceContainer\">\n                                    <p className=\"formLabelText\">Price</p>\n                                    <FormControl error={menuError && individualItemPrice === \"\" && familyItemPrice === \"\"} margin='dense' variant=\"outlined\">\n                                        <OutlinedInput name=\"name\" id=\"individualprice\" className=\"formTextInput\"\n                                            type=\"number\"\n                                            value={individualItemPrice}\n                                            startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n                                            onChange={(e) => {if(e.target.value >= 0) {setIndividualItemPrice(e.target.value)}}}\n                                            size=\"small\"\n                                        /> \n                                    </FormControl>\n                                    <FormControl error={menuError && individualItemPrice === \"\" && familyItemPrice === \"\"} margin='dense' variant=\"outlined\">\n                                        <OutlinedInput name=\"name\" id=\"familyprice\" className=\"formTextInput\"\n                                            type=\"number\"\n                                            value={familyItemPrice}\n                                            startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n                                            onChange={(e) => {if(e.target.value >= 0) {setFamilyItemPrice(e.target.value)}}}\n                                            size=\"small\"\n                                        /> \n                                    </FormControl>\n                                </div>\n                            </div>\n                            <div className=\"priceSizeContainer\">\n                                <FormHelperText style={{\"margin\": \"0px 40px 20px 0px\"}}>{requiredAsterix()} At least one size must be given a price. If you do not want a particular size available for the item, please leave its price field blank.</FormHelperText>\n                            </div>\n                            {/* Item Addons */}\n                            <p className=\"formLabelText\" style={{\"marginTop\": \"20px\", \"marginBottom\": \"-10px\"}}>Accommodations</p>\n                            <div className=\"priceSizeContainer\">\n                                <div className=\"sizeContainer\">\n                                    <p className=\"formSubHeading\">Description</p>\n                                    {addOns.map((item,index) => {\n                                        \n                                        return(\n                                            <FormControl margin='dense'\n                                                error = \n                                                {   menuError && \n                                                    ((item.name === \"\" && item.price !== \"\") || \n                                                    (item.name !== \"\" && item.price === \"\"))\n                                                }\n                                            >\n                                                <OutlinedInput id={item.name + \"nameinput\"} name={item.name + \"nameinput\"} className=\"formTextInput\"\n                                                    required \n                                                    value={item.name}\n                                                    onChange={e => {\n                                                            let addontemp = [...addOns];\n                                                            addontemp[index].name = e.target.value;\n                                                            setAddOns(addontemp);\n                                                        }} \n                                                    size=\"small\"\n                                                />\n                                            </FormControl>\n                                        );\n                                    })}\n                                </div>\n                                \n                                <div className=\"priceContainer\">\n                                    <p className=\"formSubHeading\">Price</p>\n                                    {addOns.map((item,index) => {\n                                        return(\n                                            <FormControl margin='dense'\n                                                error = \n                                                {   menuError && \n                                                    ((item.name === \"\" && item.price !== \"\") || \n                                                    (item.name !== \"\" && item.price === \"\")) ||\n                                                    (parseInt(item.price) < 0)\n                                                }\n                                            >\n                                                <OutlinedInput id={item.name + \"priceinput\"} name={item.name + \"priceinput\"} className=\"formTextInput\"\n                                                    required \n                                                    type=\"number\"\n                                                    value={item.price}\n                                                    startAdornment={<InputAdornment position=\"start\">+$</InputAdornment>}\n                                                    onChange={e => {\n                                                            const addontemp = [...addOns];\n                                                            addontemp[index].price = e.target.value;\n                                                            setAddOns(addontemp);\n                                                        }} \n                                                    size=\"small\"\n                                                />\n                                            </FormControl>\n                                        )\n                                    })}\n                                    \n                                </div>\n                                <div className=\"removeAddOnContainer\">\n                                    {addOns.map((item,index) => {\n                                        return(\n                                            <FormControl margin='dense'>\n                                                <IconButton\n                                                    className=\"removeAddOnButton\"\n                                                    onClick={() => {\n                                                        // remove item from addOns\n                                                        const addontemp = [...addOns];\n                                                        addontemp.splice(index, 1);\n                                                        setAddOns(addontemp);\n                                                    }}\n                                                >\n                                                    <ClearIcon/>\n                                                </IconButton> \n                                            </FormControl>\n                                        )\n                                    })}\n                                   \n                                </div>\n                                \n                            </div>\n                            <div className=\"priceSizeContainer\">\n                                <div className=\"sizeContainer\">\n                                    <Button\n                                        className=\"addAddOnButton\"\n                                        onClick={() => {\n                                            const addontemp = [...addOns];\n                                            addontemp.push({name: \"\", price: \"\"});\n                                            setAddOns(addontemp);\n                                        }}\n                                    >\n                                        <AddCircleIcon className=\"menuAddButtonIcon\" />\n                                        Add Accommodation\n                                    </Button>\n                                </div>\n                                <div className=\"priceContainer\"> </div>\n                                <div className=\"removeAddOnContainer\"></div>\n                            </div>\n                            {/* Item Dietary Information */}\n                            <FormControl fullWidth className=\"formItem\" margin='dense' variant=\"outlined\">\n                                <p className=\"formLabelText\">Dietary Info</p>\n                                <FormGroup row>\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox \n                                                checked={vegan} \n                                                style ={{\n                                                    color: \"#747474\",\n                                                }}\n                                                onChange={(e) => setVegan(e.target.checked)} \n                                                name=\"vegan\" \n                                            />\n                                        }\n                                        label=\"Vegan\"\n                                    />\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox \n                                                checked={vegetarian} \n                                                style ={{\n                                                    color: \"#747474\",\n                                                }}\n                                                onChange={(e) => setVegetarian(e.target.checked)} \n                                                name=\"vegetarian\" \n                                            />\n                                        }\n                                        label=\"Vegetarian\"\n                                    />\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox \n                                                checked={glutenFree} \n                                                style ={{\n                                                    color: \"#747474\",\n                                                }}\n                                                onChange={(e) => setGlutenFree(e.target.checked)} \n                                                name=\"glutenFree\" \n                                            />\n                                        }\n                                        label=\"Gluten Free\"\n                                    />\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox \n                                                checked={containsDairy} \n                                                style ={{\n                                                    color: \"#747474\",\n                                                }}\n                                                onChange={(e) => setContainsDairy(e.target.checked)} \n                                                name=\"containsDairy\" \n                                            />\n                                        }\n                                        label=\"Contains Dairy\"\n                                    />\n                                </FormGroup>\n                            </FormControl>\n                            \n                            {/* Item Description */}\n                            <p className=\"formLabelText\">Description {requiredAsterix()}</p>\n                            <FormControl fullWidth className=\"formLongItem\" margin='dense'\n                                error={menuError && itemDescription === \"\"}\n                            >\n                                <OutlinedInput name=\"description\" id=\"description\" className=\"formLongInput\" \n                                    value={itemDescription}\n                                    multiline={true}\n                                    rows={3}\n                                    required\n                                    onChange={(e) => setItemDescription(e.target.value)}\n                                    size=\"small\"\n                                />\n                            </FormControl>\n                        </div>\n                        <div className=\"modalFooter\">\n                            <Button className=\"cancelButton\" onClick={() => setShowModal(\"\")}>\n                                Close\n                            </Button>\n                            <Button className=\"menuAddButton\" onClick={() => handleSubmit()}>\n                                Save\n                            </Button>\n                        </div>\n                    </form>\n                </div>\n            </Modal>\n        </>\n    );\n}\n","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/ChangeHeaderModal.js",["234","235"],"/**\n * Modal used to change the header image of the Menu page. The modal renders\n * whenever the \"Change Header\" button from AdminMenuItems.js is clicked. It\n * contains a simple form used to update the URL of the header image of the\n * Menu page.\n * \n * An error is thrown if and only if the \"Image Link\" field is empty.\n *\n * Note: the backend functionality for this modal, which stores the menu header\n * image URL in the database, throws an error in case of inserting a duplicate\n * URL or an invalid URL. This case is handled by the backend, and the frontend\n * displays an error message to let the user know.\n * \n * @summary     Modal used to change the header image of the Menu page.\n */\n\nimport React, { useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { Modal, FormControl, OutlinedInput, Snackbar, IconButton } from '@material-ui/core';\nimport '../css/ChangeHeaderModal.css';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport {getJWT, logout} from '../util/Auth';\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\n/**\n * Renders a red asterisk that indicates a required field.\n * \n * @returns {HTMLParagraphElement} - Red asterisk to indicate a required field\n */\nfunction requiredAsterisk(){\n    return (\n        <p className=\"requiredAsterisk\">*</p>\n    );\n}\n\n/**\n * Renders the modal used to change the URL of the Menu page's header image.\n * \n * @param {boolean} changeHeaderModal - show/hide modal\n * @param {function} setChangeHeaderModal - set changeHeaderModal\n * @param {function} setLoaded - sets AdminMenuItems.js loaded state\n * @param {string} headerImageUrl - current header image URL\n * @returns {HTMLElement} - A modal with implemented functionality\n */\nexport default function ChangeHeaderModal (props){\n    // inherit display functions as props\n    const showModal = props.changeHeaderModal;\n    const setShowModal = props.setChangeHeaderModal;\n    const setLoaded = props.setLoaded;\n\n    // error handling\n    const [menuError, setMenuError] = useState(false);\n    const [errorSnackbar, setErrorSnackbar] = useState({\n        display: false,\n        message: ''\n    });\n    const [failedAdminAuth, setFailedAdminAuth] = useState(false);\n\n    // form's states\n    const [headerImageURL, setHeaderImageURL] = useState(props.headerImageURL);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        // validate input\n        if (headerImageURL === \"\")\n        {\n            setMenuError(true);\n            setErrorSnackbar({display: true, message: \"URL cannot be empty\"});\n            return;\n        }\n        // create the object to oush to the database\n        const imageURLObject = {\n            \"imageUrl\": headerImageURL,\n            \"token\": getJWT()\n        }\n        // push to database\n        await fetch(`${BACKEND_URL}menuImages/changeMenuImage`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify(imageURLObject)\n        }).then(res => {\n            // success\n            if(res.ok){\n                alert(\"The header image was changed!\");\n                // refetch\n                setLoaded(false);\n                setShowModal(false);\n            } \n            // invalid admin token\n            else if(res.status === 401){\n                logout();\n                // refresh will cause a redirect to login page\n                window.location.reload();\n                return;\n            }\n            // system error on backend \n            else if (res.status === 500){\n                setMenuError(true);\n                setErrorSnackbar({display: true, message: \"A system error has occurred - try again later\"});\n                return;\n            }\n            // failure\n            else{\n                setMenuError(true);\n                setErrorSnackbar({display: true, message: \"URL is either already in use or invalid\"});\n                return;\n            }\n        })\n\n    }\n        return(\n            <>\n                {/* Failure Snackbar */}\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                    open={errorSnackbar.display}\n                    autoHideDuration={5000}\n                    onClose={() => setErrorSnackbar({...errorSnackbar, display: false})}\n                    message={<span id=\"message-id\">{errorSnackbar.message}</span>}\n                />\n                {/* Change header image Modal */}\n                <Modal open={showModal} onClose={() => setShowModal(false)} \n                    className=\"modalContainer\" style={{display:'flex',alignItems:'center',justifyContent:'center'}}\n                >\n                    <div className=\"modalBackground\">\n                        <div className=\"modalHeader\">\n                            {/* Modal close button */}\n                            <IconButton className=\"closeModalButton\" \n                                onClick={() => setShowModal(false)}\n                            >\n                                <ClearIcon/>\n                            </IconButton>\n                        </div>\n                        <form autocomplete=\"off\" onSubmit={(e) => handleSubmit(e)}>\n                            <div className=\"modalBody\">\n                                {/* Header image URL */}\n                                <p className=\"formLabelText\">Image Link {requiredAsterisk()}</p>\n                                <FormControl fullWidth error={menuError && headerImageURL === \"\"} className=\"formItem\" margin='dense'>\n                                    <OutlinedInput name=\"imageUrl\" id=\"imageUrl\" className=\"formTextInput\"\n                                        value={headerImageURL}\n                                        onChange={(e) => setHeaderImageURL(e.target.value)}\n                                        size=\"small\"\n                                    />\n                                </FormControl>\n                            </div>\n                            <div className=\"modalFooter\">\n                                {/* Change header button */}\n                                <Button className=\"changeHeaderButton\" type=\"submit\">\n                                    Change Header\n                                </Button>\n                            </div>\n                        </form>\n                    </div>\n                </Modal>\n            </>\n        );\n}","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/AddMenuItemModal.js",["236","237"],"/**\n  * This file contains the modal for adding an item into the menu. It's split\n  * into sections for each of the form items, including name, image url, category,\n  * prices, accommodations, and description. It uses MaterialUI's form control\n  * to create the form. \n  * The required fields are name, image url, category, description, and price.\n  * Price is considered to be filled out if one of the prices is complete (so\n  * one of the prices can be empty).\n  * Also, a given accommodations is considered to be filled out if it has\n  * 0 or 2 fields completed. If 0, it is removed, if 1, it is considered incomplete.\n  * Errors are thrown under the following cases:\n  *     1. one of the required fields is empty\n  *     2. one of the accommodations fields has one of the fields filled out\n  *     3. none of the prices are filled out\n  * A new accommodation field can be added if both fields of the previous one\n  * has values, if not it will not be added.\n  * Disclaimer: This file seems really long (it is), but it isn't very hard to\n  * understand. A lot of the bulk comes from Material UI's form control handling\n  * and general HTML property tags.\n  *\n  * @summary    Renders modal for adding an item to the menu\n  * @author     PatrickBrown1\n  */\n\nimport React, { useState, useReducer } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { Modal, FormControl, Checkbox, FormControlLabel, FormGroup, OutlinedInput, Select, MenuItem, InputAdornment, FormHelperText, Snackbar, IconButton } from '@material-ui/core';\nimport '../css/AddMenuItemModal.css';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport {getJWT, logout} from '../util/Auth';\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\n\n\n// renders a red asterix that indicates a required field\nfunction requiredAsterix(){\n    return (\n        <p className=\"requiredAsterix\">*</p>\n    );\n}\n\nexport default function AddMenuItemModal (props) {\n    const showModal = props.addItemModal;\n    const setShowModal = props.setAddItemModal;\n    const setLoaded = props.setLoaded;\n\n    // form states\n    const [itemName, setItemName] = useState(\"\")\n    const [itemCategory, setItemCategory] = useState(\"\")\n    const [individualItemPrice, setIndividualItemPrice] = useState(\"\")\n    const [familyItemPrice, setFamilyItemPrice] = useState(\"\")\n    const [itemImageURL, setItemImageURL] = useState(\"\")\n    const [itemDescription, setItemDescription] = useState(\"\")\n    /*  addOns is an array of objects \n    [\n        {\n            name: \"\",\n            price: \"\"\n        }\n    ]\n    */\n    const [addOns, setAddOns] = useState([]);\n    // dietary info\n    const [vegan, setVegan] = useState(false);\n    const [vegetarian, setVegetarian] = useState(false);\n    const [glutenFree, setGlutenFree] = useState(false);\n    const [containsDairy, setContainsDairy] = useState(false);\n\n    const [menuError, setMenuError] = useState(false);\n    const [errorSnackbar, setErrorSnackbar] = useReducer(\n        (state, newState) => ({...state, ...newState}),\n        {visible: false, message: \"\"}\n    )  \n    \n    /**\n     * Handles form submit for adding an item. This includes form validation,\n     * error handling, and making a call to the /item/insert route.\n     */\n    const handleSubmit = async () => {\n        // validate basic input\n        if(itemName === \"\" || \n            itemCategory === \"\" || \n            (individualItemPrice === \"\" && familyItemPrice === \"\") || \n            itemImageURL === \"\" || itemDescription === \"\"\n        ){\n            console.log(\"fail basic\");\n            setMenuError(true);\n            setErrorSnackbar({visible: true, message: \"There was an error in the form\"});\n            return;\n        }\n        // validate addons\n        let failAddOn = false;\n        addOns.forEach(item => {\n            if((item.price === \"\" && item.name !== \"\") || (item.price !== \"\" && item.name === \"\")){\n                // error\n                console.log(\"fail add on\");\n                failAddOn = true;\n                setMenuError(true);\n                setErrorSnackbar({visible: true, message: \"One or more addons weren't properly filled in\"});\n                return;\n            }\n            else if(item.name !== \"\" && parseFloat(item.price) < 0){\n                //negative number\n                console.log(\"add on price was negative\");\n                failAddOn = true;\n                setMenuError(true);\n                setErrorSnackbar({visible: true, message: \"Negative prices are not allowed in the menu\"});\n                return;\n            }\n        })\n        if(failAddOn){\n            setMenuError(true);\n            setErrorSnackbar({visible: true, message: \"One or more addons weren't properly filled in\"});\n            return;\n        }\n\n        // format data into item object\n        let pricesObj = {};\n        if(individualItemPrice !== \"\"){\n            pricesObj.Individual = individualItemPrice;\n        }\n        if(familyItemPrice !== \"\"){\n            pricesObj.Family = familyItemPrice;\n        }\n        let accommodations = [];\n        addOns.forEach(addon => {\n            if(addon.name !== \"\" && addon.price !== \"\"){\n                accommodations.push({\"Description\": addon.name, \"Price\": addon.price});\n            }\n        })\n        const dietaryInfo = {\n            \"vegan\": vegan,\n            \"vegetarian\": vegetarian,\n            \"glutenFree\": glutenFree,\n            \"containsDairy\": containsDairy,\n        };\n        const itemObject = {\n            \"Name\": itemName,\n            \"pictureURL\": itemImageURL,\n            \"Description\": itemDescription,\n            \"Category\": itemCategory,\n            \"Prices\": pricesObj,\n            \"isFeatured\": false,\n            \"isCompleted\": false,\n            \"Accommodations\": accommodations,\n            \"dietaryInfo\": dietaryInfo,\n            \"token\": getJWT()\n        }\n        // push to database\n        await fetch(`${BACKEND_URL}item/insert`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify(itemObject)\n        }).then(res => {\n            if(res.ok){\n                props.setItemAddedSuccess(true);\n                //refetch\n                setLoaded(false);\n                setShowModal(false);\n            }\n            // invalid admin token\n            else if (res.status === 401){\n                logout();\n                // refresh will cause a redirect to login page\n                window.location.reload();\n                return;\n            }\n            else{\n                alert(\"There was an error. Recheck your inputs and try again\");\n            }\n        })\n        \n    }\n    return (\n        <>\n            {/* Failure Snackbar */}\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                open={errorSnackbar.visible}\n                autoHideDuration={5000}\n                onClose={() => setErrorSnackbar({visible: false, message: \"\"})}\n                message={<span id=\"message-id\">{errorSnackbar.message}</span>}\n            />\n\n            <Modal open={showModal} onClose={() => setShowModal(false)} \n                className=\"modalContainer\"\n            >\n                <div className=\"modalBackground\">\n                    {/* <div className=\"modalHeader\">\n                        <Button onClick={() =>setShowModal(false)}>X</Button>\n                    </div> */}\n                    <div className=\"headerContainer\">\n                        <IconButton\n                            className=\"closeModalButton\"\n                            onClick={() => setShowModal(\"\")}\n                        >\n                            <ClearIcon/>\n                        </IconButton>\n                    </div>\n                    <form autocomplete=\"off\">\n                        <div className=\"modalBody\">\n                            {/* Item Name */}\n                            <p className=\"formLabelText\">Name {requiredAsterix()}</p>\n                            <FormControl fullWidth error={menuError && itemName === \"\"} className=\"formItem\" margin='dense'>\n                                <OutlinedInput name=\"name\" id=\"name\" className=\"formTextInput\"\n                                    required \n                                    value={itemName}\n                                    onChange={(e) => setItemName(e.target.value)}\n                                    size=\"small\"\n                                />\n                            </FormControl>\n                            {/* Item Image URL */}\n                            <p className=\"formLabelText\">Image Link {requiredAsterix()}</p>\n                            <FormControl fullWidth error={menuError && itemImageURL === \"\"} className=\"formItem\" margin='dense'>\n                                <OutlinedInput name=\"imageURL\" id=\"imageURL\" className=\"formTextInput\"\n                                    required \n                                    value={itemImageURL}\n                                    onChange={(e) => setItemImageURL(e.target.value)}\n                                    size=\"small\"\n                                />\n                            </FormControl>\n\n                            {/* Item Category */}\n                            <p className=\"formLabelText\">Category Name {requiredAsterix()}</p>\n                            <FormControl fullWidth error={menuError && itemCategory === \"\"} className=\"formItem\" margin='dense' variant=\"outlined\">\n                                <Select name=\"category\" type=\"text\" id=\"category\" className=\"formSelectInput\" required \n                                    placeholder=\"\"\n                                    value={itemCategory}\n                                    onChange={(e) => setItemCategory(e.target.value)}\n                                    size=\"small\"\n                                    displayEmpty\n                                >\n                                    <MenuItem value=\"Appetizers\">Appetizers</MenuItem>\n                                    <MenuItem value=\"Main Dishes\">Main Dishes</MenuItem>\n                                    <MenuItem value=\"Sides\">Sides</MenuItem>\n                                    <MenuItem value=\"Drinks\">Drinks</MenuItem>\n                                </Select>\n                            </FormControl>\n                            {/* Item Sizing and Price*/}\n                            <div className=\"priceSizeContainer\">\n                                <div className=\"sizeContainer\">\n                                    <p className=\"formLabelText\">Size</p>\n                                    <FormControl margin='dense'>\n                                        <OutlinedInput name=\"name\" id=\"individuallabel\" className=\"formTextInput\"\n                                            required \n                                            value={\"Individual\"}\n                                            size=\"small\"\n                                            disabled\n                                        />\n                                    </FormControl>\n                                    <FormControl margin='dense'>\n                                        <OutlinedInput name=\"name\" id=\"familylabel\" className=\"formTextInput\"\n                                            required \n                                            value={\"Family\"}\n                                            size=\"small\"\n                                            disabled\n                                        />\n                                    </FormControl>\n                                </div>\n                                <div className=\"priceContainer\">\n                                    <p className=\"formLabelText\">Price</p>\n                                    <FormControl error={menuError && ((individualItemPrice === \"\" && familyItemPrice === \"\") || (parseInt(individualItemPrice) < 0))} margin='dense' variant=\"outlined\">\n                                        <OutlinedInput name=\"name\" id=\"individualprice\" className=\"formTextInput\"\n                                            type=\"number\"\n                                            value={individualItemPrice}\n                                            startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n                                            onChange={(e) => {if(e.target.value >= 0) {setIndividualItemPrice(e.target.value)}}}\n                                            size=\"small\"\n                                        /> \n                                    </FormControl>\n                                    <FormControl error={menuError && ((individualItemPrice === \"\" && familyItemPrice === \"\") || (parseInt(individualItemPrice) < 0))} margin='dense' variant=\"outlined\">\n                                        <OutlinedInput name=\"name\" id=\"familyprice\" className=\"formTextInput\"\n                                            type=\"number\"\n                                            value={familyItemPrice}\n                                            startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n                                            onChange={(e) => {if(e.target.value >= 0) {setFamilyItemPrice(e.target.value)}}}\n                                            size=\"small\"\n                                        /> \n                                    </FormControl>\n                                </div>\n                            </div>\n                            <div className=\"priceSizeContainer\">\n                                <FormHelperText style={{\"margin\": \"0px 40px 20px 0px\"}}>{requiredAsterix()} At least one size must be given a price. If you do not want a particular size available for the item, please leave its price field blank.</FormHelperText>\n                            </div>\n                            {/* Item Addons */}\n                            <p className=\"formLabelText\" style={{\"marginTop\": \"20px\", \"marginBottom\": \"-10px\"}}>Accommodations</p>\n                            <div className=\"priceSizeContainer\">\n                                <div className=\"sizeContainer\">\n                                    <p className=\"formSubHeading\">Description</p>\n                                    {addOns.map((item,index) => {\n                                        \n                                        return(\n                                            <FormControl margin='dense'\n                                                error = \n                                                {   menuError && \n                                                    ((item.name === \"\" && item.price !== \"\") || \n                                                    (item.name !== \"\" && item.price === \"\"))\n                                                }\n                                            >\n                                                <OutlinedInput id={item.name + \"nameinput\"} name={item.name + \"nameinput\"} className=\"formTextInput\"\n                                                    required \n                                                    value={item.name}\n                                                    onChange={e => {\n                                                            let addontemp = [...addOns];\n                                                            addontemp[index].name = e.target.value;\n                                                            setAddOns(addontemp);\n                                                        }} \n                                                    size=\"small\"\n                                                />\n                                            </FormControl>\n                                        );\n                                    })}\n                                </div>\n                                \n                                <div className=\"priceContainer\">\n                                    <p className=\"formSubHeading\">Price</p>\n                                    {addOns.map((item,index) => {\n                                        return(\n                                            <FormControl margin='dense'\n                                                error = \n                                                {   menuError && \n                                                    ((item.name === \"\" && item.price !== \"\") || \n                                                    (item.name !== \"\" && item.price === \"\")) ||\n                                                    (parseInt(item.price) < 0)\n                                                }\n                                            >\n                                                <OutlinedInput id={item.name + \"priceinput\"} name={item.name + \"priceinput\"} className=\"formTextInput\"\n                                                    required \n                                                    type=\"number\"\n                                                    value={item.price}\n                                                    startAdornment={<InputAdornment position=\"start\">+$</InputAdornment>}\n                                                    onChange={e => {\n                                                            const addontemp = [...addOns];\n                                                            addontemp[index].price = e.target.value;\n                                                            setAddOns(addontemp);\n                                                        }} \n                                                    size=\"small\"\n                                                />\n                                            </FormControl>\n                                        )\n                                    })}\n                                    \n                                </div>\n                                <div className=\"removeAddOnContainer\">\n                                    {addOns.map((item,index) => {\n                                        return(\n                                            <FormControl margin='dense'>\n                                                <IconButton\n                                                    className=\"removeAddOnButton\"\n                                                    onClick={() => {\n                                                        // remove item from addOns\n                                                        const addontemp = [...addOns];\n                                                        addontemp.splice(index, 1);\n                                                        setAddOns(addontemp);\n                                                    }}\n                                                >\n                                                    <ClearIcon/>\n                                                </IconButton> \n                                            </FormControl>\n                                        )\n                                    })}\n                                   \n                                </div>\n                                \n                            </div>\n                            <div className=\"priceSizeContainer\">\n                                <div className=\"sizeContainer\">\n                                    <Button\n                                        className=\"addAddOnButton\"\n                                        onClick={() => {\n                                            const addontemp = [...addOns];\n                                            addontemp.push({name: \"\", price: \"\"});\n                                            setAddOns(addontemp);\n                                        }}\n                                    >\n                                        <AddCircleIcon className=\"menuAddButtonIcon\" />\n                                        Add Accommodation\n                                    </Button>\n                                </div>\n                                <div className=\"priceContainer\"> </div>\n                                <div className=\"removeAddOnContainer\"></div>\n                            </div>\n                            \n                            {/* Item Dietary Information */}\n                            <FormControl fullWidth className=\"formItem\" margin='dense' variant=\"outlined\">\n                                <p className=\"formLabelText\">Dietary Info</p>\n                                <FormGroup row>\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox \n                                                checked={vegan} \n                                                style ={{\n                                                    color: \"#747474\",\n                                                }}\n                                                onChange={(e) => setVegan(e.target.checked)} \n                                                name=\"vegan\" \n                                            />\n                                        }\n                                        label=\"Vegan\"\n                                    />\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox \n                                                checked={vegetarian} \n                                                style ={{\n                                                    color: \"#747474\",\n                                                }}\n                                                onChange={(e) => setVegetarian(e.target.checked)} \n                                                name=\"vegetarian\" \n                                            />\n                                        }\n                                        label=\"Vegetarian\"\n                                    />\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox \n                                                checked={glutenFree} \n                                                style ={{\n                                                    color: \"#747474\",\n                                                }}\n                                                onChange={(e) => setGlutenFree(e.target.checked)} \n                                                name=\"glutenFree\" \n                                            />\n                                        }\n                                        label=\"Gluten Free\"\n                                    />\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox \n                                                checked={containsDairy} \n                                                style ={{\n                                                    color: \"#747474\",\n                                                }}\n                                                onChange={(e) => setContainsDairy(e.target.checked)} \n                                                name=\"containsDairy\" \n                                            />\n                                        }\n                                        label=\"Contains Dairy\"\n                                    />\n                                </FormGroup>\n                            </FormControl>\n                            \n                            {/* Item Description */}\n                            <p className=\"formLabelText\">Description {requiredAsterix()}</p>\n                            <FormControl fullWidth className=\"formLongItem\" margin='dense' error={menuError && itemDescription === \"\"}>\n                                <OutlinedInput name=\"description\" id=\"description\" className=\"formLongInput\" \n                                    value={itemDescription}\n                                    multiline={true}\n                                    rows={3}\n                                    required\n                                    onChange={(e) => setItemDescription(e.target.value)}\n                                    size=\"small\"\n                                />\n                            </FormControl>\n                        </div>\n                        <div className=\"modalFooter\">\n                            <Button className=\"cancelButton\" onClick={() => setShowModal(false)}>\n                                Close\n                            </Button>\n                            <Button className=\"menuAddButton\" onClick={() => handleSubmit()}>\n                                <AddCircleIcon className=\"menuAddButtonIcon\" />\n                                Add Item\n                            </Button>\n                        </div>\n                    </form>\n                </div>\n            </Modal>\n        </>\n    );\n}\n","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuFilter.js",["238","239"],"/**\n * Component that groups all filter buttons together. Responsible for sending \n * the relevant props to individual buttons.\n * \n * @summary   Component that groups all filter buttons.\n * @author    Navid Boloorian\n */\n\nimport React, { Component} from 'react';\nimport MenuFilterButton from './MenuFilterButton';\nimport \"../css/MenuFilter.css\";\nconst config = require('../config');\n\nconst MenuFilter = ( {foodCategories, changeVisibleCategories, toggledFilter, setToggledFilter} ) => {\n    return (\n      <div className=\"menu-filter\">\n        {foodCategories.map((categoryName, key) => (\n          // generates filter buttons based on categories\n          <MenuFilterButton toggledFilter={toggledFilter} setToggledFilter={setToggledFilter} categoryName={categoryName} key={key} changeVisibleCategories={changeVisibleCategories()} />\n        ))}\n      </div>\n    )\n  }\n  \n  export default MenuFilter;","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuItems.js",["240"],"/**\n * Groups MenuItemCategory components for formatting purposes. Renders \n * categories based off of what is being displayed with filters/states. \n * Simplifies passing of props as it centralizes the components.\n * \n * @summary   Grouping of MenuItemCategory components.\n * @author    Navid Boloorian\n */\n\nimport React from 'react';\nimport MenuItemCategory from './MenuItemCategory';\nimport '../css/MenuItems.css';\n\nconst MenuItems = ({ foodCategories, processForm, popupVisible, popupValues, togglePopup }) => {\n\n  return (\n\n      <div className=\"menu-items\">\n        {/** generates categories in the menu */}\n        {foodCategories.map((categoryName, key) => {\n          return <MenuItemCategory key={key} categoryName={categoryName} key={key} processForm={processForm} popupVisible={popupVisible} popupValues={popupValues} togglePopup={togglePopup}/>\n        })}\n      </div>\n\n  )\n}\n  \n  export default MenuItems;","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/ChangeSecondaryEmailScreen.js",["241","242","243"],"/**\n * This file renders the information related to the secondary emails.\n * It displays all the current secondary emails that that admin \n * user has authorized.\n * It makes two calls to the backend:\n * \n *  1) POST call to add secondary email\n *  2) DELETE call to remove a secondary email\n * \n * @summary     Handles functionality of secondary emails on Admin page.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport TextField from '@material-ui/core/TextField';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusCircle, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {getJWT, logout} from '../util/Auth';\n\nimport '../css/ChangeEmailScreen.css';\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\n// styling for the MUI form\nconst useStyles = makeStyles((theme) => ({\n    span: {\n      \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n        borderColor: \"black\"\n      },\n      \"& .MuiInputLabel-outlined.Mui-focused\": {\n        color: \"black\"\n      }\n    }\n}));\n\n/**\n * Renders the node containing the email addresses.\n * \n * @param {string} email - Secondary email\n * @param {array} secondaryEmails - List of all current secondary emails\n * @param {function} setSecondaryEmails - Function to update secondary emails list\n * @param {function} updateSecondaryEmails - Parent function to update parent state \n * @returns {component} - Renders the node with email\n */\nconst renderNode = (email, secondaryEmails, setSecondaryEmails, updateSecondaryEmails) => {\n    // delete the email from the database\n    const deleteItem = () => {\n        fetch(`${BACKEND_URL}email/removeSecondary`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                email: email,\n                \"token\": getJWT()\n            })\n        })\n        .then(res => {\n            if(res.ok) {\n                // update the array in the current class\n                // and in the parent class\n                const arr = secondaryEmails.filter(a => a !== email);\n                setSecondaryEmails(arr);\n                updateSecondaryEmails(arr);\n            }\n            // invalid admin token\n            else if(res.status === 401){\n                logout();\n                // refresh will cause a redirect to login page\n                window.location.reload();\n                return;\n            }\n        })  \n    }\n    \n    return (\n        <div>\n            <p className=\"secondary-email-name\">{email}</p>\n            <FontAwesomeIcon icon={faTrash} className=\"trash-icon\" \n                onClick={(e) => deleteItem()}\n            />\n        </div>\n    )\n}\n\n// styling used for the plus icon\nconst plusIcon = {\n    color: 'white',\n    marginRight: 'calc(0.5vw)'\n}\n\nexport default function ChangeSecondaryEmailScreen (props) {\n    const classes = useStyles();\n    const updateSecondaryEmails = props.updateSecondaryEmails;\n    const [secondaryEmails, setSecondaryEmails] = useState([]);\n    const [primaryEmail, setPrimaryEmail] = useState(\"\");\n    const [addSecondaryEmail, setAddSecondaryEmail] = useState(\"\");\n    const [inputError, setInputError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    // allows user to press 'enter' to submit\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            addEmail(addSecondaryEmail);    \n        }\n    }\n\n    // loads all emails from the parent class\n    useEffect(() => {\n        setSecondaryEmails(props.emails);\n        setPrimaryEmail(props.primaryEmail);\n    }, [props])\n\n    /**\n     * Adds the email to the database.\n     * \n     * @param {string} addSecondaryEmail - Email to add\n     */\n    const addEmail = (addSecondaryEmail) => {\n        // make sure email is not a primary email \n        if(addSecondaryEmail === primaryEmail) {\n            setErrorMessage(\"This is currently your primary email.\"); \n            setInputError(true);\n            return;\n        }\n\n        // make sure the email follows proper format\n        if (addSecondaryEmail && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(addSecondaryEmail) || addSecondaryEmail.length === 0) {\n            setErrorMessage(\"Enter a valid email address.\");\n            setInputError(true);\n            return;\n        }\n\n        fetch(`${BACKEND_URL}email/addSecondary`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                email: addSecondaryEmail,\n                \"token\": getJWT()\n            })\n        })\n        .then(res => {\n            if(res.ok) {\n                // update the parent's array and the child's array\n                const getNewEmail = addSecondaryEmail;\n                const arr = secondaryEmails.concat(getNewEmail)\n                setSecondaryEmails(arr);\n                updateSecondaryEmails(arr);\n                // clear the textfield\n                setAddSecondaryEmail(\"\");\n                // clear any error handling\n                setInputError(false);\n                setErrorMessage(\"\");\n            }\n            // invalid admin token\n            else if(res.status === 401){\n                logout();\n                // refresh will cause a redirect to login page\n                window.location.reload();\n                return;\n            } else {\n                // error handling\n                setErrorMessage(\"This email is already listed as a secondary email.\"); \n                setInputError(true);\n            }\n        })\n    }\n\n    return (\n        <div className=\"secondary-emails-container\"> \n            <h1 className=\"emailHeading\">Change Secondary Email</h1>\n            <p className=\"emailDescription\">Order confirmations will be sent to this email.</p>\n            \n            <div className=\"secondary-emails\">\n                {secondaryEmails.map((secondary, ind) => (\n                    renderNode(secondary, secondaryEmails, setSecondaryEmails, updateSecondaryEmails)\n                ))}\n            </div>\n            \n            {/* The textfield */}\n            <div className=\"add-secondary-email\">\n                <span className={classes.span}>\n                    <TextField id=\"email-input\" \n                        size=\"small\"\n                        error={inputError} \n                        value={addSecondaryEmail} \n                        type=\"email\" \n                        onChange={(e) => setAddSecondaryEmail(e.target.value)} \n                        onKeyDown={(e) => handleKeyDown(e)}\n                        label=\"Add Secondary Email\" \n                        variant=\"outlined\"\n                        helperText={errorMessage}\n                        id=\"secondaryEmail\"\n                    />\n                </span>\n\n                <Button id=\"submit\" className=\"emailAddButton\" \n                    onClick={(e) => addEmail(addSecondaryEmail)}\n                >   \n                    {/* The \"add\" icon */}\n                    <FontAwesomeIcon icon={faPlusCircle} style={plusIcon} />\n                        Add\n                </Button>\n            </div>\n        </div>\n    )\n}\n","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/ChangeEmailScreen.js",["244"],"/**\n * This renders the \"change primary email\" portion of\n * the \"emails\" tab under the \"Admin\" page.\n * \n * @summary     Handles changing primary email functionality.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport TextField from '@material-ui/core/TextField';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {getJWT, logout} from '../util/Auth';\n\nimport '../css/ChangeEmailScreen.css';\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\nconst useStyles = makeStyles((theme) => ({\n    span: {\n      \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n        borderColor: \"black\"\n      },\n      \"& .MuiInputLabel-outlined.Mui-focused\": {\n        color: \"black\"\n      }\n    }\n}));\n\nexport default function ChangeEmailScreen (props) {\n    const classes = useStyles();\n    const [inputEmail, setPrimaryEmail] = useState(\"\");\n    const [secondaryEmails, setSecondaryEmails] = useState([]);\n    const [primaryEmail, updateStatePrimaryEmail] = useState(\"\")\n    const [inputError, setInputError] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    // catch enter rerendeing entire admin page\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            handleFormSubmit(inputEmail, setInputError, setOpen)\n        }\n    }\n\n    useEffect(() => {\n        setSecondaryEmails(props.emails);\n        updateStatePrimaryEmail(props.primaryEmail);\n    }, [props])\n\n    /**\n     * Updates the primary email in the database.\n     * \n     * @param {string} email - Primary email to update\n     * @param {function} setInputError - Error handling \n     * @param {function} setOpen - Snackbox rendering \n     */\n    async function handleFormSubmit(email, setInputError, setOpen) {\n        // make sure it is not a secondary email\n        if(secondaryEmails.includes(email)) {\n            setInputError(true);\n            setErrorMessage(\"This email is already listed as a secondary email.\");  \n            return;\n        }\n\n        // check for empty string\n        if(email.length === 0) {\n            setInputError(true);\n            setErrorMessage(\"Enter a valid email address.\");    \n            return;\n        }\n        \n        // validate to make sure email is an email\n        if (email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\n            setInputError(true);\n            setErrorMessage(\"Enter a valid email address.\");\n            return;\n        }\n\n        // change the primary email backend call\n        await fetch(`${BACKEND_URL}email/changePrimary`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                email: email,\n                \"token\": getJWT()\n            })\n        }).then(res => {\n            if(res.ok){\n                setInputError(false);\n                setOpen(true);\n                setPrimaryEmail(\"\");\n                setErrorMessage(\"\");\n                props.updatePrimaryEmail(email);\n            }\n            // invalid admin token\n            else if(res.status === 401){\n                logout();\n                // refresh will cause a redirect to login page\n                window.location.reload();\n                return;\n            }\n            else {\n                setErrorMessage(\"This is currently your primary email.\");  \n                setInputError(true);\n            }\n        })\n    }\n\n    return (\n        <div> \n            <br />\n            <h1 className=\"emailHeading\">Change Primary Email</h1>\n            <p className=\"emailDescription\">Order confirmations and customer inquiries will be sent to this email.</p>\n\n            <span>\n                <TextField id=\"primary-email-disabled\" \n                    size=\"small\"\n                    value={primaryEmail} \n                    type=\"email\" \n                    variant=\"outlined\"\n                    disabled={true}\n                />\n            </span>\n\n            <br />\n            <br />\n                <span className={classes.span}>\n                    <TextField id=\"email-input\" \n                        size=\"small\"\n                        error={inputError} \n                        value={inputEmail} \n                        type=\"email\" \n                        id=\"emailUpdateInput\" \n                        onChange={(e) => setPrimaryEmail(e.target.value)} \n                        onKeyDown={(e) => handleKeyDown(e)}\n                        label=\"Primary Email\" \n                        variant=\"outlined\"\n                        helperText={errorMessage}\n                        className={classes.form}\n                    />\n                </span>\n            <br />\n            <br />\n\n            <Button id=\"submit\" \n                className=\"emailUpdateButton\" \n                onClick={() => handleFormSubmit(inputEmail, setInputError, setOpen)}\n            >\n                Update\n            </Button>\n\n            <Snackbar open={open} autoHideDuration={4000} onClose={(e) => setOpen(false)}\n                message=\"Email updated successfully!\">\n            </Snackbar>\n        </div>\n    )\n}\n","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/OrdersTableColumns.js",["245","246"],"/**\n * Contains the details about each column in the Orders Table.\n * \n * Each Column has specific props it requires. For example, \n * \n * The Pickup Details, Order Status, and Submission Details \n * Require their own custom filtering, so they take in props\n * That allow for custom filtering. \n * \n * Order Status contains props for a custom body inside the table\n * Cell. \n * \n * @summary Column details for orders table.\n */\n\n// import helper functions from utils\nimport {\n    renderStatus,\n    DisplayDateFilters,\n    DisplayStatusFilters,\n    updateDateFilters,\n    renderDateFilters    \n} from '../util/OrdersTableFunctions';\n\n// the column headers for the table\nconst columns = [\n    {\n      name: \"Pick up Details\",\n      options: {\n        filter: true,\n        filterType: 'custom',\n        customFilterListOptions: {\n          render: renderDateFilters,\n          update: updateDateFilters\n        },\n        filterOptions: {\n          names: [],\n          logic(date, filters) {\n            const getDate = date.split(\"\\n\")[0];\n            if (filters[0] && filters[1]) {\n              return getDate < filters[0] || getDate > filters[1];\n            } else if (filters[0]) {\n              return getDate < filters[0];\n            } else if (filters[1]) {\n              return getDate > filters[1];\n            }\n            return false;\n          },\n          display: DisplayDateFilters\n        }\n      }  \n    },\n    {\n      name: \"Name\",\n      options: {\n        filter: true,\n        filterType: 'textField'\n      }  \n    },\n    {\n      name: \"Email\",\n      options: {\n        filter: true,\n        filterType: 'textField'\n      }    \n    },\n    {\n      name: \"Phone Number\",\n      options: {\n        filter: true,\n        filterType: 'textField'\n      }  \n    },\n    {\n      name: \"Amount Paid\",\n      options: {\n        filter: false\n      }  \n    },\n    {\n      name: \"Order Description\",\n      options: {\n        display: false, \n        viewColumns: false, \n        filter: false\n      }\n    },\n    {\n      name: \"Submission Details\",\n      options: {\n        filter: true,\n        filterType: 'custom',\n        customFilterListOptions: {\n          render: renderDateFilters,\n          update: updateDateFilters\n        },\n        filterOptions: {\n          names: [],\n          logic(date, filters) {\n            const getDate = date.split(\"\\n\")[0];\n            if (filters[0] && filters[1]) {\n              return getDate < filters[0] || getDate > filters[1];\n            } else if (filters[0]) {\n              return getDate < filters[0];\n            } else if (filters[1]) {\n              return getDate > filters[1];\n            }\n            return false;\n          },\n          display: DisplayDateFilters\n        }\n      }  \n    },\n    {\n      name: \"Order Status\",\n      options: {\n        filter: true,\n        filterType: 'custom',\n        customBodyRender: renderStatus,\n        customFilterListOptions: {\n          render: (options) => {\n            if(options[0] === \"All Orders\") return [];\n            return options;\n          },\n        },\n        filterOptions: {\n          names: [\"Pending Orders\", \"Completed Orders\"],\n          logic(order, filters) {\n            if (filters[0] == \"Completed Orders\") {\n              return order === \"Pending Orders\";\n            } else if (filters[0] == \"Pending Orders\") {\n              return order === \"Completed Orders\";\n            }\n  \n            return false;\n          },\n          display: DisplayStatusFilters\n        }\n      }\n    },\n    {\n      name: \"Row ID\",\n      options: {\n        display: false, \n        viewColumns: false, \n        filter: false\n      }\n    }\n];\n\nexport { columns } ;","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuItemCategory.js",["247","248"],"/**\r\n * Individual buttons that handle toggle the display of sections onclick. \r\n * Toggling is based on props so that they dynamically change.\r\n * \r\n * @summary   Individual buttons that toggle the display of sections.\r\n * @author    Navid Boloorian\r\n */\r\n\r\nimport React, { useState, useEffect} from 'react';\r\nimport '../css/MenuItemCategory.css';\r\nimport MenuItem from './MenuItem';\r\nimport MenuItemPopup from './MenuItemPopup';\r\n\r\nconst config = require('../config');\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\nconst MenuItemCategory = ({ categoryName, processForm, popupVisible, popupValues, togglePopup }) => {\r\n  // array that stores menu items for the current category\r\n  const [menuItems, setMenuItems] = useState(new Array());\r\n  const menuItemValues = [];\r\n\r\n  /**\r\n   * useEffect() is called to get information from database\r\n   */\r\n  useEffect(() => {\r\n    fetch(`${BACKEND_URL}item/`)\r\n    .then(async result => {\r\n      if (result.ok) {\r\n        const json = await result.json();\r\n\r\n        for(var i = 0; i < json.items.length; i++) {\r\n          // since \"featured\" isn't a category, we need to handle it differently\r\n          let isCategoryEqual = json.items[i].Category === categoryName;\r\n          let isFeatured = (categoryName === \"Featured\") && (json.items[i].isFeatured);\r\n\r\n          // is stored only if the category name is the same as json's category\r\n          if((json.items !== undefined) && (isCategoryEqual || isFeatured)) {\r\n            menuItemValues.push(json.items[i]);\r\n          }\r\n        }\r\n        setMenuItems(menuItemValues);\r\n      }\r\n      else {\r\n        console.log(\"error\");\r\n      }\r\n    })\r\n\r\n  /**\r\n   * sets dependency on categoryName, meaning that whenever categoryName \r\n   * changes, useEffect is called again. This is necessary so that when filters * are clicked data is actually reloaded\r\n   */\r\n  }, [categoryName]);\r\n  \r\n  return (\r\n      <>\r\n        {/** popup is created here, if it is visible it is rendered */}\r\n        {popupVisible ? <MenuItemPopup values={popupValues} togglePopup={togglePopup} processForm={processForm} /> : null}\r\n        <div className=\"menu-item-category\">\r\n          <h2> {categoryName} </h2>\r\n          <div className=\"menu-item-category-grid\">\r\n            {/** generate menu items based off of array */}\r\n            {menuItems.map((menuItem, key) => {\r\n              let title = menuItem.Name;\r\n              let image = menuItem.pictureURL;\r\n              let description = menuItem.Description;\r\n              // since some items will only have a family pricing option, we use individual as the default; if individual doesnt exist, use family instead\r\n              let price = (\"Individual\" in menuItem.Prices) ? menuItem.Prices.Individual : menuItem.Prices.Family\r\n              let accommodations = menuItem.Accommodations;\r\n              let priceOptions = menuItem.Prices;\r\n              let dietaryInfo = menuItem.dietaryInfo;\r\n              let id = menuItem._id;\r\n\r\n              return <MenuItem title={title} image={image} price={price} description={description} togglePopup={togglePopup} key={key} dietaryInfo={dietaryInfo} priceOptions={priceOptions} accommodations={accommodations} id={id}/>\r\n            })}\r\n          </div>\r\n        </div>\r\n      </>\r\n  )\r\n}\r\n\r\nexport default MenuItemCategory;\r\n","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuFilterButton.js",["249"],"/**\n * Individual buttons that handle toggle the display of sections onclick. \n * Toggling is based on props so that they dynamically change.\n * \n * @summary   Individual buttons that toggle the display of sections.\n * @author    Navid Boloorian\n */\n\nimport React from 'react';\nimport '../css/MenuFilterButton.css';\n\nconst MenuFilterButton = ( {categoryName, changeVisibleCategories, toggledFilter, setToggledFilter} ) => {\n\n    /**\n     * Function that groups the filter toggling state calls.\n     */\n    function updateFilters() {\n      changeVisibleCategories(categoryName);\n      setToggledFilter(categoryName);\n    }\n\n    // logic to check whether or not the filter button should be highlighted\n    let filterMatch = (categoryName === toggledFilter) && (categoryName != \"Whole Menu\");\n\n    return (\n      <button \n        className={`menu-filter-button ${filterMatch ? \"toggled-filter\": \"\"}`}\n        onClick={() => (updateFilters())}>\n        {categoryName} \n      </button>\n    )\n  }\n  \n  export default MenuFilterButton;","/Users/amador/UWEAST-Community-Kitchen/frontend/src/util/OrdersTableFunctions.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuItem.js",["250","251"],"/**\n * Component responsible for displaying and formatting items on menu. Bases \n * information on props and displays them accordingly. \n * \n * @summary   Component representing items in the menu.\n * @author    Navid Boloorian\n */\n\nimport React from 'react';\nimport \"../css/MenuItem.css\";\nconst config = require('../config');\n\nconst MenuItem = ( {description, image, price, title, togglePopup, dietaryInfo, priceOptions, accommodations, id} ) => {\n    return (\n      <div className=\"menu-item\" onClick={() => togglePopup(title, description, priceOptions, image, dietaryInfo, accommodations, id)}>\n        <div className=\"menu-image\">\n          <img src={image} alt=\"Item Image\"></img>\n        </div>\n        <div className=\"menu-text\">\n          <h3 className=\"menu-name\">{title}</h3>\n          <p className=\"menu-description\">{description}</p>\n        </div>\n        <div className=\"menu-absolutes\">\n          <p className=\"menu-price\">${price}</p>\n        </div>\n      </div>\n    );\n}\n  \nexport default MenuItem;",{"ruleId":"252","replacedBy":"253"},{"ruleId":"254","replacedBy":"255"},{"ruleId":"256","severity":1,"message":"257","line":17,"column":8,"nodeType":"258","messageId":"259","endLine":17,"endColumn":14},{"ruleId":"256","severity":1,"message":"260","line":7,"column":7,"nodeType":"258","messageId":"259","endLine":7,"endColumn":18},{"ruleId":"261","severity":1,"message":"262","line":79,"column":6,"nodeType":"263","endLine":79,"endColumn":8,"suggestions":"264"},{"ruleId":"261","severity":1,"message":"262","line":77,"column":6,"nodeType":"263","endLine":77,"endColumn":8,"suggestions":"265"},{"ruleId":"266","severity":1,"message":"267","line":105,"column":35,"nodeType":"268","messageId":"269","endLine":105,"endColumn":37},{"ruleId":"261","severity":1,"message":"262","line":39,"column":10,"nodeType":"263","endLine":39,"endColumn":12,"suggestions":"270"},{"ruleId":"256","severity":1,"message":"271","line":101,"column":12,"nodeType":"258","messageId":"259","endLine":101,"endColumn":20},{"ruleId":"256","severity":1,"message":"272","line":104,"column":22,"nodeType":"258","messageId":"259","endLine":104,"endColumn":33},{"ruleId":"256","severity":1,"message":"273","line":124,"column":24,"nodeType":"258","messageId":"259","endLine":124,"endColumn":37},{"ruleId":"266","severity":1,"message":"267","line":53,"column":31,"nodeType":"268","messageId":"269","endLine":53,"endColumn":33},{"ruleId":"274","severity":1,"message":"275","line":19,"column":5,"nodeType":"276","messageId":"277","endLine":19,"endColumn":48},{"ruleId":"274","severity":1,"message":"275","line":26,"column":5,"nodeType":"276","messageId":"277","endLine":26,"endColumn":67},{"ruleId":"274","severity":1,"message":"275","line":30,"column":5,"nodeType":"276","messageId":"277","endLine":30,"endColumn":60},{"ruleId":"261","severity":1,"message":"262","line":51,"column":8,"nodeType":"263","endLine":51,"endColumn":10,"suggestions":"278"},{"ruleId":"274","severity":1,"message":"275","line":53,"column":5,"nodeType":"276","messageId":"277","endLine":53,"endColumn":110},{"ruleId":"274","severity":1,"message":"275","line":62,"column":5,"nodeType":"276","messageId":"277","endLine":62,"endColumn":75},{"ruleId":"266","severity":1,"message":"267","line":44,"column":21,"nodeType":"268","messageId":"269","endLine":44,"endColumn":23},{"ruleId":"266","severity":1,"message":"267","line":53,"column":35,"nodeType":"268","messageId":"269","endLine":53,"endColumn":37},{"ruleId":"256","severity":1,"message":"279","line":84,"column":9,"nodeType":"258","messageId":"259","endLine":84,"endColumn":13},{"ruleId":"266","severity":1,"message":"267","line":47,"column":27,"nodeType":"268","messageId":"269","endLine":47,"endColumn":29},{"ruleId":"266","severity":1,"message":"267","line":53,"column":33,"nodeType":"268","messageId":"269","endLine":53,"endColumn":35},{"ruleId":"256","severity":1,"message":"280","line":23,"column":12,"nodeType":"258","messageId":"259","endLine":23,"endColumn":19},{"ruleId":"261","severity":1,"message":"281","line":205,"column":8,"nodeType":"263","endLine":205,"endColumn":14,"suggestions":"282"},{"ruleId":"266","severity":1,"message":"283","line":29,"column":26,"nodeType":"268","messageId":"269","endLine":29,"endColumn":28},{"ruleId":"284","severity":1,"message":"285","line":41,"column":7,"nodeType":"286","endLine":41,"endColumn":111},{"ruleId":"256","severity":1,"message":"287","line":244,"column":12,"nodeType":"258","messageId":"259","endLine":244,"endColumn":26},{"ruleId":"256","severity":1,"message":"288","line":263,"column":13,"nodeType":"258","messageId":"259","endLine":263,"endColumn":19},{"ruleId":"266","severity":1,"message":"283","line":27,"column":34,"nodeType":"268","messageId":"269","endLine":27,"endColumn":36},{"ruleId":"266","severity":1,"message":"283","line":38,"column":69,"nodeType":"268","messageId":"269","endLine":38,"endColumn":71},{"ruleId":"266","severity":1,"message":"283","line":40,"column":71,"nodeType":"268","messageId":"269","endLine":40,"endColumn":73},{"ruleId":"266","severity":1,"message":"267","line":40,"column":116,"nodeType":"268","messageId":"269","endLine":40,"endColumn":118},{"ruleId":"266","severity":1,"message":"267","line":52,"column":17,"nodeType":"268","messageId":"269","endLine":52,"endColumn":19},{"ruleId":"266","severity":1,"message":"267","line":57,"column":22,"nodeType":"268","messageId":"269","endLine":57,"endColumn":24},{"ruleId":"266","severity":1,"message":"267","line":100,"column":118,"nodeType":"268","messageId":"269","endLine":100,"endColumn":120},{"ruleId":"266","severity":1,"message":"283","line":100,"column":161,"nodeType":"268","messageId":"269","endLine":100,"endColumn":163},{"ruleId":"266","severity":1,"message":"267","line":100,"column":205,"nodeType":"268","messageId":"269","endLine":100,"endColumn":207},{"ruleId":"266","severity":1,"message":"267","line":101,"column":158,"nodeType":"268","messageId":"269","endLine":101,"endColumn":160},{"ruleId":"266","severity":1,"message":"267","line":123,"column":48,"nodeType":"268","messageId":"269","endLine":123,"endColumn":50},{"ruleId":"266","severity":1,"message":"283","line":138,"column":71,"nodeType":"268","messageId":"269","endLine":138,"endColumn":73},{"ruleId":"256","severity":1,"message":"289","line":160,"column":21,"nodeType":"258","messageId":"259","endLine":160,"endColumn":24},{"ruleId":"266","severity":1,"message":"267","line":172,"column":30,"nodeType":"268","messageId":"269","endLine":172,"endColumn":32},{"ruleId":"266","severity":1,"message":"283","line":236,"column":136,"nodeType":"268","messageId":"269","endLine":236,"endColumn":138},{"ruleId":"266","severity":1,"message":"283","line":255,"column":112,"nodeType":"268","messageId":"269","endLine":255,"endColumn":114},{"ruleId":"290","severity":1,"message":"291","line":334,"column":63,"nodeType":"292","messageId":"293","endLine":334,"endColumn":65},{"ruleId":"290","severity":1,"message":"291","line":336,"column":94,"nodeType":"292","messageId":"293","endLine":336,"endColumn":96},{"ruleId":"256","severity":1,"message":"294","line":58,"column":12,"nodeType":"258","messageId":"259","endLine":58,"endColumn":27},{"ruleId":"256","severity":1,"message":"295","line":58,"column":29,"nodeType":"258","messageId":"259","endLine":58,"endColumn":47},{"ruleId":"290","severity":1,"message":"291","line":329,"column":63,"nodeType":"292","messageId":"293","endLine":329,"endColumn":65},{"ruleId":"290","severity":1,"message":"291","line":331,"column":94,"nodeType":"292","messageId":"293","endLine":331,"endColumn":96},{"ruleId":"256","severity":1,"message":"296","line":9,"column":17,"nodeType":"258","messageId":"259","endLine":9,"endColumn":26},{"ruleId":"256","severity":1,"message":"297","line":12,"column":7,"nodeType":"258","messageId":"259","endLine":12,"endColumn":13},{"ruleId":"298","severity":1,"message":"299","line":21,"column":74,"nodeType":"300","endLine":21,"endColumn":83},{"ruleId":"290","severity":1,"message":"291","line":130,"column":31,"nodeType":"292","messageId":"293","endLine":130,"endColumn":33},{"ruleId":"290","severity":1,"message":"291","line":130,"column":103,"nodeType":"292","messageId":"293","endLine":130,"endColumn":105},{"ruleId":"298","severity":1,"message":"299","line":197,"column":25,"nodeType":"300","endLine":197,"endColumn":44},{"ruleId":"298","severity":1,"message":"299","line":137,"column":25,"nodeType":"300","endLine":137,"endColumn":46},{"ruleId":"266","severity":1,"message":"267","line":129,"column":28,"nodeType":"268","messageId":"269","endLine":129,"endColumn":30},{"ruleId":"266","severity":1,"message":"267","line":131,"column":35,"nodeType":"268","messageId":"269","endLine":131,"endColumn":37},{"ruleId":"301","severity":1,"message":"302","line":19,"column":46,"nodeType":"303","messageId":"304","endLine":19,"endColumn":57},{"ruleId":"261","severity":1,"message":"305","line":52,"column":6,"nodeType":"263","endLine":52,"endColumn":20,"suggestions":"306"},{"ruleId":"266","severity":1,"message":"283","line":23,"column":73,"nodeType":"268","messageId":"269","endLine":23,"endColumn":75},{"ruleId":"256","severity":1,"message":"297","line":11,"column":7,"nodeType":"258","messageId":"259","endLine":11,"endColumn":13},{"ruleId":"284","severity":1,"message":"285","line":17,"column":11,"nodeType":"286","endLine":17,"endColumn":45},"no-native-reassign",["307"],"no-negated-in-lhs",["308"],"no-unused-vars","'Orders' is defined but never used.","Identifier","unusedVar","'BACKEND_URL' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.","ArrayExpression",["309"],["310"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["311"],"'cartTime' is assigned a value but never used.","'setIsMobile' is assigned a value but never used.","'setPaypalCart' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["312"],"'json' is assigned a value but never used.","'cookies' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'history', 'paypalOrderObject', and 'removeCookie'. Either include them or remove the dependency array.",["313"],"Expected '!==' and instead saw '!='.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'checkboxUpdate' is assigned a value but never used.","'imgUrl' is assigned a value but never used.","'key' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'failedAdminAuth' is assigned a value but never used.","'setFailedAdminAuth' is assigned a value but never used.","'Component' is defined but never used.","'config' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","React Hook useEffect has a missing dependency: 'menuItemValues'. Either include it or remove the dependency array.",["314"],"no-global-assign","no-unsafe-negation",{"desc":"315","fix":"316"},{"desc":"315","fix":"317"},{"desc":"315","fix":"318"},{"desc":"315","fix":"319"},{"desc":"320","fix":"321"},{"desc":"322","fix":"323"},"Update the dependencies array to be: [state]",{"range":"324","text":"325"},{"range":"326","text":"325"},{"range":"327","text":"325"},{"range":"328","text":"325"},"Update the dependencies array to be: [cart, history, paypalOrderObject, removeCookie]",{"range":"329","text":"330"},"Update the dependencies array to be: [categoryName, menuItemValues]",{"range":"331","text":"332"},[1888,1890],"[state]",[1795,1797],[1179,1181],[1509,1511],[7871,7877],"[cart, history, paypalOrderObject, removeCookie]",[1859,1873],"[categoryName, menuItemValues]"]