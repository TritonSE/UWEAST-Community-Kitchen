[{"/Users/amador/UWEAST-Community-Kitchen/frontend/src/index.js":"1","/Users/amador/UWEAST-Community-Kitchen/frontend/src/App.js":"2","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/SearchBar.js":"3","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuItem.js":"4","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Contact.js":"5","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/SearchSection.js":"6","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/OrdersTable.js":"7","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuItems.js":"8","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Menu.js":"9","/Users/amador/UWEAST-Community-Kitchen/frontend/src/reportWebVitals.js":"10","/Users/amador/UWEAST-Community-Kitchen/frontend/src/config.js":"11","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/PayPal.js":"12","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuSection.js":"13","/Users/amador/UWEAST-Community-Kitchen/frontend/src/util/auth.js":"14","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Login.js":"15","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/NavBar.js":"16","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/CartPreview.js":"17","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuItemPopup.js":"18","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuItemCategory.js":"19","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Admin.js":"20","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuFilterButton.js":"21","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Orders.js":"22","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/About.js":"23","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuFilter.js":"24"},{"size":500,"mtime":1610411291969,"results":"25","hashOfConfig":"26"},{"size":1133,"mtime":1611646058299,"results":"27","hashOfConfig":"26"},{"size":300,"mtime":1611646058305,"results":"28","hashOfConfig":"26"},{"size":647,"mtime":1612845943110,"results":"29","hashOfConfig":"26"},{"size":482,"mtime":1611204935534,"results":"30","hashOfConfig":"26"},{"size":450,"mtime":1612845943115,"results":"31","hashOfConfig":"26"},{"size":7761,"mtime":1612845943115,"results":"32","hashOfConfig":"26"},{"size":689,"mtime":1612836285840,"results":"33","hashOfConfig":"26"},{"size":2370,"mtime":1612846167016,"results":"34","hashOfConfig":"26"},{"size":362,"mtime":1610411291970,"results":"35","hashOfConfig":"26"},{"size":191,"mtime":1610411291969,"results":"36","hashOfConfig":"26"},{"size":7471,"mtime":1611646058305,"results":"37","hashOfConfig":"26"},{"size":3783,"mtime":1612845943114,"results":"38","hashOfConfig":"26"},{"size":129,"mtime":1611204935535,"results":"39","hashOfConfig":"26"},{"size":1621,"mtime":1611204935535,"results":"40","hashOfConfig":"26"},{"size":3480,"mtime":1611646058304,"results":"41","hashOfConfig":"26"},{"size":2780,"mtime":1612846167013,"results":"42","hashOfConfig":"26"},{"size":4352,"mtime":1612845943113,"results":"43","hashOfConfig":"26"},{"size":2331,"mtime":1612249980839,"results":"44","hashOfConfig":"26"},{"size":33815,"mtime":1612845943120,"results":"45","hashOfConfig":"26"},{"size":451,"mtime":1611646058300,"results":"46","hashOfConfig":"26"},{"size":3877,"mtime":1612845943121,"results":"47","hashOfConfig":"26"},{"size":1503,"mtime":1611646058310,"results":"48","hashOfConfig":"26"},{"size":620,"mtime":1611646058300,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"wx0vlp",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"52"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"52"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"52"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/amador/UWEAST-Community-Kitchen/frontend/src/index.js",[],["115","116"],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/App.js",[],["117","118"],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/SearchBar.js",["119","120"],"import React, { Component } from 'react';\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nconst SearchBar = ( {keyword, setKeyword} ) => {\n    return (\n      <input\n        key=\"searchkey\"\n        placeholder=\"search food\"\n      />\n    );\n}\n  \nexport default SearchBar;",["121","122"],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuItem.js",["123","124"],"import React from 'react';\nimport \"../css/MenuItem.css\";\nconst config = require('../config');\n\nconst MenuItem = ( {description, image, price, title, togglePopup, dietaryInfo} ) => {\n    return (\n      <div className=\"menu-item\" onClick={() => togglePopup(title, description, price, image, dietaryInfo)}>\n        <div className=\"menu-image\">\n          <img src={image}></img>\n        </div>\n        <div className=\"menu-text\">\n          <h3 className=\"menu-name\">{title}</h3>\n          <p className=\"menu-description\">{description}</p>\n          <p className=\"menu-price\">{price}</p>\n        </div>\n      </div>\n    );\n}\n  \nexport default MenuItem;","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Contact.js",["125"],"import React, { Component} from 'react';\nimport Navbar from '../components/NavBar';\n\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nclass Contact extends Component {\n\n\n    render (){\n\n      return (\n\n          <div>\n              <Navbar currentPage=\"contact\"/>\n              <div style={{marginTop: \"30px\"}}>\n                  This is the Contact Page.\n              </div>           \n          </div>\n\n      )\n    }\n  }\n  \n  export default Contact;","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/SearchSection.js",["126","127"],"import React, { Component } from 'react';\nimport SearchBar from \"./SearchBar\";\nimport \"../css/SearchSection.css\";\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nconst SearchSection = () => {\n    return (\n      <div className=\"search-section\">\n        <div className=\"searchbar-box\">\n          <h2>Order food online now!</h2>\n          <SearchBar />\n        </div>\n      </div>\n    );\n}\n  \nexport default SearchSection;","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/OrdersTable.js",["128"],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuItems.js",["129","130"],"import React from 'react';\nimport MenuItemCategory from './MenuItemCategory';\nimport '../css/MenuItems.css';\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nconst MenuItems = ({ foodCategories, processForm, popupVisible, popupValues, togglePopup }) => {\n\n  return (\n\n      <div className=\"menu-items\">\n        {/** generates categories in the menu */}\n        {foodCategories.map((categoryName, key) => {\n          return <MenuItemCategory key={key} categoryName={categoryName} key={key} processForm={processForm} popupVisible={popupVisible} popupValues={popupValues} togglePopup={togglePopup}/>\n        })}\n      </div>\n\n  )\n}\n  \n  export default MenuItems;","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Menu.js",["131","132","133"],"import React, { Component, useState} from 'react';\nimport Navbar from '../components/NavBar';\nimport CartPreview from '../components/CartPreview';\nimport CartSummary from '../components/CartSummary';\nimport SearchSection from '../components/SearchSection';\nimport MenuSection from '../components/MenuSection';\nimport MenuItemPopup from '../components/MenuItemPopup'\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nclass Menu extends Component {\n    constructor(props) {\n        super(props);\n\n        //stores items currently in the cart using local storage\n        this.state = {\n            items: JSON.parse(localStorage.getItem('cartItems')) || [],\n            cartPopupVisible: false,\n            subTotal: \"00.00\",\n            tax: \"00.00\",\n            totalPrice: \"00.00\"\n        }\n\n        this.toggleCart = this.toggleCart.bind(this);\n\n    }\n\n    //adds item from popup to the cart and updates local storage\n    handleAdd = (item) => {\n        this.setState({items: [...this.state.items, item]}, () => {\n            localStorage.setItem('cartItems', JSON.stringify(this.state.items))\n        });\n        console.log(this.state.items);\n\n        // this.state.subTotal = parseFloat(this.state.subTotal) + parseFloat(item.price);\n        //             this.state.subTotal = parseFloat(this.state.subTotal).toFixed(2);\n        //             this.state.totalPrice = parseFloat(this.state.subTotal) + parseFloat(this.state.tax);\n        //             this.state.totalPrice = parseFloat(this.state.totalPrice).toFixed(2);\n    }\n\n    toggleCart() {\n        this.setState({cartPopupVisible: !this.state.cartPopupVisible});\n    }\n\n    render (){\n\n      return (\n          <div>\n              <Navbar currentPage=\"menu\"/>\n              {this.state.cartPopupVisible ? <CartSummary items={this.state.items} toggleCart={this.toggleCart}/> : null}\n              {/* cart preview is floated on the bottom right of the screen */}\n              <CartPreview key={this.state.items} items={this.state.items} total={this.state.totalPrice} tax={this.state.tax} subtotal={this.state.subTotal} toggleCart={this.toggleCart}/> \n              {/** search section is the top, non-menu half of the page */}\n              <SearchSection/>\n              <MenuSection onItemAdd={this.handleAdd}/> \n          </div>\n\n      )\n    }\n  }\n  \n  export default Menu;","/Users/amador/UWEAST-Community-Kitchen/frontend/src/reportWebVitals.js",[],["134","135"],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/config.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/PayPal.js",["136"],"import React from 'react'\nimport { useHistory } from \"react-router-dom\";\n\n// const paypal = require(\"@paypal/checkout-server-sdk\");\n\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\n//PayPal script is located in public/index.html (contains Client ID)\nexport default function PayPal(props) {\n    const { cart } = props;\n    let history = useHistory();\n    // I assume the cart object looks like this:\n    // {\n    //     cart_total: \"\",\n    //     item_total: \"\",\n    //     tax_total: \"\",\n    //     items: [\n    //         {\n    //             name: \"\",\n    //             quantity: \"\",\n    //             size: \"\",\n    //             addons: [\"\", \"\"],\n    //             individual_price: \"\",\n    //             individual_tax: \"\",\n    //         },\n    //     ],\n    //     pickup_date: \"\"\n    // }\n    const paypalRef = React.useRef();\n    const paypalOrderObject = {\n        intent: \"CAPTURE\",\n        application_context: {\n            shipping_preference: 'NO_SHIPPING',\n        },\n        purchase_units: [{\n            description: \"Food order from UWEAST Kitchen\",\n            // Deals with pricing of the cart\n            amount: {\n                currency_code: \"USD\",\n                value: cart.cart_total,\n                breakdown: {\n                    // includes totals for items and taxes. Shipping and handling can be ignored\n                    // because the items are for pickup and handling is included in price\n                    item_total: {\n                        currency_code: \"USD\",\n                        value: cart.item_total,\n                    },\n                    tax_total: {\n                        currency_code: \"USD\",\n                        value: cart.tax_total,\n                    },\n                }\n            },\n            // Deals with the individual item entries for the order\n            items: \n            cart.items.map((item) => {\n                return {\n                    name: item.name,\n                    // Description follows the format:\n                    // Size: {size}, (Gluten Free,) (Other addons,) \n                    description: [`Size: ${item.size}`, ...item.addons].join(\", \"),\n                    unit_amount: {\n                        currency_code: \"USD\",\n                        value: item.individual_price,\n                    },\n                    tax: {\n                        currency_code: \"USD\",\n                        value: item.individual_tax,\n                    },\n                    quantity: item.quantity,\n                    category: \"PHYSICAL_GOODS\"\n                }\n            })\n        }],\n        shipping_type: 'PICKUP',\n    }\n    // THE FOLLOWING TWO METHODS ARE NOT USED. THEY WERE CREATED FOR\n    // SERVER SIDE PAYMENT INTEGRATION, BUT THIS ISN'T BEST PRACTICE,\n    // SO IT WAS NOT PURSUED. THEREFORE THESE METHODS ARE COMMENTED OUT.\n    /* const createOrder = async () => {\n        console.log(\"Creating order...\");\n        return fetch(`${BACKEND_URL}paypal/createPayment`, {\n            method: \"POST\",\n            body: JSON.stringify(paypalOrderObject),\n            headers: {\n                \"content-type\": \"application/json\"\n            }, \n        }).then((res) => {\n            if(res.ok) {\n                return res.json();\n            }\n        }).then((data) => {\n            console.log(\"finished creating order\")\n            return data.orderID; // make sure to use the same key name for order ID on the client and server\n        })\n        .catch((err) => {\n            console.log(err);\n            alert(\"Create order Error\");\n        });\n    }\n    const onApprove = async (data) => {\n        console.log(\"Authorizing order...\");\n        return fetch(`${BACKEND_URL}paypal/executePayment`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                orderID: data.orderID,\n            }),\n        }).then((res) => {\n           // handle show completion\n           console.log(\"ORDER COMPLETE!\");\n           return res.json();\n        })\n        .catch(() => {\n            alert(\"Error\");\n        }).then((details) => {\n            alert(\"Successful order!\");\n            console.log(details);\n        });\n    } */\n\n     // To show PayPal buttons once the component loads\n    React.useEffect(() => {\n        window.paypal\n        .Buttons({\n            createOrder: async(data, actions) => {\n                return actions.order.create(paypalOrderObject);\n            },\n            onApprove: async (data, actions) => {\n                return actions.order.capture().then(function(details) {\n                    // Details here includes payer name, phone number, and email.\n\n                    // create order object\n                    const orderObj = {\n                        \"Customer\": {\n                            \"Name\": details.payer.name.given_name + \" \" + details.payer.name.surname,\n                            \"Email\": details.payer.email_address,\n                            \"Phone\": details.payer.phone.phone_number.national_number\n                        },\n                        \"Pickup\": cart.pickup_date,\n                        \"PayPal\": {\n                            \"Amount\": cart.cart_total,\n                            \"transactionID\": details.id\n                        },\n                        \"Order\": \n                        cart.items.map((item) => {\n                            return {\n                                \"item\": item.name,\n                                \"quantity\": item.quantity,\n                                \"extra\": [`${item.size} size`, ...item.addons],\n                            }\n                        })\n                    }\n                    // signal email automation by calling the /autoEmails/automate route, \n                    // this will automatically add the order to the database \n                    return fetch(`${BACKEND_URL}autoEmails/automate`, {\n                        method: \"POST\",\n                        headers: {\n                            \"content-type\": \"application/json\",\n                        },\n                        body: JSON.stringify(orderObj),\n                    }).then((res) => {\n                        if(res.ok){\n                            alert('Transaction completed! You will receive a confirmation email shortly.');\n                            history.push(\"/\");\n                        } else {\n                            alert('Transaction completed, but email automation failed. You paid for your meal, and should get a confirmation from PayPal');\n                            history.push(\"/\");\n\n                        }\n                    })\n                    .catch(() => {\n                        alert(\"Error\");\n                    });\n                });\n            },\n            onCancel: () => {\n                // If the user cancels their order, send them back to the cart summary\n                // The cart summary exists at the menu page\n                console.log(\"cancel\");\n                history.push(\"/\");\n            },\n            onError: (err) => {\n                alert(\"An error occurred!\");\n                console.error(err);\n                history.push(\"/\");\n\n            },\n        })\n        .render(paypalRef.current);\n    }, [cart]);\n\n    return (\n        <div>\n            <div ref={paypalRef}/>\n        </div>\n    )\n}","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuSection.js",["137","138","139","140","141"],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/util/auth.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Login.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/NavBar.js",["142","143","144","145","146"],"import React from 'react';\nimport {useHistory} from \"react-router-dom\";\nimport {Navbar, Nav} from 'react-bootstrap';\nimport {isAuthorized, removeJWT} from '../util/auth.js';\nimport '../css/NavBar.css';\n\n\nexport default function NavBar (props) {\n\n    {/* history hook to redirect on logout */}\n    const history = useHistory();\n\n    {/* stores class names to toggle whether content is shown */}\n    var adminContentClass;\n    var loginButtonClass;\n\n    {/* removes login token and redirects to menu page */}\n    function logout() {\n        removeJWT();\n        history.push(\"/\");\n        history.go(0);\n    }\n\n    {/* Hides admin content (admin page + logout) or login button depending on whether user is logged in */}\n    if(isAuthorized()) {\n        adminContentClass = \"nav-link\";\n        loginButtonClass = \"nav-link d-none\";\n    } else {\n        adminContentClass = \"nav-link d-none\";\n        loginButtonClass = \"nav-link\";\n    }\n\n    {/* Check current page from props to change active nav-link color */}\n    function isPageActive(pageToCheck) {\n        return (pageToCheck === props.currentPage) ? \" active\" : \"\";\n    }\n\n    return (\n        <html>\n            <head>\n                {/* Bootstrap Resources */}\n                <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossOrigin=\"anonymous\"/>\n            </head>\n            <Navbar className=\"navbar navbar-bg-color\" collapseOnSelect expand=\"md\" variant=\"dark\">\n                {/* Left Hand Side of Navbar - Title & Image linked to Menu Page */}\n                <Navbar.Brand href=\"/\">\n                    <img src=\"\" className=\"d-inline-block align-top\" alt=\"UWEAST Logo\"/>\n                </Navbar.Brand>\n\n                {/* Triggers on Collapse - Hamburger Icon replaces pages */}\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n\n                {/* Right Hand Side of Navbar - Linked Pages (based off of Router paths in App.js) */}\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"ml-auto\">\n                        {/* Menu Page */}\n                        <Nav.Link className={\"nav-link\" + isPageActive(\"menu\")} href=\"/\">Menu</Nav.Link>\n\n                        {/* Contact Page */}\n                        <Nav.Link className={\"nav-link\" + isPageActive(\"contact\")} href=\"/contact\">Contact</Nav.Link>\n\n                        {/* About Page */}\n                        <Nav.Link className={\"nav-link\" + isPageActive(\"about\")} href=\"/about\">About</Nav.Link>\n\n                        {/* Admin Page - only visible when isAuthorized()*/}\n                        <Nav.Link className={adminContentClass + isPageActive(\"admin\")} href=\"/admin\">Admin</Nav.Link>\n\n                        <Nav.Link className={adminContentClass + isPageActive(\"admin\")} href=\"/orders\">Orders</Nav.Link>\n\n                        {/* Logout Button - starts logout operation, only visible when isAuthorized() */}\n                        <Nav.Link className={adminContentClass} onClick={logout}>Logout</Nav.Link>\n\n                        {/* Login Page - only visible when not isAuthorized()*/}\n                        <Nav.Link className={loginButtonClass + isPageActive(\"login\")} href=\"/login\">Login</Nav.Link>        \n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        </html>\n    )\n}","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/CartPreview.js",["147","148","149","150","151"],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuItemPopup.js",["152","153","154","155"],"import React, { useState } from 'react';\nimport '../css/MenuItemPopup.css';\n\nconst MenuItemPopup = ({ values, togglePopup, processForm }) => {\n  const [quantity, setQuantity] = useState(1);\n  const [totalPrice, setTotalPrice] = useState(parseInt(values.get(\"price\")));\n  const indvidualPrice = parseInt(values.get(\"price\"));\n  const familyPrice = parseInt(indvidualPrice);\n\n  let currPrice = indvidualPrice;\n\n  var item = {\n    name: values.get(\"title\"),\n    quantity: quantity,\n    price: totalPrice,\n    description: values.get(\"description\")\n  }\n\n  // handles changing price and quantity states\n  const changeQuantity = sign => {\n    if(sign == \"+\") {\n      setQuantity(quantity + 1);\n      // calulates on quantity + 1 b/c state hasn't updated yet\n      setTotalPrice(currPrice * (quantity + 1));\n    }\n    else if(sign == \"-\") {\n      if(quantity > 1) {\n        setQuantity(quantity - 1);\n        // calulates on quantity - 1 b/c state hasn't updated yet\n        setTotalPrice(currPrice * (quantity - 1));\n      }\n    }\n  }\n\n  // will be used when family price is introduced to toggle between\n  const changePrice = newPrice => {\n    currPrice = newPrice;\n  }\n\n  return (\n    <>\n      {/** div that fades out the background */}\n      <div className=\"greyout\" onClick={togglePopup}></div>\n      <div className=\"menu-item-popup\">\n        <span className=\"close-button\" onClick={togglePopup}>+</span>\n        <div className=\"left-popup\">\n          <img src={values.get(\"image\")} />\n        </div>\n        <div className=\"right-popup\">\n          <form onSubmit={processForm} id=\"popup-form\">\n            <h2 className=\"title-popup\">{values.get(\"title\")}</h2>\n            <h2 className=\"desc-popup\">{values.get(\"description\")}</h2>\n            <p className=\"dietary-info\">\n              {/**\n               * dietary info is an array list with 3 boolean values:\n               * 1. vegan\n               * 2. vegatarian\n               * 3. gluten-free\n               */}\n              {(values.get(\"dietary-info\")[0]) ? \"vegan \" : null}\n              {(values.get(\"dietary-info\")[1]) ? \"vegetarian \" : null}\n              {(values.get(\"dietary-info\")[2]) ? \"gluten-free \" : null}\n            </p>\n            <div className=\"size-section\">\n              <div className=\"section-title\">\n                <h3>Choose Size</h3>\n                <i>required</i>\n              </div>\n              <label className=\"choice-label\">\n                <input onClick={() => changePrice(indvidualPrice)} type=\"radio\" name=\"size\" value=\"individual\" required />\n                <span onClick={() => changePrice(indvidualPrice)} className=\"label-title\">Individual</span>\n              </label>\n              <label className=\"choice-label\">\n                <input onClick={() => changePrice(familyPrice)} type=\"radio\" name=\"size\" value=\"family\" required />\n                <span onClick={() => changePrice(familyPrice)} className=\"label-title\">Family</span>\n              </label>\n            </div>\n            <div className=\"instructions-section\">\n              <div className=\"section-title\">\n                <h3>Special Instructions</h3>\n                <i>optional</i>\n              </div>\n              <textarea name=\"instructions\" className=\"instructions-textarea\" />\n            </div>\n            <div className=\"quantity-section\">\n              <div className=\"section-title\"><h3>Quantity</h3></div>\n              <div className=\"quantity-buttons\">\n                <button type=\"button\" className=\"button decrease-button\" onClick={() => {changeQuantity(\"-\");}\n                  }>-</button>\n                <span className=\"quantity-number\">{quantity}</span>\n                <button type=\"button\" className=\"button increase-button\" \n                  onClick={() => {changeQuantity(\"+\");}}>+</button>\n              </div>\n            </div>\n            <input name=\"name\" type=\"hidden\" value={values.get(\"title\")} />\n            <input name=\"price\" type=\"hidden\" value={totalPrice} />\n            <input name=\"quantity\" type=\"hidden\" value={quantity} />\n            <input name=\"description\" type=\"hidden\" value={values.get(\"description\")} />\n            <input className=\"submit-order-button\" type=\"submit\" value={\"Add \" + quantity + \" to cart $\" + totalPrice} />\n          </form>\n        </div>\n      </div>\n    </>\n  )\n}\n  \n  export default MenuItemPopup;","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuItemCategory.js",["156","157","158","159","160"],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Admin.js",["161","162","163","164","165","166","167","168","169","170","171","172"],"import React, { Component } from 'react';\nimport { Modal, Button} from 'react-bootstrap';\nimport Navbar from '../components/NavBar';\nimport '../css/Admin.css';\n\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nclass Admin extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            renderFeaturedItems: false,\n            renderEditItems: false,\n            renderAddItems: false,\n            renderDeleteItems: false,\n            renderItemDetails: false,\n            getItemsArray: [],\n            insertItem: {\n                vegan: false,\n                vegetarian: false,\n                glutenFree: false\n            },\n            featureList: {},\n            deleteItemsArray: []\n        }\n\n        //Modals\n        this.featuredItemModal = this.featuredItemModal.bind(this);\n        this.editItemModal = this.editItemModal.bind(this);\n        this.addItemModal = this.addItemModal.bind(this);\n        this.deleteItemModal = this.deleteItemModal.bind(this);\n        this.editItemDetails = this.editItemDetails.bind(this);\n\n        //Helper methods\n        this.updateField = this.updateField.bind(this);\n        this.updateFieldCheckbox = this.updateFieldCheckbox.bind(this);\n        this.updateInsertField = this.updateInsertField.bind(this);\n        this.updateInsertFieldCheckbox = this.updateInsertFieldCheckbox.bind(this);\n\n        //Fetch calls\n        this.getItems = this.getItems.bind(this);\n        this.saveItemChanges = this.saveItemChanges.bind(this);\n        this.deleteItem = this.deleteItem.bind(this);\n        this.insertItem = this.insertItem.bind(this);\n        this.saveFeatures = this.saveFeatures.bind(this);\n    }\n\n    //////////////////////////////////////////\n    //          Fetch call methods          //\n    //////////////////////////////////////////\n\n    //Fetch call to get all menu items\n    getItems() {\n        fetch(`${BACKEND_URL}item`)\n        .then(res => res.json())\n        .then(data => {\n            this.setState({\n                getItemsArray: data.items,\n            }, () => {\n                //This callback function allows for featureList to be populated \n                //upon loading of the page\n                let setList = {};\n                for (let i = 0; i < this.state.getItemsArray.length; i++) {\n                    let info = this.state.getItemsArray[i];\n                    if(info.featured) setList[info._id] = info._id;\n                }\n\n                this.setState({\n                    featureList: setList    \n                })\n            });   \n        }).catch((error) => {\n            console.log(error);\n        })\n    }\n\n    //Fetch call to save item changes upon editing\n    insertItem() {\n        if(Object.keys(this.state.insertItem).length < 10) {\n            console.log(\"Error! not enough items in addItem object\")\n            return;\n        }\n\n        fetch(`${BACKEND_URL}item/insert`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(this.state.insertItem)\n        }).then(async result => {\n            if (result.ok) console.log(result.statusText);\n            this.setState({ renderAddItems: false })\n        })\n        .catch(e => {\n            console.log(e);\n        });\n    }\n\n    //fetch call to delete the item\n    deleteItem(item) {\n        if(!item) {\n            console.log(\"Error! Can't delete this item\");\n            return;\n        }\n\n        fetch(`${BACKEND_URL}item/remove`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(item)\n        }).then(async result => {\n            if (result.ok) console.log(result.statusText);\n\n            this.setState({ renderDeleteItems: false })\n            //render the list to get the updated list without refreshing the page\n            this.getItems();\n        })\n        .catch(e => {\n            console.log(e);\n        });    \n    }\n\n    //Fetch call to insert data into the table\n    saveItemChanges(e) {\n        // e.preventDefault();\n        const keys = [\"name\", \"description\", \"category\", \"price\", \"image\", \"cuisine\", \"ingredients\", \"vegan\", \"vegetarian\", \"glutenFree\"];\n        if(!this.state.getItemInfo) {\n            console.log(\"Error! editing item problem.\");\n            return;\n        }\n\n        for(let key in keys) {\n            if(!(keys[key] in this.state.getItemInfo)) {\n                console.log(\"Error! Missing \" + keys[key] + \" in object\");\n                return;\n            }    \n        }\n\n        fetch(`${BACKEND_URL}item/edit`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(this.state.getItemInfo)\n        }).then(async result => {\n            if (result.ok) console.log(result.statusText);\n            this.setState({ renderItemDetails: false })\n            //render the list to get the updated list without refreshing the page\n            this.getItems();\n        })\n        .catch(e => {\n            console.log(e);\n        });\n    }\n\n    //update the items to be listed under the features tag\n    saveFeatures() {\n        fetch(`${BACKEND_URL}item/feature`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(this.state.featureList)\n        }).then(async result => {\n            if (result.ok) console.log(result.statusText);\n            this.setState({ renderFeaturedItems: false })\n        })\n        .catch(e => {\n            console.log(e);\n        });    \n    }\n\n    componentDidMount() {\n        //Get the list of menu items when loading the page\n        this.getItems();\n    }\n\n    //This modal will render when the user clicks on \"feature\" button\n    //Determine the items to be listed as \"featured\"\n    featuredItemModal() {\n        //List of categories\n        const featuredCategories = [\"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\n\n        return (\n            <Modal show={this.state.renderFeaturedItems} onHide={() => this.setState({renderFeaturedItems: false})} backdrop='static'>\n                <Modal.Header closeButton>\n                    <Modal.Title>Featured Menu Item</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div>\n                        {featuredCategories.map((category, ind) => (\n                            <div>\n                                <h6>{category}</h6>\n                                <div className=\"list-group\">\n                                    {this.state.getItemsArray.map((item, ind) => {\n                                        if(item.category === category) {\n                                            return (\n                                                <div className=\"featured-item-checkbox\">\n                                                    <input name=\"menu-item\" className=\"form-check-input\" type=\"checkbox\" checked={this.state.featureList[item._id]}\n                                                            onChange={(e) => {\n                                                                const getList = this.state.featureList;\n                                                                getList[item._id] ? delete getList[item._id] : getList[item._id] = item._id;\n                                                                this.setState({\n                                                                    featureList: getList\n                                                                });\n                                                            }}>      \n                                                    </input>\n                                            \n                                                    <label class=\"form-check-label\" >\n                                                        {item.name}\n                                                    </label>\n                                                </div>\n                                            )\n                                        }\n                                    })}\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => this.setState({renderFeaturedItems: false })}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={() => this.saveFeatures()}>\n                        Save Changes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        )\n    }\n\n    //This modal opens when the Admin clicks on \"edit\"\n    //This will allows the admin to edit their menu items\n    editItemModal() {\n        const featuredCategories = [\"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\n\n        return (\n            <Modal show={this.state.renderEditItems} onHide={() => this.setState({renderEditItems: false})} backdrop='static'>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit item</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div>\n                        {featuredCategories.map((category, ind) => (\n                            <div>\n                                <h6>{category}</h6>\n                                <div className=\"list-group\">\n                                    {this.state.getItemsArray.map((item, ind) => {\n                                        if(item.category === category) {\n                                            return (\n                                                <button onClick={() => {\n                                                    const filterItem = this.state.getItemsArray.filter(items => items.name === item.name)[0];\n                                                    this.setState({\n                                                        renderEditItems: false,\n                                                        renderItemDetails: true,\n                                                        getItemInfo: filterItem,\n                                                    })\n                                                }}>Edit {item.name}</button>\n                                            )\n                                        }\n                                    })}\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => this.setState({ renderEditItems: false })}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        )\n    }\n\n    // Helper method used to update textfield in edit item modal\n    updateField(e, field) {\n        let updateField = this.state.getItemInfo;\n        \n        //Delete the object so the form wil check for empty inputs\n        if(e.target.value == \"\") delete updateField[e.target.name];\n        else updateField[field] = e.target.value;\n\n        this.setState({ getItemInfo: updateField });\n    }\n\n    //Used for vegan, vegetarian, and glutenFree checkboxes\n    updateFieldCheckbox(isChecked, field) {\n        let updateField = this.state.getItemInfo;\n        updateField[field] = isChecked;\n        this.setState({ getItemInfo: updateField });\n    }\n\n    //This will render when the user clicks on an item inside the \"edit\" modal\n    //Allows the admin to edit any field and update accordingly\n    editItemDetails() {\n        //Undefined when page initially renders, returns an error\n        //This check prevents such error\n        if(this.state.getItemInfo === undefined) return; \n\n        return (\n            <Modal show={this.state.renderItemDetails} onHide={() => this.setState({renderItemDetails: false})} backdrop='static'>\n                <Modal.Header closeButton>\n                    <Modal.Title></Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <form>\n                        <div class=\"form-group\">\n                            <label for=\"name\">Name</label>\n                            <input name=\"name\" type=\"text\" class=\"form-control\" placeholder=\"Enter name\" required \n                                value={this.state.getItemInfo.name} onChange={(e) => this.updateField(e, 'name')}\n                            />\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"name\">Description</label>\n                            <input name=\"description\" type=\"text\" class=\"form-control\" placeholder=\"Enter description\" required \n                                value={this.state.getItemInfo.description} onChange={(e) => this.updateField(e, 'description')}\n                            />\n                        </div>\n\n                        <label for=\"description\">Category</label>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" value=\"Appetizers\" required \n                                checked={this.state.getItemInfo.category === \"Appetizers\"} onChange={(e) => this.updateField(e, 'category')}\n                            />\n                            <label class=\"form-check-label\" for=\"Appetizers\">\n                                Appetizers\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" value=\"Main Dishes\" required \n                                checked={this.state.getItemInfo.category === \"Main Dishes\"} onChange={(e) => this.updateField(e, 'category')}\n                            />\n                            <label class=\"form-check-label\" for=\"Main Dishes\">\n                                Main Dishes\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" value=\"Sides\" required \n                                checked={this.state.getItemInfo.category === \"Sides\"} onChange={(e) => this.updateField(e, 'category')}\n                            />\n                            <label class=\"form-check-label\" for=\"Sides\">\n                                Sides\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" value=\"Drinks\" required \n                                checked={this.state.getItemInfo.category === \"Drinks\"} onChange={(e) => this.updateField(e, 'category')}\n                            />\n                            <label class=\"form-check-label\" for=\"Drinks\">\n                                Drinks\n                            </label>\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"price\">Price</label>\n                            <input name=\"price\" type=\"number\" step=\"0.01\" class=\"form-control\" placeholder=\"Enter price\" required \n                                value={this.state.getItemInfo.price} onChange={(e) => this.updateField(e, 'price')}\n                            />\n                        </div>\n\n                        <div class=\"form-group\">\n                            <label for=\"image\">Image Link</label>\n                            <input name=\"image\" type=\"text\" class=\"form-control\" placeholder=\"Enter link\" required \n                                value={this.state.getItemInfo.image} onChange={(e) => this.updateField(e, 'image')}\n                            />\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"cuisine\">Cuisine</label>\n                            <input name=\"cuisine\" type=\"text\" class=\"form-control\" placeholder=\"Enter cuisine\" required \n                                value={this.state.getItemInfo.cuisine} onChange={(e) => this.updateField(e, 'cuisine')}\n                            />\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"ingredients\">Ingredients</label>\n                            <input name=\"ingredients\" type=\"text\" class=\"form-control\" placeholder=\"Enter ingredients, separated by commas\" required \n                                value={this.state.getItemInfo.ingredients ? this.state.getItemInfo.ingredients.toString().replace(',', ', ') : ''} \n                                onChange={(e) => this.updateField(e, 'ingredients')}\n                            />\n                        </div>\n\n                        <div class=\"form-check form-check-inline\">\n                            <input name=\"vegan\" class=\"form-check-input\" type=\"checkbox\"\n                                checked={this.state.getItemInfo.vegan} onChange={(e) => this.updateFieldCheckbox(!this.state.getItemInfo.vegan, 'vegan')}\n                            />\n                            <label class=\"form-check-label\" for=\"defaultCheck1\">\n                                Vegan\n                            </label>\n                        </div>\n                        \n                        <div class=\"form-check form-check-inline\">\n                            <input name=\"vegetarian\" class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"editVegetarian\" \n                                checked={this.state.getItemInfo.vegetarian} onChange={(e) => this.updateFieldCheckbox(!this.state.getItemInfo.vegetarian, 'vegetarian')}\n                            />\n                            <label class=\"form-check-label\" for=\"defaultCheck2\">\n                                Vegetarian\n                            </label>\n                        </div>\n                        \n                        <div class=\"form-check form-check-inline\">\n                            <input name=\"glutenFree\" class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"editGlutenFree\" \n                                checked={this.state.getItemInfo.glutenFree} onChange={(e) => this.updateFieldCheckbox(!this.state.getItemInfo.glutenFree, 'glutenFree')}\n                            />\n                            <label class=\"form-check-label\" for=\"defaultCheck3\">\n                                Gluten Free\n                            </label>\n                        </div>   \n                        <Modal.Footer>\n                            <Button variant=\"secondary\" onClick={() => {\n                                this.setState({ renderItemDetails: false, renderEditItems: true });\n                                //This call will allow the changes to not take effect if the user closes the modal\n                                this.getItems();\n                            } }>\n                                Close\n                            </Button>\n                            <Button variant=\"primary\" type=\"submit\" onClick={(e) => this.saveItemChanges(e)}>\n                                Save Changes\n                            </Button>\n                        </Modal.Footer>\n                    </form>\n                </Modal.Body>\n            </Modal>\n        )\n    }\n\n    //Method used for updating state for inserting item\n    updateInsertField(e, isIngredients) {\n        const getState = this.state.insertItem;\n\n        //Check for ingredients key, so then it will split values into array\n        if(isIngredients) {\n            getState[e.target.name] = e.target.value.split(',');\n        } else {\n            getState[e.target.name] = e.target.value;\n        }\n        \n        this.setState({\n            insertItem: getState\n        })\n    }\n\n    //Same concept as updateInsertField but for the three checkboxes\n    //which are vegan, vegetarian, and glutenFree\n    updateInsertFieldCheckbox(e) {\n        const getState = this.state.insertItem;\n        getState[e.target.name] = !this.state.insertItem[e.target.name];\n\n        this.setState({\n            insertItem: getState\n        });\n    }\n\n    //This modal will render when the user clicks on the \"add\" button\n    //Admin user can add new item to the database through here\n    addItemModal() {\n        return (\n            <Modal show={this.state.renderAddItems} onHide={() => this.setState({ renderAddItems: false })} backdrop='static'>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add Menu Item</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <form>\n                        <div class=\"form-group\">\n                            <label for=\"name\">Name</label>\n                            <input name=\"name\" type=\"text\" class=\"form-control\" id=\"name\" placeholder=\"Enter name\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"name\">Description</label>\n                            <input name=\"description\" type=\"text\" class=\"form-control\" id=\"description\" placeholder=\"Enter description\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                        </div>\n\n                        <label for=\"description\">Category</label>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" id=\"category\" value=\"Appetizers\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                            <label class=\"form-check-label\" for=\"Appetizers\">\n                                Appetizers\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" id=\"category\" value=\"Main Dishes\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                            <label class=\"form-check-label\" for=\"Main Dishes\">\n                                Main Dishes\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" id=\"category\" value=\"Sides\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                            <label class=\"form-check-label\" for=\"Sides\">\n                                Sides\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" id=\"category\" value=\"Drinks\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                            <label class=\"form-check-label\" for=\"Drinks\">\n                                Drinks\n                            </label>\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"price\">Price</label>\n                            <input name=\"price\" type=\"number\" step=\"0.01\" class=\"form-control\" id=\"price\" placeholder=\"Enter price\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                        </div>\n\n                        <div class=\"form-group\">\n                            <label for=\"image\">Image Link</label>\n                            <input name=\"image\" type=\"text\" class=\"form-control\" id=\"image\" placeholder=\"Enter link\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"cuisine\">Cuisine</label>\n                            <input name=\"cuisine\" type=\"text\" class=\"form-control\" id=\"cuisine\" placeholder=\"Enter cuisine\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"ingredients\">Ingredients</label>\n                            <input name=\"ingredients\" type=\"text\" class=\"form-control\" id=\"ingredients\" placeholder=\"Enter ingredients, separated by commas\" required \n                                onChange={(e) => this.updateInsertField(e, true)}\n                            />\n                        </div>\n\n                        <div class=\"form-check form-check-inline\">\n                            <input name=\"vegan\" class=\"form-check-input\" type=\"checkbox\" checked={this.state.vegan} id=\"vegan\" \n                                onChange={(e) => this.updateInsertFieldCheckbox(e)}\n                            />\n                            <label class=\"form-check-label\" for=\"defaultCheck1\">\n                                Vegan\n                            </label>\n                        </div>\n                        \n                        <div class=\"form-check form-check-inline\">\n                            <input name=\"vegetarian\" class=\"form-check-input\" type=\"checkbox\" checked={this.state.vegetarian} id=\"vegetarian\" \n                                onChange={(e) => this.updateInsertFieldCheckbox(e)}\n                            />\n                            <label class=\"form-check-label\" for=\"defaultCheck2\">\n                                Vegetarian\n                            </label>\n                        </div>\n                        \n                        <div class=\"form-check form-check-inline\">\n                            <input name=\"glutenFree\" class=\"form-check-input\" type=\"checkbox\" checked={this.state.glutenFree} id=\"glutenFree\" \n                                onChange={(e) => this.updateInsertFieldCheckbox(e)}\n                            />\n                            <label class=\"form-check-label\" for=\"defaultCheck3\">\n                                Gluten Free\n                            </label>\n                        </div>\n                        <Modal.Footer>\n                            <Button variant=\"secondary\" onClick={() => this.setState({\n                                insertItem: {\n                                    vegan: false,\n                                    vegetarian: false,\n                                    glutenFree: false\n                                },\n                                renderAddItems: false\n                            })}>\n                                Close\n                            </Button>\n                            <Button variant=\"primary\" type=\"submit\" onClick={() => this.insertItem()}>\n                                Save Changes\n                            </Button>\n                        </Modal.Footer>\n                    </form>\n                </Modal.Body>\n            </Modal>\n        )\n    }\n\n    //This modal renders when the user clicks on the \"delete\" button\n    //Allows the admin user to delete an item from the database\n    deleteItemModal() {\n        const featuredCategories = [\"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\n\n        return (\n            <Modal show={this.state.renderDeleteItems} onHide={() => this.setState({renderDeleteItems: false})} backdrop='static'>\n                <Modal.Header closeButton>\n                    <Modal.Title>Delete items</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <div>\n                        {featuredCategories.map((category, ind) => (\n                            <div>\n                                <h6>{category}</h6>\n                                <div className=\"list-group\">\n                                    {this.state.getItemsArray.map((item, ind) => {\n                                        if(item.category === category) {\n                                            return (\n                                                <div>\n                                                    <input type=\"checkbox\" checked={this.state.deleteItemsArray[item._id]} \n                                                        onChange={(e) => {\n                                                            let itemList = this.state.deleteItemsArray;\n                                                            if(itemList.filter(e => e._id === item._id).length > 0) {\n                                                                itemList = itemList.filter(e => e._id !== item._id)\n                                                            } else {\n                                                                itemList.push(item);\n                                                            }\n\n                                                            this.setState({\n                                                                deleteItemsArray: itemList\n                                                            });\n                                                        }}\n                                                    />\n                                                    <label>Delete {item.name}</label>\n                                                </div>\n                                            )\n                                        }\n                                    })}\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </Modal.Body>\n                \n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={() => {\n                        const getList = this.state.deleteItemsArray;\n                        const length = getList.length;\n                        for(let i = 0; i < length; i++ ) { \n                            this.deleteItem(this.state.deleteItemsArray[i]); \n                        }\n\n                        this.setState({ \n                            renderDeleteItems: false,\n                            deleteItemsArray: []\n                        })\n                    }}\n                        disabled={this.state.deleteItemsArray.length === 0}>\n                        Delete Item(s)\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        )\n    }\n\n    render() {\n      return (\n          <div>\n            {/* The navbar on top of the page */}\n              <Navbar currentPage=\"admin\"/>\n\n              {/* This is the contents on the admin page */}\n              <div class=\"admin-section\">\n                    <div class=\"col-12\">\n                        <h2 class=\"admin-title\">Admin Panel</h2>\n                        <p>Please use this page to edit what is displayed on the website to customers.</p>\n                    </div>\n\n                    <br />\n\n                    {/* <div class=\"col-12\">\n                        <h2 class=\"admin-title\">Orders</h2>\n                        <p>View placed orders and mark them as fulfilled.</p>\n                        <a class=\"btn btn-primary\" href=\"/orders\" role=\"button\">Orders</a>\n                    </div> */}\n\n                    <br />\n\n                    <div class=\"col-12\">\n                        <h2 class=\"admin-title\">Menu Items</h2>\n                        <p>Adjust what items are on the website.</p>\n                        <Button onClick={() => this.setState({renderAddItems: true})}>\n                            Add\n                        </Button>\n                        <Button onClick={() => this.setState({renderEditItems: true})}>\n                            Edit\n                        </Button>\n                        <Button onClick={() => this.setState({renderDeleteItems: true})}>\n                            Delete\n                        </Button>\n                    </div>\n\n                    <br />\n\n                    <div class=\"col-12\">\n                        <h2 class=\"admin-title\">Featured Item</h2>\n                        <p>Choose the featured item to display at the top of the site.</p>\n                        <Button onClick={() => this.setState({renderFeaturedItems: true})} >Edit</Button>\n                    </div>\n                </div>       \n\n                {/* These are the modals used on the page. They will conditionally render */}\n                {this.featuredItemModal()}\n                {this.editItemModal()}\n                {this.addItemModal()}\n                {this.deleteItemModal()}\n                {this.editItemDetails(this.state.itemName)}\n          </div>\n\n      )\n    }\n  }\n  \n  export default Admin;","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuFilterButton.js",["173","174"],"import React, { Component} from 'react';\nimport '../css/MenuFilterButton.css';\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nconst MenuFilterButton = ( {categoryName, changeVisibleCategories} ) => {\n\n    return (\n      <button \n        className=\"menu-filter-button\" \n        onClick={() => changeVisibleCategories(categoryName)}>\n        {categoryName} \n      </button>\n    )\n  }\n  \n  export default MenuFilterButton;","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Orders.js",["175","176"],"import React from 'react';\nimport NavBar from '../components/NavBar';\nimport OrdersTable from '../components/OrdersTable';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles } from '@material-ui/core/styles';\nimport '../css/Orders.css';\n\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nexport default class Orders extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            getOrders: [],\n            Loading: true,\n        }\n        this.formatTime = this.formatTime.bind(this);\n    }\n\n    formatTime(time) {\n        time = time.split(':'); // convert to array\n\n        // fetch\n        let hours = Number(time[0]);\n        let minutes = Number(time[1]);\n\n        // calculate\n        let timeValue;\n\n        if (hours > 0 && hours <= 12) {\n        timeValue = \"\" + hours;\n        } else if (hours > 12) {\n        timeValue = \"\" + (hours - 12);\n        } else if (hours == 0) {\n        timeValue = \"12\";\n        }\n        \n        timeValue += (minutes < 10) ? \":0\" + minutes : \":\" + minutes;  // get minutes\n        timeValue += (hours >= 12) ? \" P.M.\" : \" A.M.\";  // get AM/PM\n\n        // show  \n        return timeValue;\n    }\n\n    componentDidMount() {\n        fetch(`${BACKEND_URL}order`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(res => res.json())\n        .then(data => {\n            const getOrdersList = data.orders;\n            const length = getOrdersList.length\n            let createArr = [];\n\n            for(let i = 0; i < length; i++) {\n                let arr = [];\n                //Get the date from the database\n                let getDate = new Date(getOrdersList[i].Pickup);\n                const formatCurrtime = this.formatTime(getDate.getHours() + \":\" + getDate.getMinutes() + \":\" + getDate.getSeconds());\n                const month = getDate.getMonth()+1 >= 10 ? getDate.getMonth()+1 : (\"0\" + (getDate.getMonth() + 1)).slice(-2);\n                const date = month + \"/\" + getDate.getDate() + \"/\" + getDate.getFullYear();\n\n                //Format for the submission date\n                let getDateSubmission = new Date(getOrdersList[i].createdAt);\n                const formatCurrtimeSubmission = this.formatTime(getDateSubmission.getHours() + \":\" + getDateSubmission.getMinutes() + \":\" + getDateSubmission.getSeconds());\n                const monthSubmission = getDate.getMonth()+1 >= 10 ? getDate.getMonth()+1 : (\"0\" + (getDate.getMonth() + 1)).slice(-2);\n                const dateSubmission = monthSubmission + \"/\" + getDateSubmission.getDate() + \"/\" + getDateSubmission.getFullYear();\n\n                arr.push(date + `\\n${formatCurrtime}`);\n                arr.push(getOrdersList[i].Customer.Name);\n                arr.push(getOrdersList[i].Customer.Email);\n                arr.push(getOrdersList[i].Customer.Phone);\n                arr.push(getOrdersList[i].PayPal.Amount);\n                arr.push(getOrdersList[i].Order);\n                arr.push(dateSubmission + `\\n${formatCurrtimeSubmission}`)\n\n                createArr.push(arr);\n            }\n            this.setState({ getOrders: createArr, Loading: false})\n        })\n        .catch(err => console.log(err));\n    }\n    \n    render() {\n        return (\n            <div className=\"orders-page-container\">\n                <NavBar />\n                {this.state.Loading ? \n                <div className=\"spinner-orders-page\">\n                    <CircularProgress />\n                </div> : \n                <div className=\"orders-table\">\n                    <div className=\"justify-table-center\">\n                        <OrdersTable orders={this.state.getOrders} />\n                    </div>\n                </div>\n                }\n            </div>\n        )\n    }\n}","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/About.js",["177"],"import React, { Component} from 'react';\nimport Navbar from '../components/NavBar';\nimport PayPal from '../components/PayPal';\n\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nclass About extends Component {\n\n    // For paypal payment handling, we assume the cart passed into the PayPal object looks like...\n    // {\n    //     item_total: \"\",\n    //     tax_total: \"\",\n    //     items: [\n    //         {\n    //             name: \"\",\n    //             quantity: \"\", \n    //             size: \"\", (Individual or Family)\n    //             addons: [\"\", \"\"], (Sides, gluten free)\n    //             individual_price: \"\", (price per item)\n    //             individual_tax: \"\", (tax per item)\n    //         },\n\n    //     ]\n    // }\n    \n    render (){\n    const cart = {\n        cart_total: \"15.00\",\n        item_total: \"12.00\",\n        tax_total: \"3.00\",\n        items: [\n            {\n                name: \"Food 1\",\n                quantity: \"2\",\n                size: \"Individual\",\n                addons: [\"Gluten Free\"],\n                individual_price: \"6.00\",\n                individual_tax: \"1.50\",\n            },\n        ],\n        pickup_date: \"2021-02-04\"\n    }\n      return (\n\n          <div>\n              <Navbar currentPage=\"about\"/>\n              <div style={{marginTop: \"30px\"}}>\n                  This is the About Page.\n              </div>\n              <PayPal cart={cart}/>           \n          </div>\n\n      )\n    }\n  }\n  \n  export default About;","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuFilter.js",["178","179"],{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"180","replacedBy":"184"},{"ruleId":"182","replacedBy":"185"},{"ruleId":"186","severity":1,"message":"187","line":1,"column":17,"nodeType":"188","messageId":"189","endLine":1,"endColumn":26},{"ruleId":"186","severity":1,"message":"190","line":4,"column":7,"nodeType":"188","messageId":"189","endLine":4,"endColumn":18},{"ruleId":"180","replacedBy":"191"},{"ruleId":"182","replacedBy":"192"},{"ruleId":"186","severity":1,"message":"193","line":3,"column":7,"nodeType":"188","messageId":"189","endLine":3,"endColumn":13},{"ruleId":"194","severity":1,"message":"195","line":9,"column":11,"nodeType":"196","endLine":9,"endColumn":28},{"ruleId":"186","severity":1,"message":"190","line":6,"column":7,"nodeType":"188","messageId":"189","endLine":6,"endColumn":18},{"ruleId":"186","severity":1,"message":"187","line":1,"column":17,"nodeType":"188","messageId":"189","endLine":1,"endColumn":26},{"ruleId":"186","severity":1,"message":"190","line":6,"column":7,"nodeType":"188","messageId":"189","endLine":6,"endColumn":18},{"ruleId":"186","severity":1,"message":"197","line":1,"column":17,"nodeType":"188","messageId":"189","endLine":1,"endColumn":25},{"ruleId":"186","severity":1,"message":"190","line":6,"column":7,"nodeType":"188","messageId":"189","endLine":6,"endColumn":18},{"ruleId":"198","severity":1,"message":"199","line":15,"column":74,"nodeType":"200","endLine":15,"endColumn":83},{"ruleId":"186","severity":1,"message":"197","line":1,"column":28,"nodeType":"188","messageId":"189","endLine":1,"endColumn":36},{"ruleId":"186","severity":1,"message":"201","line":7,"column":8,"nodeType":"188","messageId":"189","endLine":7,"endColumn":21},{"ruleId":"186","severity":1,"message":"190","line":10,"column":7,"nodeType":"188","messageId":"189","endLine":10,"endColumn":18},{"ruleId":"180","replacedBy":"202"},{"ruleId":"182","replacedBy":"203"},{"ruleId":"204","severity":1,"message":"205","line":195,"column":8,"nodeType":"206","endLine":195,"endColumn":14,"suggestions":"207"},{"ruleId":"186","severity":1,"message":"201","line":4,"column":8,"nodeType":"188","messageId":"189","endLine":4,"endColumn":21},{"ruleId":"186","severity":1,"message":"193","line":6,"column":7,"nodeType":"188","messageId":"189","endLine":6,"endColumn":13},{"ruleId":"208","severity":1,"message":"209","line":30,"column":21,"nodeType":"210","messageId":"211","endLine":30,"endColumn":23},{"ruleId":"208","severity":1,"message":"209","line":39,"column":35,"nodeType":"210","messageId":"211","endLine":39,"endColumn":37},{"ruleId":"186","severity":1,"message":"212","line":70,"column":9,"nodeType":"188","messageId":"189","endLine":70,"endColumn":13},{"ruleId":"213","severity":1,"message":"214","line":10,"column":5,"nodeType":"215","messageId":"216","endLine":10,"endColumn":47},{"ruleId":"213","severity":1,"message":"214","line":13,"column":5,"nodeType":"215","messageId":"216","endLine":13,"endColumn":66},{"ruleId":"213","severity":1,"message":"214","line":17,"column":5,"nodeType":"215","messageId":"216","endLine":17,"endColumn":59},{"ruleId":"213","severity":1,"message":"214","line":24,"column":5,"nodeType":"215","messageId":"216","endLine":24,"endColumn":109},{"ruleId":"213","severity":1,"message":"214","line":33,"column":5,"nodeType":"215","messageId":"216","endLine":33,"endColumn":74},{"ruleId":"186","severity":1,"message":"217","line":1,"column":28,"nodeType":"188","messageId":"189","endLine":1,"endColumn":37},{"ruleId":"218","severity":1,"message":"219","line":24,"column":21,"nodeType":"220","endLine":24,"endColumn":31},{"ruleId":"218","severity":1,"message":"219","line":25,"column":21,"nodeType":"220","endLine":25,"endColumn":31},{"ruleId":"218","severity":1,"message":"219","line":26,"column":21,"nodeType":"220","endLine":26,"endColumn":31},{"ruleId":"218","severity":1,"message":"219","line":27,"column":21,"nodeType":"220","endLine":27,"endColumn":31},{"ruleId":"186","severity":1,"message":"221","line":12,"column":7,"nodeType":"188","messageId":"189","endLine":12,"endColumn":11},{"ruleId":"208","severity":1,"message":"209","line":21,"column":13,"nodeType":"210","messageId":"211","endLine":21,"endColumn":15},{"ruleId":"208","severity":1,"message":"209","line":26,"column":18,"nodeType":"210","messageId":"211","endLine":26,"endColumn":20},{"ruleId":"194","severity":1,"message":"195","line":47,"column":11,"nodeType":"196","endLine":47,"endColumn":44},{"ruleId":"186","severity":1,"message":"190","line":7,"column":7,"nodeType":"188","messageId":"189","endLine":7,"endColumn":18},{"ruleId":"222","severity":1,"message":"223","line":11,"column":46,"nodeType":"224","messageId":"225","endLine":11,"endColumn":57},{"ruleId":"208","severity":1,"message":"226","line":24,"column":26,"nodeType":"210","messageId":"211","endLine":24,"endColumn":28},{"ruleId":"208","severity":1,"message":"209","line":24,"column":67,"nodeType":"210","messageId":"211","endLine":24,"endColumn":69},{"ruleId":"204","severity":1,"message":"227","line":39,"column":6,"nodeType":"206","endLine":39,"endColumn":20,"suggestions":"228"},{"ruleId":"229","severity":1,"message":"230","line":199,"column":79,"nodeType":"231","messageId":"232","endLine":199,"endColumn":81},{"ruleId":"229","severity":1,"message":"230","line":253,"column":79,"nodeType":"231","messageId":"232","endLine":253,"endColumn":81},{"ruleId":"208","severity":1,"message":"209","line":286,"column":27,"nodeType":"210","messageId":"211","endLine":286,"endColumn":29},{"ruleId":"198","severity":1,"message":"199","line":331,"column":90,"nodeType":"200","endLine":331,"endColumn":105},{"ruleId":"198","severity":1,"message":"199","line":340,"column":90,"nodeType":"200","endLine":340,"endColumn":105},{"ruleId":"198","severity":1,"message":"199","line":349,"column":90,"nodeType":"200","endLine":349,"endColumn":105},{"ruleId":"198","severity":1,"message":"199","line":358,"column":90,"nodeType":"200","endLine":358,"endColumn":105},{"ruleId":"198","severity":1,"message":"199","line":494,"column":90,"nodeType":"200","endLine":494,"endColumn":105},{"ruleId":"198","severity":1,"message":"199","line":503,"column":90,"nodeType":"200","endLine":503,"endColumn":105},{"ruleId":"198","severity":1,"message":"199","line":512,"column":90,"nodeType":"200","endLine":512,"endColumn":105},{"ruleId":"198","severity":1,"message":"199","line":521,"column":90,"nodeType":"200","endLine":521,"endColumn":105},{"ruleId":"229","severity":1,"message":"230","line":621,"column":79,"nodeType":"231","messageId":"232","endLine":621,"endColumn":81},{"ruleId":"186","severity":1,"message":"187","line":1,"column":17,"nodeType":"188","messageId":"189","endLine":1,"endColumn":26},{"ruleId":"186","severity":1,"message":"190","line":5,"column":7,"nodeType":"188","messageId":"189","endLine":5,"endColumn":18},{"ruleId":"186","severity":1,"message":"233","line":5,"column":10,"nodeType":"188","messageId":"189","endLine":5,"endColumn":20},{"ruleId":"208","severity":1,"message":"209","line":37,"column":26,"nodeType":"210","messageId":"211","endLine":37,"endColumn":28},{"ruleId":"186","severity":1,"message":"190","line":7,"column":7,"nodeType":"188","messageId":"189","endLine":7,"endColumn":18},{"ruleId":"186","severity":1,"message":"187","line":1,"column":17,"nodeType":"188","messageId":"189","endLine":1,"endColumn":26},{"ruleId":"186","severity":1,"message":"190","line":6,"column":7,"nodeType":"188","messageId":"189","endLine":6,"endColumn":18},"no-native-reassign",["234"],"no-negated-in-lhs",["235"],["234"],["235"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'BACKEND_URL' is assigned a value but never used.",["234"],["235"],"'config' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useState' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'MenuItemPopup' is defined but never used.",["234"],["235"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'history' and 'paypalOrderObject'. Either include them or remove the dependency array.","ArrayExpression",["236"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'json' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'useEffect' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'item' is assigned a value but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'menuItemValues'. Either include it or remove the dependency array.",["237"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'makeStyles' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},"Update the dependencies array to be: [cart, history, paypalOrderObject]",{"range":"242","text":"243"},"Update the dependencies array to be: [categoryName, menuItemValues]",{"range":"244","text":"245"},[7377,7383],"[cart, history, paypalOrderObject]",[1319,1333],"[categoryName, menuItemValues]"]