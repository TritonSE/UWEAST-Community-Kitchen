[{"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/index.js":"1","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/reportWebVitals.js":"2","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/App.js":"3","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Admin.js":"4","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/About.js":"5","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Login.js":"6","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Orders.js":"7","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/ResetPassword.js":"8","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Register.js":"9","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Menu.js":"10","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Contact.js":"11","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ChangeEmailScreen.js":"12","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/PayPal.js":"13","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/config.js":"14","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ForgotPasswordDialogue.js":"15","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/util/auth.js":"16","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/OrdersTable.js":"17","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/AdminMenuItems.js":"18","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/NavBar.js":"19","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/CartPreview.js":"20","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/SearchSection.js":"21","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/Banner.js":"22","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuSection.js":"23","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ContactMap.js":"24","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ContactForm.js":"25","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/OrdersTableColumns.js":"26","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/SearchBar.js":"27","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItems.js":"28","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuFilterButton.js":"29","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuFilter.js":"30","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/util/OrdersTableFunctions.js":"31","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItemCategory.js":"32","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItemPopup.js":"33","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItem.js":"34","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/util/Auth.js":"35"},{"size":500,"mtime":1613449600425,"results":"36","hashOfConfig":"37"},{"size":362,"mtime":1613449600437,"results":"38","hashOfConfig":"37"},{"size":1355,"mtime":1613449600392,"results":"39","hashOfConfig":"37"},{"size":4495,"mtime":1613451715034,"results":"40","hashOfConfig":"37"},{"size":1483,"mtime":1613451703298,"results":"41","hashOfConfig":"37"},{"size":6139,"mtime":1613449633251,"results":"42","hashOfConfig":"37"},{"size":4548,"mtime":1613449600434,"results":"43","hashOfConfig":"37"},{"size":7584,"mtime":1613449633253,"results":"44","hashOfConfig":"37"},{"size":7842,"mtime":1613449633252,"results":"45","hashOfConfig":"37"},{"size":1563,"mtime":1613451749126,"results":"46","hashOfConfig":"37"},{"size":674,"mtime":1613451720518,"results":"47","hashOfConfig":"37"},{"size":2518,"mtime":1613449600399,"results":"48","hashOfConfig":"37"},{"size":7471,"mtime":1613449600414,"results":"49","hashOfConfig":"37"},{"size":297,"mtime":1613449600417,"results":"50","hashOfConfig":"37"},{"size":3704,"mtime":1613449600401,"results":"51","hashOfConfig":"37"},{"size":1378,"mtime":1613449633254,"results":"52","hashOfConfig":"37"},{"size":3867,"mtime":1613449600412,"results":"53","hashOfConfig":"37"},{"size":15295,"mtime":1613449600396,"results":"54","hashOfConfig":"37"},{"size":5137,"mtime":1613451904630,"results":"55","hashOfConfig":"37"},{"size":3122,"mtime":1613449600397,"results":"56","hashOfConfig":"37"},{"size":322,"mtime":1613449600416,"results":"57","hashOfConfig":"37"},{"size":360,"mtime":1613449600397,"results":"58","hashOfConfig":"37"},{"size":3963,"mtime":1613449600409,"results":"59","hashOfConfig":"37"},{"size":2179,"mtime":1613449600401,"results":"60","hashOfConfig":"37"},{"size":2583,"mtime":1613449600400,"results":"61","hashOfConfig":"37"},{"size":3384,"mtime":1613449600413,"results":"62","hashOfConfig":"37"},{"size":300,"mtime":1613449600415,"results":"63","hashOfConfig":"37"},{"size":689,"mtime":1613449600408,"results":"64","hashOfConfig":"37"},{"size":700,"mtime":1613449600403,"results":"65","hashOfConfig":"37"},{"size":678,"mtime":1613449600402,"results":"66","hashOfConfig":"37"},{"size":5513,"mtime":1613449600439,"results":"67","hashOfConfig":"37"},{"size":2996,"mtime":1613449600404,"results":"68","hashOfConfig":"37"},{"size":9826,"mtime":1613449600406,"results":"69","hashOfConfig":"37"},{"size":757,"mtime":1613449600403,"results":"70","hashOfConfig":"37"},{"size":1378,"mtime":1613449934228,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"a4pre7",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"74"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"74"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"74"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"158"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"74"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/index.js",[],["164","165"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/reportWebVitals.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/App.js",["166"],"import './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport Menu from './pages/Menu';\nimport About from './pages/About';\nimport Admin from './pages/Admin';\nimport Contact from './pages/Contact';\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport ResetPassword from './pages/ResetPassword';\nimport Orders from './pages/Orders';\n\nfunction App() {\n  return (\n    <Router>\n      {/* Switch gurantees that a URL can match to only one route*/}\n      <Switch>\n        {/* Login Page */}\n        <Route exact path=\"/login\">\n          <Login/>\n        </Route>\n        {/* Register Page */}\n        <Route exact path=\"/register\">\n          <Register/>\n        </Route>\n        {/* Reset Password Page */}\n        <Route exact path=\"/reset-password\">\n          <ResetPassword/>\n        </Route>\n        {/* About Page */}\n        <Route exact path=\"/about\">\n          <About/>\n        </Route>\n        {/* Contact Page */}\n        <Route exact path=\"/contact\">\n          <Contact/>\n        </Route>\n        {/* Admin Page */}\n        <Route exact path=\"/admin\">\n          <Admin/>\n        </Route>\n        {/* Any other URL is automatically matched to Menu Page */}\n        <Route path=\"/\">\n          <Menu/>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Admin.js",["167"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/About.js",["168"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Login.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Orders.js",["169"],"import React from 'react';\nimport NavBar from '../components/NavBar';\nimport OrdersTable from '../components/OrdersTable';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport '../css/Orders.css';\n\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nexport default class Orders extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            getOrders: [],\n            Loading: true,\n        }\n\n        this.formatTime = this.formatTime.bind(this);\n        this.formatDate = this.formatDate.bind(this);\n        this.formatArray = this.formatArray.bind(this);\n    }\n\n    /**\n     * Formats the data from the fetch() call into the array\n     * @param {Object} list \n     * @param {String} date \n     * @param {String} formatCurrTime \n     * @param {String} dateSubmission \n     * @param {String} formatCurrTimeSubmission \n     */\n    formatArray(list, date, formatCurrTime, dateSubmission, formatCurrTimeSubmission) {\n        let val = formatCurrTime;\n        let val2 = formatCurrTimeSubmission;\n\n        const dateOne = date + `\\n${val}`;\n        const dateTwo = dateSubmission + `\\n${val2}`;\n        return [dateOne, list.Customer.Name, list.Customer.Email, list.Customer.Phone, \n            list.PayPal.Amount, list.Order, dateTwo, list.isCompleted ? \"Completed Orders\" : \"Pending Orders\", \n            list._id];\n    }\n\n    /**\n     * Formats the time in the HH:MM (P.M. OR A.M.)\n     * @param {String} time \n     */\n    formatTime(time) {\n        time = time.split(':'); // convert to array\n        \n        let hours = Number(time[0]);\n        let minutes = Number(time[1]);\n        let timeValue;\n\n        if (hours > 0 && hours <= 12) timeValue = \"\" + hours; \n        else if (hours > 12) timeValue = \"\" + (hours - 12);\n        else if (hours === 0) timeValue = \"12\";\n        \n        timeValue += (minutes < 10) ? \":0\" + minutes : \":\" + minutes;  // get minutes\n        timeValue += (hours >= 12) ? \" P.M.\" : \" A.M.\";  // get AM/PM\n\n        return timeValue;\n    }\n\n    /**\n     * Formats the date to be in the MM/DD/YYYY format\n     * @param {String} getDate \n     */\n    formatDate(getDate) {\n        const monthSubmission = getDate.getMonth()+1 >= 10 ? getDate.getMonth()+1 : (\"0\" + (getDate.getMonth() + 1)).slice(-2);\n        const dateSubmission = monthSubmission + \"/\" + getDate.getDate() + \"/\" + getDate.getFullYear();   \n        return dateSubmission \n    }\n\n    /**\n     * Get all the orders from the database\n     */\n    componentDidMount() {\n        fetch(`${BACKEND_URL}order`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(res => res.json())\n        .then(data => {\n            const getOrdersList = data.orders;\n            const length = getOrdersList.length\n            let createArr = [];\n\n            for(let i = 0; i < length; i++) {\n                //Get the date from the database\n                let getDate = new Date(getOrdersList[i].Pickup);\n                const formatCurrtime = this.formatTime(getDate.getHours() + \":\" + getDate.getMinutes() + \":\" + getDate.getSeconds());\n                const date = this.formatDate(getDate);\n\n                //Format for the submission date\n                let getDateSubmission = new Date(getOrdersList[i].createdAt);\n                const formatCurrtimeSubmission = this.formatTime(getDateSubmission.getHours() + \":\" + getDateSubmission.getMinutes() + \":\" + getDateSubmission.getSeconds());\n                const dateSubmission = this.formatDate(getDateSubmission);\n\n                const formatedArray = this.formatArray(getOrdersList[i], date, formatCurrtime, dateSubmission, formatCurrtimeSubmission)\n                createArr.push(formatedArray);\n            }\n            this.setState({ getOrders: createArr, Loading: false})\n        })\n        .catch(err => console.log(err));\n    }\n    \n    render() {\n        return (\n            <div className=\"orders-page-container\">\n                {/* Render a progress spinner to show it is loading */}\n                {this.state.Loading ? \n                <div className=\"spinner-orders-page\">\n                    <CircularProgress />\n                </div> : \n                <div className=\"orders-table\">\n                    <div className=\"justify-table-center\">\n                        <OrdersTable orders={this.state.getOrders} />\n                    </div>\n                </div>\n                }\n            </div>\n        )\n    }\n}","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/ResetPassword.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Register.js",["170"],"import React from 'react';\nimport { Link, Redirect, useHistory } from 'react-router-dom';\nimport { \n  TextField, Button, Grid, \n  Snackbar, Typography \n} from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { isAuthenticated, setJWT, setUser } from '../util/auth';\nimport Navbar from '../components/NavBar';\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nconst useStyles = makeStyles((theme) => ({\n\n  centered: {\n    textAlign: 'center'\n  },\n  form: {\n    //Input Field - General Layout\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '95%'\n    },\n    //Input Field - Label Layout \n    '& .MuiFormLabel-root': {\n        color: 'black',\n      },\n      //Input Field - Border Layout \n    '& .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline': {\n        border: '1px solid black'\n    },\n    '& .MuiTypography-root': {\n      margin: theme.spacing(1),\n      width: '100%'\n    },\n\n    '& .MuiButton-root': {\n      margin: theme.spacing(3),\n      color: 'black',\n      background: '#F9CE1D',\n      width:'30%'\n    }\n  },\n  title: {\n    margin: theme.spacing(2),\n    textAlign: 'center'\n  }\n}));\n\nexport default function Register() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [state, setState] = React.useState({\n    email: '',\n    password: '',\n    passwordConfirmation: '',\n    secret: '',\n    snack: {\n      message: '',\n      open: false\n    },\n    form_disabled: false\n  });\n\n  // Updates given state with given value \n  const handleChange = (prop) => (event) => {\n    setState({ ...state, [prop]: event.target.value });\n  };\n\n  // Handles submission of the form (button click)\n  // Validates form data for completion/length, making a backend request to Users DB for secret key autentication + \n  // email uniqueness. If register succeeds, user is redirected to admin page and added to user DB. Otherwise, an error message appears. \n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setState({ ...state, form_disabled: true });\n\n    const submission = {\n      email: state.email,\n      password: state.password,\n      secret: state.secret\n    };\n\n    //Check if any field is empty\n    if (state.email === '' || state.password === '' || state.secret === ''){\n        setState({...state, form_disabled: false, snack: {message: 'Please fill out all required fields.', open: true}});\n        return;\n    }\n    //Check Password Length\n    if (submission.password.length < 6) {\n      setState({...state, form_disabled: false, snack: {message: 'Password must be at least 6 characters long.', open: true}});\n      return;\n    }\n\n    //Check Passwords Match\n    if (state.password !== state.passwordConfirmation) {\n      setState({...state, form_disabled: false, snack: {message: 'Passwords Do Not Match.', open: true}});\n      return;\n    }\n\n    try {\n        //Attempt to register with given credentials \n      const response = await fetch(`${BACKEND_URL}user/register`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(submission)\n      });\n\n      //Successful Registration\n      if (response.ok) {\n        const json = await response.json();\n        setJWT(json.token);\n        setUser(json.email);\n        history.push(\"/admin\");\n      }\n      //Invalid Credentials \n      else if (response.status === 401) {\n        setState({...state, form_disabled: false, snack: {message: 'Could not register account: Invalid Secret Key!', open: true}});\n      }\n       //Duplicate User \n      else if (response.status === 409) {\n        setState({...state, form_disabled: false, snack: {message: 'Could not register account: Email already in use!', open: true}});\n      }\n      //Any other server response\n      else {\n        const text = await response.text();\n        setState({...state, form_disabled: false, snack: {message: `Could not register account: ${text}`, open: true}});\n      }\n    } \n    //General Error\n    catch (error) {\n      setState({...state, form_disabled: false, snack: {message: `An error occurred: ${error.message}`, open: true}});\n    }\n  };\n\n  //Error Message Display: Auto close itself by updating its states\n  const handleSnackClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setState({...state, snack: {...state.snack, open: false}});\n  };\n\n  //If user is already logged in, then redirect to Admin Page. Else display Register page. \n  return isAuthenticated() ? <Redirect to=\"/admin\"/> : ( \n      <div>\n          <Navbar/>\n           <Grid\n                container\n                spacing={0}\n                alignItems=\"center\"\n                justify=\"center\"\n                style={{position: \"absolute\", top:\"15%\"}}\n                >\n                <Grid item md={6} xs={12}>\n                <Box border={8} borderColor=\"#F9CE1D\" style={{padding: \"2vw\"}}>\n                 \n                    <Typography variant=\"h4\" className={classes.title}>\n                    Register New Account\n                    </Typography>\n                    <form className={classes.form} onSubmit={handleSubmit}>\n                    <TextField label='Email' variant='outlined' type='email' onChange={handleChange('email')}/>\n                    <TextField label='Password' variant='outlined' type='password' onChange={handleChange('password')}/>\n                    <TextField label='Confirm Password' variant='outlined' type='password' onChange={handleChange('passwordConfirmation')}/>\n                    <TextField label='Secret Key' variant='outlined' type='password' onChange={handleChange('secret')}/>\n                    <Link to=\"login\"><Typography>Already have an account? Sign-In</Typography></Link>\n                    <div className={classes.centered}>\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={state.form_disabled}>Register</Button>\n                    </div>\n                    </form>\n                    </Box>\n                </Grid>   \n                <Snackbar open={state.snack.open} autoHideDuration={6000} onClose={handleSnackClose} message={state.snack.message}/>\n            </Grid> \n      </div>\n   \n  )\n}","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Menu.js",["171"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Contact.js",["172","173"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ChangeEmailScreen.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/PayPal.js",["174"],"import React from 'react'\nimport { useHistory } from \"react-router-dom\";\n\n// const paypal = require(\"@paypal/checkout-server-sdk\");\n\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\n//PayPal script is located in public/index.html (contains Client ID)\nexport default function PayPal(props) {\n    const { cart } = props;\n    let history = useHistory();\n    // I assume the cart object looks like this:\n    // {\n    //     cart_total: \"\",\n    //     item_total: \"\",\n    //     tax_total: \"\",\n    //     items: [\n    //         {\n    //             name: \"\",\n    //             quantity: \"\",\n    //             size: \"\",\n    //             addons: [\"\", \"\"],\n    //             individual_price: \"\",\n    //             individual_tax: \"\",\n    //         },\n    //     ],\n    //     pickup_date: \"\"\n    // }\n    const paypalRef = React.useRef();\n    const paypalOrderObject = {\n        intent: \"CAPTURE\",\n        application_context: {\n            shipping_preference: 'NO_SHIPPING',\n        },\n        purchase_units: [{\n            description: \"Food order from UWEAST Kitchen\",\n            // Deals with pricing of the cart\n            amount: {\n                currency_code: \"USD\",\n                value: cart.cart_total,\n                breakdown: {\n                    // includes totals for items and taxes. Shipping and handling can be ignored\n                    // because the items are for pickup and handling is included in price\n                    item_total: {\n                        currency_code: \"USD\",\n                        value: cart.item_total,\n                    },\n                    tax_total: {\n                        currency_code: \"USD\",\n                        value: cart.tax_total,\n                    },\n                }\n            },\n            // Deals with the individual item entries for the order\n            items: \n            cart.items.map((item) => {\n                return {\n                    name: item.name,\n                    // Description follows the format:\n                    // Size: {size}, (Gluten Free,) (Other addons,) \n                    description: [`Size: ${item.size}`, ...item.addons].join(\", \"),\n                    unit_amount: {\n                        currency_code: \"USD\",\n                        value: item.individual_price,\n                    },\n                    tax: {\n                        currency_code: \"USD\",\n                        value: item.individual_tax,\n                    },\n                    quantity: item.quantity,\n                    category: \"PHYSICAL_GOODS\"\n                }\n            })\n        }],\n        shipping_type: 'PICKUP',\n    }\n    // THE FOLLOWING TWO METHODS ARE NOT USED. THEY WERE CREATED FOR\n    // SERVER SIDE PAYMENT INTEGRATION, BUT THIS ISN'T BEST PRACTICE,\n    // SO IT WAS NOT PURSUED. THEREFORE THESE METHODS ARE COMMENTED OUT.\n    /* const createOrder = async () => {\n        console.log(\"Creating order...\");\n        return fetch(`${BACKEND_URL}paypal/createPayment`, {\n            method: \"POST\",\n            body: JSON.stringify(paypalOrderObject),\n            headers: {\n                \"content-type\": \"application/json\"\n            }, \n        }).then((res) => {\n            if(res.ok) {\n                return res.json();\n            }\n        }).then((data) => {\n            console.log(\"finished creating order\")\n            return data.orderID; // make sure to use the same key name for order ID on the client and server\n        })\n        .catch((err) => {\n            console.log(err);\n            alert(\"Create order Error\");\n        });\n    }\n    const onApprove = async (data) => {\n        console.log(\"Authorizing order...\");\n        return fetch(`${BACKEND_URL}paypal/executePayment`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                orderID: data.orderID,\n            }),\n        }).then((res) => {\n           // handle show completion\n           console.log(\"ORDER COMPLETE!\");\n           return res.json();\n        })\n        .catch(() => {\n            alert(\"Error\");\n        }).then((details) => {\n            alert(\"Successful order!\");\n            console.log(details);\n        });\n    } */\n\n     // To show PayPal buttons once the component loads\n    React.useEffect(() => {\n        window.paypal\n        .Buttons({\n            createOrder: async(data, actions) => {\n                return actions.order.create(paypalOrderObject);\n            },\n            onApprove: async (data, actions) => {\n                return actions.order.capture().then(function(details) {\n                    // Details here includes payer name, phone number, and email.\n\n                    // create order object\n                    const orderObj = {\n                        \"Customer\": {\n                            \"Name\": details.payer.name.given_name + \" \" + details.payer.name.surname,\n                            \"Email\": details.payer.email_address,\n                            \"Phone\": details.payer.phone.phone_number.national_number\n                        },\n                        \"Pickup\": cart.pickup_date,\n                        \"PayPal\": {\n                            \"Amount\": cart.cart_total,\n                            \"transactionID\": details.id\n                        },\n                        \"Order\": \n                        cart.items.map((item) => {\n                            return {\n                                \"item\": item.name,\n                                \"quantity\": item.quantity,\n                                \"extra\": [`${item.size} size`, ...item.addons],\n                            }\n                        })\n                    }\n                    // signal email automation by calling the /autoEmails/automate route, \n                    // this will automatically add the order to the database \n                    return fetch(`${BACKEND_URL}autoEmails/automate`, {\n                        method: \"POST\",\n                        headers: {\n                            \"content-type\": \"application/json\",\n                        },\n                        body: JSON.stringify(orderObj),\n                    }).then((res) => {\n                        if(res.ok){\n                            alert('Transaction completed! You will receive a confirmation email shortly.');\n                            history.push(\"/\");\n                        } else {\n                            alert('Transaction completed, but email automation failed. You paid for your meal, and should get a confirmation from PayPal');\n                            history.push(\"/\");\n\n                        }\n                    })\n                    .catch(() => {\n                        alert(\"Error\");\n                    });\n                });\n            },\n            onCancel: () => {\n                // If the user cancels their order, send them back to the cart summary\n                // The cart summary exists at the menu page\n                console.log(\"cancel\");\n                history.push(\"/\");\n            },\n            onError: (err) => {\n                alert(\"An error occurred!\");\n                console.error(err);\n                history.push(\"/\");\n\n            },\n        })\n        .render(paypalRef.current);\n    }, [cart]);\n\n    return (\n        <div>\n            <div ref={paypalRef}/>\n        </div>\n    )\n}","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/config.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ForgotPasswordDialogue.js",["175"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Link } from 'react-router-dom';\nimport { Typography } from '@material-ui/core';\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\nexport default function FormDialog() {\n  \n  const [state, setState] = React.useState({\n    open: false,\n    email: '',\n    error:{\n      display: false,\n      message: ''\n    }\n  });\n\n  // Handles submission of the form (button click)\n  // Validates form data for valid email address (must be a user's email address). If valid, \n  // it autogenerates a random password and sends it as an email to the user. If invalid, an error is displayed. \n  const handleSend = async() => {\n      const submission = {\n          email: state.email\n      };\n\n      //Check if email field is empty\n    if (state.email === ''){\n        setState({...state, error:{display: true, message: \"Field cannot be empty!\"}})\n        return;\n    }\n    //Backend call\n    try{\n      const response = await fetch(`${BACKEND_URL}user/forgotPassword`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(submission)\n      });\n\n      //Everything went great\n      if (response.ok) {\n        alert(\"Email Successfully Sent!\");\n        handleClose();\n      } \n      //Invalid Email\n      else if(response.status == 401){\n        setState({...state, error:{display: true, message: \"Invalid Email\"}});\n      }\n      //Any Server Errors\n      else {\n            setState({...state, error:{display: true, message: \"System Error: Try Again Later\"}});\n      }\n    }\n    //General Errors\n    catch(error){\n        setState({...state, error:{display: true, message: `An error occurred: ${error.message}`}});\n    }\n\n  }\n\n  //Display pop-up\n  const handleClickOpen = () => {\n    setState({...state, email:'', open: true, error:{display: false}});\n  };\n\n  //Close pop-up\n  const handleClose = () => {\n    setState({...state, open: false, error:{display: false}});\n  };\n\n  //track the email address put in the text field\n  const handleEmailChange = (event) => {\n    setState({...state, email: event.target.value, open: true});\n  }\n\n  //Render component \n  return (\n    <div>\n      <Link onClick={handleClickOpen}><Typography>Forgot Password?</Typography></Link>\n      <Dialog open={state.open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Forgot Password?</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please enter the email address of the associated account here. An email will be sent to\n            you there containing next steps. \n          </DialogContentText>\n          <TextField\n            onChange={handleEmailChange}\n            error={state.error.display}\n            helperText={state.error.display ? state.error.message: null}\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Email Address\"\n            type=\"email\"\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleSend} color=\"primary\">\n            Send Email\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/util/auth.js",[],["176","177"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/OrdersTable.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/AdminMenuItems.js",["178"],"import React, {useState, useEffect} from 'react';\nimport {Modal, Button} from 'react-bootstrap';\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport SearchBar from \"material-ui-search-bar\";\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport '../css/AdminMenuItems.css';\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\nfunction createData(itemName, imgSource, categoryName, options, baseprice, description, id, featured) {\n  return {\n        \"itemName\": itemName, \n        \"imgSource\": imgSource,\n        \"categoryName\": categoryName, \n        \"options\": options, \n        \"basePrice\": baseprice, \n        \"description\": description,\n        \"id\": id,\n        \"isFeatured\": featured,\n    };\n}\n\n// Renders modal that asks the user if they want to remove the item from the menu\nconst deleteConfirmationModal = (deleteConfirmation, setDeleteConfirmation, itemList, setItemList, displayContent, setDisplayContent) => {\n    return (\n        <Modal \n            show={deleteConfirmation !== []} \n            onHide={() => setDeleteConfirmation([\"\", \"\"])} \n            backdrop='static'\n            style={{\"marginTop\": \"30vh\"}}\n        >\n                <Modal.Header closeButton>\n                    <Modal.Title>Delete Menu Item</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div>\n                        <p>Are you sure you want to remove {deleteConfirmation[0]} from the menu?</p>\n                    </div>\n                </Modal.Body>\n                \n                <Modal.Footer>\n                    <Button variant=\"primary\" className=\"menuAddButton\" onClick={() => {\n                        // REMOVE ITEM FROM MENU\n                        console.log(\"removing item from menu\")\n                        \n                        // Call database, remove item from menu\n                        handleRemoveByID(deleteConfirmation[1], itemList, setItemList, displayContent, setDisplayContent);\n                        setDeleteConfirmation([\"\", \"\"]);\n                    }}>\n                        Remove Item\n                    </Button>\n                    <Button variant=\"secondary\" onClick={() => {\n                        setDeleteConfirmation([\"\", \"\"]);\n                    }}>\n                        Cancel\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        );\n}\n\n// Renders table of items based on what is passed in through displayContent\nfunction menuTable(itemList, setItemList, displayContent, setDisplayContent, setDeleteConfirmation, handleFeatureChange) {\n    return (\n        <TableContainer component={Paper} className=\"menuTableContainer\">\n            <Table aria-label=\"simple table\" stickyHeader className=\"menuTable\">\n                <TableHead>\n                    <TableRow style={{\"overflow\": \"hidden\"}}>\n                        <TableCell className=\"menuTableHeaders\" width=\"5%\">Feature</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"15%\" align=\"center\">Item Image</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"15%\" align=\"left\">Item Name</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"12%\" align=\"left\">Category Name</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"12%\" align=\"left\">Size</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"12%\" align=\"left\">Base Price</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"12%\" align=\"left\">Add-ons</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"12%\" align=\"left\">Edit</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {displayContent.map((row, index) => {\n                        const bgColor = index % 2 === 0 ? \"evenrowbg\" : \"oddrowbg\";\n                        console.log(row);\n                        return (\n                            <TableRow key={row._id} className={bgColor}>\n                                <TableCell component=\"th\" scope=\"row\" className=\"menuRowText\" width=\"5%\">\n                                    <Checkbox\n                                        id={row._id + \"checkbox\"}\n                                        checked={row.isFeatured}\n                                        onChange={(e) => {\n                                            handleFeatureChange(row);\n                                        }}\n                                        name={row.itemName}\n                                        style ={{\n                                            color: \"#747474\",\n                                        }}\n                                    />\n                                </TableCell>\n                                <TableCell align=\"center\" className=\"menuRowText\" width=\"15%\">\n                                    <img src={row.imgSource} alt={row.itemName} className=\"menuItemImage\"/>\n                                </TableCell>\n                                <TableCell className=\"menuRowText\" width=\"15%\">{row.itemName}</TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"12%\">{row.categoryName}</TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"12%\">\n                                {\n                                    row.basePrice.map((v) => {return (<>{v[0]}<br /></>)})\n                                }\n                                </TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"12%\">\n                                {\n                                    row.basePrice.map((v) => <>${v[1]}<br /></>)\n                                }\n                                </TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"12%\">\n                                {\n                                    row.options.map((v) => <p>{v[1].Description}</p>)\n                                }\n                                </TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"12%\">\n                                    <IconButton>\n                                        <EditIcon style={{\"marginRight\": \"5px\"}}/>\n                                    </IconButton>\n                                    <IconButton aria-label=\"delete item\" onClick={() => setDeleteConfirmation([row.itemName, row.id])}>\n                                        <DeleteIcon style={{\"marginLeft\": \"5px\"}}/>\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                    )})}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n// handle remove based on id passed in through params\nasync function handleRemoveByID(id, itemList, setItemList, displayContent, setDisplayContent){\n    // remove from database\n    console.log(\"Removing \" + id);\n    await fetch(`${BACKEND_URL}item/remove`, {\n            method: \"DELETE\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                \"_id\": id\n            })\n        }).then(res => {\n            if(res.ok){\n                console.log(\"Remove successful!\")\n                // remove from rows\n                setItemList(itemList.filter(x => x.id !== id));\n                // remove from filtered rows\n                setDisplayContent(displayContent.filter(x => x.id !== id));\n            }\n        })\n    \n}\nexport default function AdminMenuItems (props) {\n    const [deleteConfirmation, setDeleteConfirmation] = useState([\"\", \"\"]);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [filter, setFilter] = useState(\"All\");\n    const [displayContent, setDisplayContent] = useState([]);\n    const [itemList, setItemList] = useState([]);\n    const [loaded, setLoaded] = useState(false);\n    const [checkboxUpdate, setCheckboxUpdate] = useState(\"\");\n    // Fetch all menu items to display in table\n    useEffect(() => {\n        var data = null;\n        const fetchData = async () => {\n            const res = await fetch(`${BACKEND_URL}item/`, {\n                method: \"GET\",\n                headers: {\n                    \"content-type\": \"application/json\",\n                },\n            })\n            data = await res.json();\n            console.log(data.items);\n            const rows = [];\n            data.items.forEach(element => {\n                console.log(element);\n                rows.push(\n                    createData(\n                        element.Name,\n                        element.pictureURL, \n                        element.Category, \n                        Object.entries(element.Accomodations),\n                        Object.entries(element.Prices), \n                        element.Description,\n                        element._id,\n                        element.isFeatured,\n                ));\n            });\n            setItemList(rows);\n            setDisplayContent(rows);\n            setLoaded(true);\n        }\n        \n        fetchData();\n    }, [setLoaded,])\n    // update display contents based on search term\n    const handleSearch = (searchTerm) => {\n        // Empty search term, so we want to reset the displayed items to those of the current category\n        if(searchTerm === \"\"){\n            if(filter === \"All\"){        \n                setDisplayContent(itemList); \n            }\n            else {\n                setDisplayContent(itemList.filter(x => x.categoryName === filter));\n            }\n        }\n        else{\n            // Filters the current display content to show those that contain the\n            // search term in the name AND correspond to current filter\n            if(filter === \"All\"){\n                setDisplayContent(itemList.filter(x => x.itemName.toLowerCase().includes(searchTerm.toLowerCase()))); \n            }\n            else {\n                // Filter based on search term and filter term\n                setDisplayContent(itemList.filter(x => \n                    x.itemName.toLowerCase().includes(searchTerm.toLowerCase())\n                    && x.categoryName === filter\n                )); \n            }\n        }\n    }\n    // update display contents based on filter term\n    // possible terms are: Main Dish, Appetizer, Drink, Side\n    const handleFilterChange = (filter) => {\n        // clear search\n        setSearchTerm(\"\");\n        if(filter === \"All\"){        \n            setDisplayContent(itemList); \n        }\n        else{\n            const newRows = [];\n            for(var index in itemList) { \n                if (itemList[index][\"categoryName\"] === filter){\n                    newRows.push(itemList[index]); \n                }\n            }\n            console.log(newRows)\n            setDisplayContent(newRows); \n        }\n    }\n    // Called when a set featured checkbox is clicked\n    const handleFeatureChange = async (row) => {\n        const itemID = row.id;\n        const newValue = !row.isFeatured;\n        row.isFeatured = newValue;\n        // update item's feature property in local (displayContent and itemList)\n        var itemListIndex = -1;\n        itemList.forEach((x, index) => {\n            itemListIndex = x.id === itemID ? index : itemListIndex;\n        })\n        if(itemListIndex !== -1){\n            setItemList(prev => {\n                prev[itemListIndex].isFeatured = newValue;\n                return prev;\n            })\n        }\n        var displayContentIndex = displayContent.findIndex(x => x.id === itemID);\n        if(displayContentIndex !== -1){\n            displayContent[displayContentIndex].isFeatured = newValue;\n            setDisplayContent(displayContent);\n        }\n        setCheckboxUpdate(row.itemName + \"\" + newValue);\n\n        // update item's feature property in database\n        await fetch(`${BACKEND_URL}item/feature`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                \"_id\": itemID,\n                \"isFeatured\": newValue\n            })\n        })\n    }\n    if(loaded){\n        return (  \n            <div>\n                {deleteConfirmation[0] !== \"\" && deleteConfirmationModal(deleteConfirmation, setDeleteConfirmation, itemList, setItemList, displayContent, setDisplayContent)}\n                <div className=\"aboveTableContainer\">\n                    <Button className=\"menuAddButton\">\n                        <AddCircleIcon className=\"menuAddButtonIcon\" />\n                        Add Item\n                    </Button>\n                    <div className=\"searchFilterContainer\">\n                        <Select\n                            className=\"menuFilterSelect\"\n                            id=\"item-filter-select\"\n                            defaultValue=\"All\"\n                            displayEmpty=\"false\"\n                            variant=\"outlined\"\n                            value={filter}\n                            onChange={(v) => {\n                                setFilter(v.target.value);\n                                handleFilterChange(v.target.value);\n                            }}\n                        >\n                            <MenuItem value=\"All\">All</MenuItem>\n                            <MenuItem value=\"Appetizer\">Appetizer</MenuItem>\n                            <MenuItem value=\"Main Dish\">Main Dish</MenuItem>\n                            <MenuItem value=\"Side\">Side</MenuItem>\n                            <MenuItem value=\"Drink\">Drink</MenuItem>\n                        </Select>\n                        <SearchBar\n                            className=\"menuSearchBar\"\n                            value={searchTerm}\n                            onChange={(newValue) => setSearchTerm(newValue)}\n                            onRequestSearch={() => handleSearch(searchTerm)}\n                            onCancelSearch={() => {\n                                setSearchTerm(\"\"); \n                                handleSearch(\"\");\n                            }}\n                        />\n                    </div>\n                </div>\n                {menuTable(itemList, setItemList, displayContent, setDisplayContent, setDeleteConfirmation, handleFeatureChange)}\n            </div>\n        )\n    }\n    else{\n        return (\n            <div> </div>\n        )\n    }\n}\n","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/NavBar.js",["179","180","181","182","183","184"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/CartPreview.js",["185","186","187","188","189","190"],"import React, { Component, useEffect } from 'react';\nimport {Button} from 'react-bootstrap';\nimport '../css/CartPreview.css';\n\nclass CartPreview extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: this.props.items,\n            subTotal: \"00.00\",\n            tax: \"00.00\",\n            totalPrice: \"00.00\"\n        }\n\n        this.loadItems = this.loadItems.bind(this);\n    }\n    \n    //displays items currently in the cart and updates subtotal and total\n    loadItems() {\n        return(\n            <div>\n                {this.state.items.map((item, ind) => {\n\n                    this.state.subTotal = parseFloat(this.state.subTotal) + parseFloat(item.price);\n                    this.state.subTotal = parseFloat(this.state.subTotal).toFixed(2);\n                    this.state.tax = (parseFloat(this.state.subTotal)*0.0775).toFixed(2);\n                    this.state.totalPrice = parseFloat(this.state.subTotal) + parseFloat(this.state.tax);\n                    this.state.totalPrice = parseFloat(this.state.totalPrice).toFixed(2);\n\n                    let specialInstructions = (item.instructions === \"\") ? \"\" : \", \" + item.instructions;\n                    let accommodation = (item.accommodations) ? \", \" + item.accommodations : \"\";\n\n                    let extraInfo = item.size + specialInstructions  + accommodation;\n\n                        return (\n                            <div key={ind} className=\"summary-item row\">\n                                <span className=\"thumbnail thumb-img\">{ind+1}</span>\n                                <span className=\"item-info\">{item.quantity} X {item.name}<br/>\n                                <span className=\"item-description\">{extraInfo}</span></span>\n                                <span className=\"thumbnail summary-price\">${item.price}</span>\n                                <span className=\"item-divider\"></span>\n                            </div>\n                        )\n                })}\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"cart-container\">\n                <div id=\"order-summary-div\">\n                    <div className=\"order-summary\">\n                        Order Summary\n                    </div>\n                    <div>\n                        <div className=\"fixed-scroll\">\n                            {/* loads and displays all items currently in the cart */}\n                            {this.loadItems()}\n                        </div>\n                        <div className=\"order-totals\">\n                            <br/>\n                            Subtotal: ${this.state.subTotal}<br/>\n                            Tax: ${this.state.tax}\n                        </div>\n                        <Button>Review Order</Button>\n                    </div>\n                    <div className=\"order-summary\">\n                        <span>Total Price</span><span className=\"add-price\">${this.state.totalPrice}</span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default CartPreview;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/SearchSection.js",["191","192","193"],"import React, { Component } from 'react';\nimport SearchBar from \"./SearchBar\";\nimport \"../css/SearchSection.css\";\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nconst SearchSection = () => {\n    return (\n      <div className=\"search-section\"></div>\n    );\n}\n  \nexport default SearchSection;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/Banner.js",["194","195"],"import React from 'react';\nimport MenuFilterButton from './MenuFilterButton';\nimport \"../css/Banner.css\";\nconst config = require('../config');\n\nconst MenuFilter = ( {foodCategories, changeVisibleCategories} ) => {\n    return (\n      <div className=\"banner\">\n        <p>All orders require a $20 MINIMUM</p>\n      </div>\n    )\n  }\n  \n  export default MenuFilter;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuSection.js",["196","197","198","199"],"import React, { useState } from 'react';\nimport MenuFilter from './MenuFilter';\nimport MenuItems from './MenuItems';\nimport '../css/MenuSection.css';\nconst config = require('../config');\n\n// MenuSection is responsible for managing states for most of the menu\nconst MenuSection = ({onItemAdd}) => {\n  // filterCategories populates the filter buttons\n  const filterCategories = [\"Whole Menu\", \"Featured\", \"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\n\n  // populates the menu item categories\n  const defaultCategories = [\"Featured\", \"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\n\n  // stores all the categories currently visible\n  let displayedCategories = [];\n\n  // states that are managed and passed down to components\n  const [visibleCategories, setVisibleCategories] = useState(defaultCategories);\n\n  const [toggledFilter, setToggledFilter] = useState(\"none\");\n\n  // stores whether or not the popup is currently visible\n  const [popupVisible, setPopupVisible] = useState(false);\n\n  // map with all of the data that will be displayed in the popup\n  const [popupValues, setPopupValues] = useState(new Map());\n\n  // changes visible categories when filter button is clicked\n  const changeVisibleCategories = categoryName => {\n    if(categoryName == \"Whole Menu\") {\n      displayedCategories = defaultCategories;\n    }\n    else {\n      // if the option is not \"whole menu\", a new item is added to the \n      // displayedCategories array that is then passed to be rendered\n      displayedCategories.push(categoryName);\n    }\n\n    if(displayedCategories.length == 0) {\n      displayedCategories = defaultCategories;\n    }\n    \n    // responsible for actually rendering/setting what will be visible\n    setVisibleCategories(displayedCategories);\n  }\n\n  // processes the form submitted from the popup\n  const processForm = e => {\n    // prevents page reload\n    e.preventDefault();\n\n    // gets the form data\n    var data = new FormData(e.target);\n    var object = {};\n\n    // goes through and makes an object from the FormData\n    data.forEach((value, key) => {\n        if(!Reflect.has(object, key)){\n            object[key] = value;\n            return;\n        }\n\n        if(!Array.isArray(object[key])){\n            object[key] = [object[key]];    \n        }\n        object[key].push(value);\n    });\n\n    // converts the FormData to a JSON string, optional\n    var json = JSON.stringify(object);\n\n    // calls parent function to add item from popup to cart\n    onItemAdd(object);\n    \n    // when submit button is clicked, the popup is closed\n    togglePopup();\n  }\n  \n  // closes popup when open and opens popup when closed\n  const togglePopup = (title, description, price, image, dietaryInfo, accommodations) => {\n    setPopupVisible(!popupVisible);\n    \n    // sets the values of the map based on passed-in information\n    popupValues.set(\"title\", title);\n    popupValues.set(\"description\", description);\n    popupValues.set(\"price\", price);\n    popupValues.set(\"image\", image);\n    popupValues.set(\"dietary-info\", dietaryInfo);\n    popupValues.set(\"accommodations\", accommodations);\n\n    setPopupValues(popupValues);\n  }\n\n  /**\n   * MenuSection is split into three columns:\n   * 1. filter column\n   * 2. menu column\n   * 3. cart column\n   */\n  return (\n    <div className=\"menu-section-wrapper\">\n      <div className=\"menu-section\">\n        <div className=\"menu-filter-wrapper\">\n          <MenuFilter toggledFilter={toggledFilter} setToggledFilter={setToggledFilter} foodCategories={filterCategories} changeVisibleCategories={() => changeVisibleCategories} />\n        </div>\n        <div className=\"menu-items\">\n          {/** parameters are states being passed down */}\n          <MenuItems foodCategories={visibleCategories} processForm={processForm} popupVisible={popupVisible} popupValues={popupValues} togglePopup={togglePopup}/>\n        </div>\n        <div className=\"menu-cart\">\n      </div>\n      </div>\n    </div>\n  )\n}\n\nexport default MenuSection;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ContactMap.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ContactForm.js",["200","201"],"import React from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { Snackbar} from '@material-ui/core';\n\nconst ContactForm = () => {\n\n  const [state, setState] = React.useState({\n    snack: {\n      message: '',\n      open: false\n    },\n  });\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n  \n    const formData = new FormData(e.target);\n    let data = {};\n    \n    // make FormData into a js object to pass to route\n    for(var [key, value] of formData.entries()) {\n      data[key] = value;\n    }\n  \n    try{\n  \n      const response = await fetch(\"http://localhost:9000/autoEmails/contact\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(data)\n      });\n      \n      //Successful response\n      if (response.status == 200){\n        alert(\"Message sent!\");\n        // reload window to clear input boxes \n        window.location.reload();\n        \n        //Malformed Email\n      } else if(response.status == 400) {\n        setState({...state, snack: {message: 'Invalid Email Address!', open: true}});\n\n        //System Error\n      } else {\n        setState({...state, snack: {message: 'System Error: Cannot send email!', open: true}});\n      }\n      \n      //General Error\n    } catch(error){\n      setState({...state, snack: {message: 'System Error: Cannot send email!', open: true}});\n    }\n  };\n  \n  //Error Message Display: Auto close itself by updating its states\n  const handleSnackClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setState({...state, snack: {open: false}});\n  };\n\n  return (\n    <div className=\"contact-form\">\n      <div className=\"contact-form-text\">\n      <h1>CONTACT US</h1>\n      <p>Please email us using the form below</p>\n      <form onSubmit={sendMessage}>\n        <input type=\"text\" name=\"name\" className=\"first-input contact-form-input\" placeholder=\"Your Name\" required/>\n        <br />\n        <input type=\"text\" name=\"email\" className=\"contact-form-input\" placeholder=\"Your Email\" required />\n        <br />\n        {/** automatically-resizing textarea component */}\n        <TextareaAutosize className=\"contact-form-input\" name=\"message\" placeholder=\"Your message\" maxRows={3} required />\n        <br />\n        <input type=\"submit\" className=\"contact-form-submit\" value=\"Submit\"  />\n      </form>\n      </div>\n      <Snackbar open={state.snack.open} autoHideDuration={6000} onClose={handleSnackClose} message={state.snack.message}/>\n    </div>\n  )\n}\n\nexport default ContactForm;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/OrdersTableColumns.js",["202","203"],"import 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap-daterangepicker/daterangepicker.css';\nimport '../css/Orders.css';\n\n// Import helper functions from utils\nimport {\n    renderStatus,\n    DisplayDateFilters,\n    DisplayStatusFilters,\n    updateDateFilters,\n    renderDateFilters    \n} from '../util/OrdersTableFunctions';\n\n//The column headers for the table\nconst columns = [\n    {\n      name: \"Pick up Details\",\n      options: {\n        filter: true,\n        filterType: 'custom',\n        customFilterListOptions: {\n          render: renderDateFilters,\n          update: updateDateFilters\n        },\n        filterOptions: {\n          names: [],\n          logic(date, filters) {\n            const getDate = date.split(\"\\n\")[0];\n            if (filters[0] && filters[1]) {\n              return getDate < filters[0] || getDate > filters[1];\n            } else if (filters[0]) {\n              return getDate < filters[0];\n            } else if (filters[1]) {\n              return getDate > filters[1];\n            }\n            return false;\n          },\n          display: DisplayDateFilters\n        }\n      }  \n    },\n    {\n      name: \"Name\",\n      options: {\n        filter: true,\n        filterType: 'textField'\n      }  \n    },\n    {\n      name: \"Email\",\n      options: {\n        filter: true,\n        filterType: 'textField'\n      }    \n    },\n    {\n      name: \"Phone Number\",\n      options: {\n        filter: true,\n        filterType: 'textField'\n      }  \n    },\n    {\n      name: \"Amount Paid\",\n      options: {\n        filter: false\n      }  \n    },\n    {\n      name: \"Order Description\",\n      options: {\n        display: false, \n        viewColumns: false, \n        filter: false\n      }\n    },\n    {\n      name: \"Submission Details\",\n      options: {\n        filter: true,\n        filterType: 'custom',\n        customFilterListOptions: {\n          render: renderDateFilters,\n          update: updateDateFilters\n        },\n        filterOptions: {\n          names: [],\n          logic(date, filters) {\n            const getDate = date.split(\"\\n\")[0];\n            if (filters[0] && filters[1]) {\n              return getDate < filters[0] || getDate > filters[1];\n            } else if (filters[0]) {\n              return getDate < filters[0];\n            } else if (filters[1]) {\n              return getDate > filters[1];\n            }\n            return false;\n          },\n          display: DisplayDateFilters\n        }\n      }  \n    },\n    {\n      name: \"Order Status\",\n      options: {\n        filter: true,\n        filterType: 'custom',\n        customBodyRender: renderStatus,\n        customFilterListOptions: {\n          render: (options) => {\n            if(options[0] === \"All Orders\") return [];\n            return options;\n          },\n        },\n        filterOptions: {\n          names: [\"Pending Orders\", \"Completed Orders\"],\n          logic(order, filters) {\n            if (filters[0] == \"Completed Orders\") {\n              return order === \"Pending Orders\";\n            } else if (filters[0] == \"Pending Orders\") {\n              return order === \"Completed Orders\";\n            }\n  \n            return false;\n          },\n          display: DisplayStatusFilters\n        }\n      }\n    },\n    {\n      name: \"Row ID\",\n      options: {\n        display: false, \n        viewColumns: false, \n        filter: false\n      }\n    }\n];\n\nexport { columns } ;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/SearchBar.js",["204","205"],"import React, { Component } from 'react';\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nconst SearchBar = ( {keyword, setKeyword} ) => {\n    return (\n      <input\n        key=\"searchkey\"\n        placeholder=\"search food\"\n      />\n    );\n}\n  \nexport default SearchBar;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItems.js",["206","207"],"import React from 'react';\nimport MenuItemCategory from './MenuItemCategory';\nimport '../css/MenuItems.css';\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nconst MenuItems = ({ foodCategories, processForm, popupVisible, popupValues, togglePopup }) => {\n\n  return (\n\n      <div className=\"menu-items\">\n        {/** generates categories in the menu */}\n        {foodCategories.map((categoryName, key) => {\n          return <MenuItemCategory key={key} categoryName={categoryName} key={key} processForm={processForm} popupVisible={popupVisible} popupValues={popupValues} togglePopup={togglePopup}/>\n        })}\n      </div>\n\n  )\n}\n  \n  export default MenuItems;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuFilterButton.js",["208"],"import React from 'react';\nimport '../css/MenuFilterButton.css';\n\nconst MenuFilterButton = ( {categoryName, changeVisibleCategories, toggledFilter, setToggledFilter} ) => {\n\n    function updateFilters() {\n      changeVisibleCategories(categoryName);\n      setToggledFilter(categoryName);\n    }\n\n    // logic to check whether or not the filter button should be highlighted\n    let filterMatch = (categoryName === toggledFilter) && (categoryName != \"Whole Menu\");\n\n    return (\n      <button \n        className={`menu-filter-button ${filterMatch ? \"toggled-filter\": \"\"}`}\n        onClick={() => (updateFilters())}>\n        {categoryName} \n      </button>\n    )\n  }\n  \n  export default MenuFilterButton;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuFilter.js",["209","210"],"import React, { Component} from 'react';\nimport MenuFilterButton from './MenuFilterButton';\nimport \"../css/MenuFilter.css\";\nconst config = require('../config');\n\nconst MenuFilter = ( {foodCategories, changeVisibleCategories, toggledFilter, setToggledFilter} ) => {\n    return (\n      <div className=\"menu-filter\">\n        {foodCategories.map((categoryName, key) => (\n          // generates filter buttons based on categories\n          <MenuFilterButton toggledFilter={toggledFilter} setToggledFilter={setToggledFilter} categoryName={categoryName} key={key} changeVisibleCategories={changeVisibleCategories()} />\n        ))}\n      </div>\n    )\n  }\n  \n  export default MenuFilter;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/util/OrdersTableFunctions.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItemCategory.js",["211","212","213"],"import React, { useState, useEffect} from 'react';\r\nimport '../css/MenuItemCategory.css';\r\nimport MenuItem from './MenuItem';\r\nimport MenuItemPopup from './MenuItemPopup';\r\nconst config = require('../config');\r\n\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\nconst MenuItemCategory = ({ categoryName, processForm, popupVisible, popupValues, togglePopup }) => {\r\n  // array that stores menu items for the current category\r\n  const [menuItems, setMenuItems] = useState(new Array());\r\n  const menuItemValues = [];\r\n\r\n  // useEffect() is called to get information from database\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:9000/item/\")\r\n    .then(async result => {\r\n      if (result.ok) {\r\n        const json = await result.json();\r\n\r\n        for(var i = 0; i < json.items.length; i++) {\r\n          // since \"featured\" isn't a category, we need to handle it differently\r\n          let isCategoryEqual = json.items[i].Category === categoryName;\r\n          let isFeatured = (categoryName === \"Featured\") && (json.items[i].isFeatured);\r\n\r\n          // is stored only if the category name is the same as json's category\r\n          if((json.items !== undefined) && (isCategoryEqual || isFeatured)) {\r\n            menuItemValues.push(json.items[i]);\r\n          }\r\n        }\r\n        setMenuItems(menuItemValues);\r\n      }\r\n      else {\r\n        console.log(\"error\");\r\n      }\r\n    })\r\n\r\n  /**\r\n   * sets dependency on categoryName, meaning that whenever categoryName \r\n   * changes, useEffect is called again. This is necessary so that when filters * are clicked data is actually reloaded\r\n   */\r\n  }, [categoryName]);\r\n  \r\n  return (\r\n      <>\r\n        {/** popup is created here, if it is visible it is rendered */}\r\n        {popupVisible ? <MenuItemPopup values={popupValues} togglePopup={togglePopup} processForm={processForm} /> : null}\r\n        <div className=\"menu-item-category\">\r\n          <h2> {categoryName} </h2>\r\n          <div className=\"menu-item-category-grid\">\r\n            {/** generate menu items based off of array */}\r\n            {menuItems.map((menuItem, key) => {\r\n              let title = menuItem.Name;\r\n              let image = menuItem.pictureURL;\r\n              let description = menuItem.Description;\r\n              // since some items will only have a family pricing option, we use individual as the default; if individual doesnt exist, use family instead\r\n              let price = (\"Individual\" in menuItem.Prices) ? menuItem.Prices.Individual : menuItem.Prices.Family\r\n              let accommodations = menuItem.Accomodations;\r\n              let priceOptions = menuItem.Prices;\r\n              let dietaryInfo = menuItem.dietaryInfo;\r\n\r\n              return <MenuItem title={title} image={image} price={price} description={description} togglePopup={togglePopup} key={key} dietaryInfo={dietaryInfo} priceOptions={priceOptions} accommodations={accommodations} />\r\n            })}\r\n          </div>\r\n        </div>\r\n      </>\r\n  )\r\n}\r\n\r\nexport default MenuItemCategory;\r\n","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItemPopup.js",["214","215","216","217","218","219"],"import React, { useState } from 'react';\r\nimport '../css/MenuItemPopup.css';\r\nimport plus from '../media/plus.svg';\r\nimport minus from '../media/minus.svg';\r\n\r\nconst MenuItemPopup = ({ values, togglePopup, processForm }) => {\r\n    const [quantity, setQuantity] = useState(1);\r\n    // if individual price exists, use that as default; otherwise, use family\r\n    const [currPrice, setCurrPrice] = useState((\"Individual\" in values.get(\"price\")) ? values.get(\"price\").Individual : values.get(\"price\").Family);\r\n    const [totalPrice, setTotalPrice] = useState(currPrice);\r\n    const [accommodationCost, setAccommodationCost] = useState(0);\r\n\r\n    // handles changing price and quantity states\r\n    const changeQuantity = sign => {\r\n        // everything is fixed to 2 decimal places\r\n        if(sign == \"+\") {\r\n            setQuantity(quantity + 1);\r\n            // calulates on quantity + 1 b/c state hasn't updated yet\r\n            setTotalPrice((parseFloat(accommodationCost) + currPrice * (quantity + 1)).toFixed(2));\r\n        }\r\n        else if(sign == \"-\") {\r\n            if(quantity > 1) {\r\n                setQuantity(quantity - 1);\r\n                // calulates on quantity - 1 b/c state hasn't updated yet\r\n                setTotalPrice((parseFloat(accommodationCost) + currPrice * (quantity - 1)).toFixed(2));\r\n            }\r\n        }\r\n    }\r\n\r\n    //handles toggling price additions from accommodations\r\n    const handleAccommodation = (event, price) => {\r\n        // everything is fixed to 2 decimal places\r\n        if(event.target.checked) {\r\n            // parseFloat() is necessary because otherwise they get treated like strings for addition\r\n            setAccommodationCost((parseFloat(accommodationCost) + parseFloat(price)).toFixed(2));\r\n            setTotalPrice((parseFloat(totalPrice) + parseFloat(price)).toFixed(2));\r\n        } else {\r\n            setAccommodationCost((accommodationCost - price).toFixed(2));\r\n            setTotalPrice((totalPrice - price).toFixed(2));\r\n        }\r\n    }\r\n\r\n    // helper function to render the \r\n    const renderSize = (name, price, hasBothPrices) => {\r\n        return(\r\n            /** conditionally displays family size as an \"add-on\" if both are possible */\r\n            <label className=\"choice-label\">\r\n                <input onClick={() => handleSize(price)} type=\"radio\" name=\"size\" value={name} defaultChecked={(name == \"Individual\" || !(\"Individual\" in values.get(\"price\")))} required />\r\n                <span onClick={() => handleSize(price)} className=\"label-title\">{(hasBothPrices) ? name + \" +($\" + parseFloat(price - values.get(\"price\").Individual).toFixed(2) + \")\": name}</span>\r\n            </label>\r\n        );\r\n    }\r\n    // will be used when family price is introduced to toggle between\r\n    const handleSize = (newPrice) => {\r\n        setCurrPrice(newPrice);\r\n        // currPrice has yet to update, so still using newPrice\r\n        // fix to 2 decimal places\r\n        setTotalPrice((parseFloat(accommodationCost) + newPrice * (quantity)).toFixed(2));\r\n    }\r\n\r\n    const renderAccommodations = () => {\r\n        // return nothing if there are no accommodations\r\n        if(values.get(\"accommodations\").length == 0) return;\r\n        else {\r\n            return (\r\n                /** Header */\r\n                <div className=\"section accommodations-section\">\r\n                <div className=\"section-title\">\r\n                    <h3>Accommodations</h3>\r\n                    <i>optional</i>\r\n                </div>\r\n                {/* map through and render all accommodations */}\r\n                {values.get(\"accommodations\").map((accommodation) => {\r\n                    return(\r\n                        <label className=\"choice-label\">\r\n                            <input type=\"checkbox\" name=\"accommodations\" value={accommodation.Description} id={accommodation.Description} onChange={(e) => handleAccommodation(e, accommodation.Price)} />\r\n                            <span className=\"label-title\">{accommodation.Description + \" +($\" + parseFloat(accommodation.Price).toFixed(2) + \")\"}</span>\r\n                        </label>\r\n                    );\r\n                })}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    const numDietaryInfo = () => {\r\n        const dietaryInfo = Object.entries(values.get(\"dietary-info\"));\r\n        var count = 0;\r\n        for (const [key, value] of dietaryInfo) {\r\n            if(value) count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    const renderDietaryInfo = () => {\r\n        if (numDietaryInfo() == 0) return;\r\n        else {\r\n            return (\r\n                <>\r\n                <hr/>\r\n                <p className=\"dietary-info\">\r\n                    {(values.get(\"dietary-info\").vegan) ? \"*Vegan\" : null}\r\n                    {(values.get(\"dietary-info\").vegan) ? <br/> : null}\r\n                    {(values.get(\"dietary-info\").vegetarian) ? \"*Vegetarian\" : null}\r\n                    {(values.get(\"dietary-info\").vegetarian) ? <br/> : null}\r\n                    {(values.get(\"dietary-info\").glutenFree) ? \"*Gluten-free\" : null}\r\n                </p>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/** div that fades out the background */}\r\n            <div className=\"greyout\" onClick={togglePopup}></div>\r\n            <div className=\"menu-item-popup\">\r\n                <span className=\"close-button\" onClick={togglePopup}>+</span>\r\n                <div className=\"group-popup\">\r\n\r\n                    {/** Left side with dish details */}\r\n                    <div className=\"left-popup\">\r\n                        <div className=\"popup-image\" style={{backgroundImage: \"url(\" + values.get(\"image\") + \")\", backgroundSize:\"cover\"}}>\r\n                            <div className=\"popup-image-price\"><h3>{\"$\" + parseFloat(currPrice).toFixed(2)}</h3></div>\r\n                        </div>\r\n                        <div className=\"popup-item-info\">\r\n                            <h3 className=\"title-popup\">{values.get(\"title\")}</h3>\r\n                            <p className=\"desc-popup\">{values.get(\"description\")}</p>\r\n                            {renderDietaryInfo()}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/** right side with order options */}\r\n                    <div className=\"right-popup\">\r\n                        <form onSubmit={processForm} id=\"popup-form\">\r\n\r\n                            {/** sizing options */}\r\n                            <div className=\"section size-section\">\r\n                                <div className=\"section-title\">\r\n                                    <h3>Choose Size</h3>\r\n                                    <i>required</i>\r\n                                </div>\r\n                                {/** checks to ensure individual/family sizes exist; conditionally displays family size as an \"add-on\" if both are possible */}\r\n                                {(\"Individual\" in values.get(\"price\")) ? renderSize(\"Individual\", values.get(\"price\").Individual, false) : null}\r\n                                {(\"Family\" in values.get(\"price\")) ? renderSize(\"Family\", values.get(\"price\").Family, (\"Individual\" in values.get(\"price\"))) : null}\r\n                            </div>\r\n\r\n                            {/** accommodations options */}\r\n                            {renderAccommodations()}\r\n\r\n                            {/** custom instructions text area */}\r\n                            <div className=\"section instructions-section\">\r\n                                <div className=\"section-title\">\r\n                                    <h3>Special Instructions</h3>\r\n                                    <i>optional</i>\r\n                                </div>\r\n                                <p className=\"instructions-note\">Special accommodations can be made for orders placed in advanced but are not guaranteed, please <a href=\"/contact\">contact us</a> directly for more info.</p>\r\n                                <textarea name=\"instructions\" maxLength=\"75\" className=\"instructions-textarea\" />\r\n                            </div>\r\n\r\n                            {/** quantity selection */}\r\n                            <div className=\"section quantity-section\">\r\n                                <div className=\"section-title\"><h3>Quantity</h3></div>\r\n                                <div className=\"quantity-buttons\">\r\n                                    <button type=\"button\" className=\"button decrease-button\" onClick={() => {changeQuantity(\"-\");}\r\n                                    }><img src={minus} alt=\"Decrease Quantity\" /></button>\r\n                                    <span className=\"quantity-number\">{quantity}</span>\r\n                                    <button type=\"button\" className=\"button increase-button\" \r\n                                    onClick={() => {changeQuantity(\"+\");}}><img src={plus} alt=\"Increase Quantity\" /></button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/** hidden fields to pass along to the total price and  quantity */}\r\n                            <input name=\"name\" type=\"hidden\" value={values.get(\"title\")} />\r\n                            <input name=\"price\" type=\"hidden\" value={parseFloat(totalPrice).toFixed(2)} />\r\n                            <input name=\"quantity\" type=\"hidden\" value={quantity} />\r\n                            <input name=\"description\" type=\"hidden\" value={values.get(\"description\")} />\r\n                            <input className=\"submit-order-button\" type=\"submit\" value={\"Add \" + quantity + \" to cart: $\" + totalPrice} />\r\n                        </form>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n  \r\n    export default MenuItemPopup;\r\n",["220","221"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItem.js",["222","223"],"import React from 'react';\nimport \"../css/MenuItem.css\";\nconst config = require('../config');\n\nconst MenuItem = ( {description, image, price, title, togglePopup, dietaryInfo, priceOptions, accommodations} ) => {\n    return (\n      <div className=\"menu-item\" onClick={() => togglePopup(title, description, priceOptions, image, dietaryInfo, accommodations)}>\n        <div className=\"menu-image\">\n          <img src={image}></img>\n        </div>\n        <div className=\"menu-text\">\n          <h3 className=\"menu-name\">{title}</h3>\n          <p className=\"menu-description\">{description}</p>\n        </div>\n        <div className=\"menu-absolutes\">\n          <p className=\"menu-price\">${price}</p>\n        </div>\n      </div>\n    );\n}\n  \nexport default MenuItem;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/util/Auth.js",[],{"ruleId":"224","replacedBy":"225"},{"ruleId":"226","replacedBy":"227"},{"ruleId":"228","severity":1,"message":"229","line":16,"column":8,"nodeType":"230","messageId":"231","endLine":16,"endColumn":14},{"ruleId":"232","severity":1,"message":"233","line":32,"column":10,"nodeType":"234","endLine":32,"endColumn":12,"suggestions":"235"},{"ruleId":"228","severity":1,"message":"236","line":7,"column":7,"nodeType":"230","messageId":"231","endLine":7,"endColumn":18},{"ruleId":"228","severity":1,"message":"237","line":2,"column":8,"nodeType":"230","messageId":"231","endLine":2,"endColumn":14},{"ruleId":"232","severity":1,"message":"233","line":79,"column":6,"nodeType":"234","endLine":79,"endColumn":8,"suggestions":"238"},{"ruleId":"228","severity":1,"message":"236","line":10,"column":7,"nodeType":"230","messageId":"231","endLine":10,"endColumn":18},{"ruleId":"228","severity":1,"message":"239","line":1,"column":17,"nodeType":"230","messageId":"231","endLine":1,"endColumn":25},{"ruleId":"228","severity":1,"message":"240","line":6,"column":7,"nodeType":"230","messageId":"231","endLine":6,"endColumn":13},{"ruleId":"232","severity":1,"message":"241","line":195,"column":8,"nodeType":"234","endLine":195,"endColumn":14,"suggestions":"242"},{"ruleId":"243","severity":1,"message":"244","line":53,"column":31,"nodeType":"245","messageId":"246","endLine":53,"endColumn":33},{"ruleId":"224","replacedBy":"247"},{"ruleId":"226","replacedBy":"248"},{"ruleId":"228","severity":1,"message":"249","line":177,"column":12,"nodeType":"230","messageId":"231","endLine":177,"endColumn":26},{"ruleId":"250","severity":1,"message":"251","line":19,"column":5,"nodeType":"252","messageId":"253","endLine":19,"endColumn":47},{"ruleId":"250","severity":1,"message":"251","line":26,"column":5,"nodeType":"252","messageId":"253","endLine":26,"endColumn":66},{"ruleId":"250","severity":1,"message":"251","line":30,"column":5,"nodeType":"252","messageId":"253","endLine":30,"endColumn":59},{"ruleId":"232","severity":1,"message":"233","line":41,"column":10,"nodeType":"234","endLine":41,"endColumn":12,"suggestions":"254"},{"ruleId":"250","severity":1,"message":"251","line":43,"column":5,"nodeType":"252","messageId":"253","endLine":43,"endColumn":109},{"ruleId":"250","severity":1,"message":"251","line":52,"column":5,"nodeType":"252","messageId":"253","endLine":52,"endColumn":74},{"ruleId":"228","severity":1,"message":"255","line":1,"column":28,"nodeType":"230","messageId":"231","endLine":1,"endColumn":37},{"ruleId":"256","severity":1,"message":"257","line":24,"column":21,"nodeType":"258","endLine":24,"endColumn":31},{"ruleId":"256","severity":1,"message":"257","line":25,"column":21,"nodeType":"258","endLine":25,"endColumn":31},{"ruleId":"256","severity":1,"message":"257","line":26,"column":21,"nodeType":"258","endLine":26,"endColumn":31},{"ruleId":"256","severity":1,"message":"257","line":27,"column":21,"nodeType":"258","endLine":27,"endColumn":31},{"ruleId":"256","severity":1,"message":"257","line":28,"column":21,"nodeType":"258","endLine":28,"endColumn":31},{"ruleId":"228","severity":1,"message":"259","line":1,"column":17,"nodeType":"230","messageId":"231","endLine":1,"endColumn":26},{"ruleId":"228","severity":1,"message":"260","line":2,"column":8,"nodeType":"230","messageId":"231","endLine":2,"endColumn":17},{"ruleId":"228","severity":1,"message":"236","line":6,"column":7,"nodeType":"230","messageId":"231","endLine":6,"endColumn":18},{"ruleId":"228","severity":1,"message":"261","line":2,"column":8,"nodeType":"230","messageId":"231","endLine":2,"endColumn":24},{"ruleId":"228","severity":1,"message":"240","line":4,"column":7,"nodeType":"230","messageId":"231","endLine":4,"endColumn":13},{"ruleId":"228","severity":1,"message":"240","line":5,"column":7,"nodeType":"230","messageId":"231","endLine":5,"endColumn":13},{"ruleId":"243","severity":1,"message":"244","line":31,"column":21,"nodeType":"245","messageId":"246","endLine":31,"endColumn":23},{"ruleId":"243","severity":1,"message":"244","line":40,"column":35,"nodeType":"245","messageId":"246","endLine":40,"endColumn":37},{"ruleId":"228","severity":1,"message":"262","line":71,"column":9,"nodeType":"230","messageId":"231","endLine":71,"endColumn":13},{"ruleId":"243","severity":1,"message":"244","line":36,"column":27,"nodeType":"245","messageId":"246","endLine":36,"endColumn":29},{"ruleId":"243","severity":1,"message":"244","line":42,"column":33,"nodeType":"245","messageId":"246","endLine":42,"endColumn":35},{"ruleId":"243","severity":1,"message":"244","line":118,"column":28,"nodeType":"245","messageId":"246","endLine":118,"endColumn":30},{"ruleId":"243","severity":1,"message":"244","line":120,"column":35,"nodeType":"245","messageId":"246","endLine":120,"endColumn":37},{"ruleId":"228","severity":1,"message":"259","line":1,"column":17,"nodeType":"230","messageId":"231","endLine":1,"endColumn":26},{"ruleId":"228","severity":1,"message":"236","line":4,"column":7,"nodeType":"230","messageId":"231","endLine":4,"endColumn":18},{"ruleId":"228","severity":1,"message":"236","line":6,"column":7,"nodeType":"230","messageId":"231","endLine":6,"endColumn":18},{"ruleId":"263","severity":1,"message":"264","line":15,"column":74,"nodeType":"265","endLine":15,"endColumn":83},{"ruleId":"243","severity":1,"message":"266","line":12,"column":73,"nodeType":"245","messageId":"246","endLine":12,"endColumn":75},{"ruleId":"228","severity":1,"message":"259","line":1,"column":17,"nodeType":"230","messageId":"231","endLine":1,"endColumn":26},{"ruleId":"228","severity":1,"message":"240","line":4,"column":7,"nodeType":"230","messageId":"231","endLine":4,"endColumn":13},{"ruleId":"228","severity":1,"message":"236","line":7,"column":7,"nodeType":"230","messageId":"231","endLine":7,"endColumn":18},{"ruleId":"267","severity":1,"message":"268","line":11,"column":46,"nodeType":"269","messageId":"270","endLine":11,"endColumn":57},{"ruleId":"232","severity":1,"message":"271","line":42,"column":6,"nodeType":"234","endLine":42,"endColumn":20,"suggestions":"272"},{"ruleId":"243","severity":1,"message":"244","line":16,"column":17,"nodeType":"245","messageId":"246","endLine":16,"endColumn":19},{"ruleId":"243","severity":1,"message":"244","line":21,"column":22,"nodeType":"245","messageId":"246","endLine":21,"endColumn":24},{"ruleId":"243","severity":1,"message":"244","line":48,"column":118,"nodeType":"245","messageId":"246","endLine":48,"endColumn":120},{"ruleId":"243","severity":1,"message":"244","line":63,"column":48,"nodeType":"245","messageId":"246","endLine":63,"endColumn":50},{"ruleId":"228","severity":1,"message":"273","line":89,"column":21,"nodeType":"230","messageId":"231","endLine":89,"endColumn":24},{"ruleId":"243","severity":1,"message":"244","line":96,"column":30,"nodeType":"245","messageId":"246","endLine":96,"endColumn":32},{"ruleId":"224","replacedBy":"274"},{"ruleId":"226","replacedBy":"275"},{"ruleId":"228","severity":1,"message":"240","line":3,"column":7,"nodeType":"230","messageId":"231","endLine":3,"endColumn":13},{"ruleId":"276","severity":1,"message":"277","line":9,"column":11,"nodeType":"278","endLine":9,"endColumn":28},"no-native-reassign",["279"],"no-negated-in-lhs",["280"],"no-unused-vars","'Orders' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.","ArrayExpression",["281"],"'BACKEND_URL' is assigned a value but never used.","'NavBar' is defined but never used.",["282"],"'useState' is defined but never used.","'config' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'history' and 'paypalOrderObject'. Either include them or remove the dependency array.",["283"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["279"],["280"],"'checkboxUpdate' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["284"],"'useEffect' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'Component' is defined but never used.","'SearchBar' is defined but never used.","'MenuFilterButton' is defined but never used.","'json' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","Expected '!==' and instead saw '!='.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","React Hook useEffect has a missing dependency: 'menuItemValues'. Either include it or remove the dependency array.",["285"],"'key' is assigned a value but never used.",["279"],["280"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"286","fix":"287"},{"desc":"286","fix":"288"},{"desc":"289","fix":"290"},{"desc":"286","fix":"291"},{"desc":"292","fix":"293"},"Update the dependencies array to be: [state]",{"range":"294","text":"295"},{"range":"296","text":"295"},"Update the dependencies array to be: [cart, history, paypalOrderObject]",{"range":"297","text":"298"},{"range":"299","text":"295"},"Update the dependencies array to be: [categoryName, menuItemValues]",{"range":"300","text":"301"},[973,975],"[state]",[1888,1890],[7377,7383],"[cart, history, paypalOrderObject]",[1305,1307],[1594,1608],"[categoryName, menuItemValues]"]