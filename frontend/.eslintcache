[{"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/index.js":"1","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/reportWebVitals.js":"2","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/App.js":"3","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Menu.js":"4","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Contact.js":"5","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/About.js":"6","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Admin.js":"7","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Orders.js":"8","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/ResetPassword.js":"9","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Login.js":"10","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Register.js":"11","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/config.js":"12","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/Banner.js":"13","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuSection.js":"14","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/SearchSection.js":"15","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/CartPreview.js":"16","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/NavBar.js":"17","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ContactMap.js":"18","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ForgotPasswordDialogue.js":"19","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/PayPal.js":"20","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ContactForm.js":"21","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/util/Auth.js":"22","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/OrdersTable.js":"23","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/AdminMenuItems.js":"24","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/AddMenuItemModal.js":"25","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/EditMenuItemModal.js":"26","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuFilter.js":"27","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItems.js":"28","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ChangeEmailScreen.js":"29","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/OrdersTableColumns.js":"30","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/util/OrdersTableFunctions.js":"31","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItemCategory.js":"32","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuFilterButton.js":"33","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItem.js":"34","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItemPopup.js":"35","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/CartSummary.js":"36","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Emails.js":"37","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ChangeHeaderModal.js":"38","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ChangeSecondaryEmailScreen.js":"39"},{"size":500,"mtime":1613821682805,"results":"40","hashOfConfig":"41"},{"size":362,"mtime":1613820792233,"results":"42","hashOfConfig":"41"},{"size":1355,"mtime":1614650155248,"results":"43","hashOfConfig":"41"},{"size":1739,"mtime":1614650155327,"results":"44","hashOfConfig":"41"},{"size":749,"mtime":1614647573892,"results":"45","hashOfConfig":"41"},{"size":1483,"mtime":1614660093677,"results":"46","hashOfConfig":"41"},{"size":4642,"mtime":1614647573890,"results":"47","hashOfConfig":"41"},{"size":5330,"mtime":1614650155329,"results":"48","hashOfConfig":"41"},{"size":7584,"mtime":1614646602246,"results":"49","hashOfConfig":"41"},{"size":6139,"mtime":1614646602223,"results":"50","hashOfConfig":"41"},{"size":7842,"mtime":1614646602233,"results":"51","hashOfConfig":"41"},{"size":297,"mtime":1613876501530,"results":"52","hashOfConfig":"41"},{"size":433,"mtime":1614647573826,"results":"53","hashOfConfig":"41"},{"size":4368,"mtime":1614647573852,"results":"54","hashOfConfig":"41"},{"size":1179,"mtime":1614647573871,"results":"55","hashOfConfig":"41"},{"size":3122,"mtime":1614650155270,"results":"56","hashOfConfig":"41"},{"size":5202,"mtime":1614650155320,"results":"57","hashOfConfig":"41"},{"size":2666,"mtime":1614647573841,"results":"58","hashOfConfig":"41"},{"size":3704,"mtime":1614646602184,"results":"59","hashOfConfig":"41"},{"size":7737,"mtime":1614650155323,"results":"60","hashOfConfig":"41"},{"size":2994,"mtime":1613876501458,"results":"61","hashOfConfig":"41"},{"size":1436,"mtime":1614650155396,"results":"62","hashOfConfig":"41"},{"size":5000,"mtime":1614647573857,"results":"63","hashOfConfig":"41"},{"size":21631,"mtime":1614650155267,"results":"64","hashOfConfig":"41"},{"size":25403,"mtime":1614650155259,"results":"65","hashOfConfig":"41"},{"size":25924,"mtime":1614650155313,"results":"66","hashOfConfig":"41"},{"size":901,"mtime":1613876501478,"results":"67","hashOfConfig":"41"},{"size":919,"mtime":1613876501503,"results":"68","hashOfConfig":"41"},{"size":5351,"mtime":1614650155299,"results":"69","hashOfConfig":"41"},{"size":3686,"mtime":1614647573860,"results":"70","hashOfConfig":"41"},{"size":6399,"mtime":1614650155452,"results":"71","hashOfConfig":"41"},{"size":3262,"mtime":1614207382189,"results":"72","hashOfConfig":"41"},{"size":1028,"mtime":1613876501479,"results":"73","hashOfConfig":"41"},{"size":1006,"mtime":1614647573848,"results":"74","hashOfConfig":"41"},{"size":11976,"mtime":1614650155317,"results":"75","hashOfConfig":"41"},{"size":5278,"mtime":1614650155272,"results":"76","hashOfConfig":"41"},{"size":3666,"mtime":1614647573894,"results":"77","hashOfConfig":"41"},{"size":6573,"mtime":1614650155303,"results":"78","hashOfConfig":"41"},{"size":7392,"mtime":1614650155306,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"a4pre7",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"82"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"82"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"82"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"82"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"82"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"82"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"82"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"82"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"82"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"82"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"82"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"82"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"82"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"82"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"82"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"82"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"82"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"82"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"82"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"82"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"82"},"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/index.js",[],["180","181"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/reportWebVitals.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/App.js",["182"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Menu.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Contact.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/About.js",["183"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Admin.js",["184"],"import React, { useEffect } from 'react';\nimport Navbar from '../components/NavBar';\nimport AdminMenuItems from \"../components/AdminMenuItems\";\nimport Orders from \"./Orders\";\nimport ChangeEmailScreen from \"../components/ChangeEmailScreen\";\nimport { isAuthenticated } from '../util/Auth';\nimport {Redirect} from 'react-router-dom';\nimport '../css/Admin.css';\n\nexport default function Admin() {\n\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {\n    //         currentScreen: \"orders\"\n    //     }\n\n    //     //Admin NavBar binding\n    //     this.adminNavBar = this.adminNavBar.bind(this);\n    // }\n\n    const [state, setState] = React.useState({\n        isAuthenticatingUser: true,\n        isUserAuthenticated: false,\n        currentScreen: \"orders\"\n      });\n\n    useEffect(() => {\n        isAuthenticated().then(async result => {\n          setState({ ...state, isAuthenticatingUser: false, isUserAuthenticated: result});\n        })\n      }, []);\n\n    // Renders the admin page navigation bar between orders, menu, and email screens\n    // currentScreen takes values \"orders\", \"menu\", and \"email\"\n    const adminNavBar = () => {\n        var currentScreen = state.currentScreen;\n        return(\n            <div className=\"adminNavContainer\">\n                { currentScreen === \"orders\" ? \n                    <h2 className=\"adminNavSelected\" onClick={() => setState({...state, currentScreen: \"orders\"})}>\n                        All Orders\n                    </h2> : \n                    <h2 className=\"adminNavUnselected\" onClick={() => setState({...state, currentScreen: \"orders\"})}>\n                        All Orders\n                    </h2>\n                }\n                { currentScreen === \"menu\" ? \n                    <h2 className=\"adminNavSelected\" onClick={() => setState({...state, currentScreen: \"menu\"})}>\n                        Menu Items\n                    </h2> : \n                    <h2 className=\"adminNavUnselected\" onClick={() => setState({...state, currentScreen: \"menu\"})}>\n                        Menu Items\n                    </h2>\n                }\n                { currentScreen === \"email\" ? \n                    <h2 className=\"adminNavSelected\" onClick={() => setState({...state, currentScreen: \"email\"})}>\n                        Email\n                    </h2> : \n                    <h2 className=\"adminNavUnselected\" onClick={() => setState({...state, currentScreen: \"email\"})}>\n                        Email\n                    </h2>\n                }\n                 { currentScreen === \"resetPassword\" ? \n                    <h2 className=\"adminNavSelected\" onClick={() => setState({...state, currentScreen: \"resetPassword\"})}>\n                        Reset Password\n                    </h2> : \n                    <h2 className=\"adminNavUnselected\" onClick={() => setState({...state, currentScreen: \"resetPassword\"})}>\n                        Reset Password\n                    </h2>\n                }\n            </div>\n        );\n    }\n\n        //Redirect to login if user is trying to access admin panel without being logged in \n\n        if(state.isAuthenticatingUser){\n            return (\n                <div>\n                    <Navbar/>\n                    <p> Authenticating... </p>\n                </div>\n            );\n        }\n        else if (!state.isUserAuthenticated){\n            return (\n                <Redirect to=\"/login\"/> \n            );\n        } else {\n            return (\n                <div>\n                {/* The navbar on top of the page */}\n                  <Navbar/>\n    \n                  {/* This is the contents on the admin page */}\n                  <div class=\"admin-section\">\n                        {adminNavBar()}\n    \n                        {/* <div class=\"col-12\">\n                            <h2 class=\"admin-title\">Orders</h2>\n                            <p>View placed orders and mark them as fulfilled.</p>\n                            <a class=\"btn btn-primary\" href=\"/orders\" role=\"button\">Orders</a>\n                        </div> */}\n                        {state.currentScreen === \"orders\" && <Orders />}\n                        {state.currentScreen === \"menu\" && <AdminMenuItems />}\n                        {state.currentScreen === \"email\" && <ChangeEmailScreen />}\n                        {state.currentScreen === \"resetPassword\" && <Redirect to=\"/reset-password\"/>}\n                    </div>       \n              </div>\n            );\n        }\n  };","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Orders.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/ResetPassword.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Login.js",["185"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Register.js",["186"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/config.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/Banner.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuSection.js",["187","188","189"],"/**\n * Hub of menu portion of page. Almost all  states are elevated to this level. \n * Defines most of the form processing and renders MenuFilter, MenuItems, and \n * MenuCart.\n * \n * @summary   Hub of menu items, most states are elevated to this level.\n * @author    Navid Boloorian\n */\n\nimport React, { useState } from 'react';\nimport MenuFilter from './MenuFilter';\nimport MenuItems from './MenuItems';\nimport '../css/MenuSection.css';\n\n/**\n * Handle the display of menu categories and sections. Stores states of what is \n * currently visible.\n * \n * @param {function} onItemAdd - Function returning boolean\n */\nconst MenuSection = ({onItemAdd}) => {\n  // filterCategories populates the filter buttons\n  const filterCategories = [\"Whole Menu\", \"Featured\", \"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\n\n  // populates the menu item categories\n  const defaultCategories = [\"Featured\", \"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\n\n  // stores all the categories currently visible\n  let displayedCategories = [];\n\n  // states that are managed and passed down to components\n  const [visibleCategories, setVisibleCategories] = useState(defaultCategories);\n\n  const [toggledFilter, setToggledFilter] = useState(\"none\");\n\n  // stores whether or not the popup is currently visible\n  const [popupVisible, setPopupVisible] = useState(false);\n\n  // map with all of the data that will be displayed in the popup\n  const [popupValues, setPopupValues] = useState(new Map());\n\n  // changes visible categories when filter button is clicked\n  const changeVisibleCategories = categoryName => {\n    if(categoryName == \"Whole Menu\") {\n      displayedCategories = defaultCategories;\n    }\n    else {\n      // if the option is not \"whole menu\", a new item is added to the \n      // displayedCategories array that is then passed to be rendered\n      displayedCategories.push(categoryName);\n    }\n\n    if(displayedCategories.length == 0) {\n      displayedCategories = defaultCategories;\n    }\n    \n    // responsible for actually rendering/setting what will be visible\n    setVisibleCategories(displayedCategories);\n  }\n\n  // processes the form submitted from the popup\n  const processForm = e => {\n    // prevents page reload\n    e.preventDefault();\n\n    // gets the form data\n    var data = new FormData(e.target);\n    var object = {};\n\n    // goes through and makes an object from the FormData\n    data.forEach((value, key) => {\n        if(!Reflect.has(object, key)){\n            object[key] = value;\n            return;\n        }\n\n        if(!Array.isArray(object[key])){\n            object[key] = [object[key]];    \n        }\n        object[key].push(value);\n    });\n\n    // converts the FormData to a JSON string, optional\n    var json = JSON.stringify(object);\n\n    // calls parent function to add item from popup to cart\n    onItemAdd(object);\n    \n    // when submit button is clicked, the popup is closed\n    togglePopup();\n  }\n  \n  // closes popup when open and opens popup when closed\n  const togglePopup = (title, description, price, image, dietaryInfo, accommodations, fillIns) => {\n    setPopupVisible(!popupVisible);\n    \n    // sets the values of the map based on passed-in information\n    popupValues.set(\"title\", title);\n    popupValues.set(\"description\", description);\n    popupValues.set(\"price\", price);\n    popupValues.set(\"image\", image);\n    popupValues.set(\"dietary-info\", dietaryInfo);\n    popupValues.set(\"accommodations\", accommodations);\n    popupValues.set(\"fillIns\", fillIns);\n\n    setPopupValues(popupValues);\n  }\n\n  /**\n   * MenuSection is split into three columns:\n   * 1. filter column\n   * 2. menu column\n   * 3. cart column\n   */\n  return (\n    <div className=\"menu-section-wrapper\">\n      <div className=\"menu-section\">\n        <div className=\"menu-filter-wrapper\">\n          <MenuFilter toggledFilter={toggledFilter} setToggledFilter={setToggledFilter} foodCategories={filterCategories} changeVisibleCategories={() => changeVisibleCategories} />\n        </div>\n        <div className=\"menu-items\">\n          {/** parameters are states being passed down */}\n          <MenuItems foodCategories={visibleCategories} processForm={processForm} popupVisible={popupVisible} popupValues={popupValues} togglePopup={togglePopup}/>\n        </div>\n        <div className=\"menu-cart\">\n      </div>\n      </div>\n    </div>\n  )\n}\n\nexport default MenuSection;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/SearchSection.js",["190","191"],"/**\n * Upper portion of menu page. Has formatting for \"jumbotron\" background image.\n * \n * @summary   Upper portion of menu page with main background image.\n * @author    Navid Boloorian\n */\n\nimport React, { Component } from 'react';\nimport \"../css/SearchSection.css\";\nconst config = require('../config');\n\nconst SearchSection = () => {\n    return (\n      <div className=\"search-section\"></div>\n    );\n}\n  \nexport default SearchSection;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/CartPreview.js",["192","193","194","195","196","197"],"import React, { Component, useEffect } from 'react';\nimport {Button} from 'react-bootstrap';\nimport '../css/CartPreview.css';\n\nclass CartPreview extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: this.props.items,\n            subTotal: \"00.00\",\n            tax: \"00.00\",\n            totalPrice: \"00.00\"\n        }\n\n        this.loadItems = this.loadItems.bind(this);\n    }\n    \n    //displays items currently in the cart and updates subtotal and total\n    loadItems() {\n        return(\n            <div>\n                {this.state.items.map((item, ind) => {\n\n                    this.state.subTotal = parseFloat(this.state.subTotal) + parseFloat(item.price);\n                    this.state.subTotal = parseFloat(this.state.subTotal).toFixed(2);\n                    this.state.tax = (parseFloat(this.state.subTotal)*0.0775).toFixed(2);\n                    this.state.totalPrice = parseFloat(this.state.subTotal) + parseFloat(this.state.tax);\n                    this.state.totalPrice = parseFloat(this.state.totalPrice).toFixed(2);\n\n                    let specialInstructions = (item.instructions === \"\") ? \"\" : \", \" + item.instructions;\n                    let accommodation = (item.accommodations) ? \", \" + item.accommodations : \"\";\n\n                    let extraInfo = item.size + specialInstructions  + accommodation;\n\n                        return (\n                            <div key={ind} className=\"summary-item row\">\n                                <span className=\"thumbnail thumb-img\">{ind+1}</span>\n                                <span className=\"item-info\">{item.quantity} X {item.name}<br/>\n                                <span className=\"item-description\">{extraInfo}</span></span>\n                                <span className=\"thumbnail summary-price\">${item.price}</span>\n                                <span className=\"item-divider\"></span>\n                            </div>\n                        )\n                })}\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"cart-container\">\n                <div id=\"order-summary-div\">\n                    <div className=\"order-summary\">\n                        Order Summary\n                    </div>\n                    <div>\n                        <div className=\"fixed-scroll\">\n                            {/* loads and displays all items currently in the cart */}\n                            {this.loadItems()}\n                        </div>\n                        <div className=\"order-totals\">\n                            <br/>\n                            Subtotal: ${this.state.subTotal}<br/>\n                            Tax: ${this.state.tax}\n                        </div>\n                        <Button>Review Order</Button>\n                    </div>\n                    <div className=\"order-summary\">\n                        <span>Total Price</span><span className=\"add-price\">${this.state.totalPrice}</span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default CartPreview;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/NavBar.js",["198","199","200","201","202","203"],"import React, {useEffect} from 'react';\n/**\n * The NavBar component. Renders at the top of the website and is fixed to the top.\n * Contains all the relevant tabs that route the user to the specified page.\n * Cart Icon is used for the mobile/tablet rendering of the webpage. \n * \n */\nimport { useHistory } from \"react-router-dom\";\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faShoppingCart } from '@fortawesome/free-solid-svg-icons'\nimport Logo from \"../media/UWEAST_Logo_Detail_Transparent.png\";\nimport '../css/NavBar.css';\nimport { isAuthenticated, logout} from '../util/Auth';\n\n\nexport default function NavBar (props) {\n\n    {/* history hook to redirect on logout */}\n    const history = useHistory();\n\n    const [state, setState] = React.useState({\n        isUserAuthenticated: false\n      });\n\n    {/* stores class names to toggle whether content is shown */}\n    var adminContentClass;\n    var loginButtonClass;\n\n    {/* removes login token and redirects to menu page */}\n    function Logout() {\n        logout();\n        history.push(\"/login\");\n        history.go(0);\n    }\n\n    function OpenCart() {\n        history.push(\"/cart\");\n    }\n\n    useEffect(() => {\n        isAuthenticated().then(async result => {\n          setState({...state, isUserAuthenticated: result});\n        })\n      }, []);\n\n    {/* Hides admin content (admin page + logout) or login button depending on whether user is logged in */}\n    if(state.isUserAuthenticated) {\n        adminContentClass = \"nav-link\";\n        loginButtonClass = \"nav-link d-none\";\n    } else {\n        adminContentClass = \"nav-link d-none\";\n        loginButtonClass = \"nav-link\";\n    }\n\n    {/* Check current page from props to change active nav-link color */}\n    function isPageActive(pageToCheck) {\n        return (pageToCheck === window.location.pathname) ? \" active\" : \"\";\n    }\n\n    return (\n        <html>\n            <head>\n                {/* Bootstrap Resources */}\n                <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossOrigin=\"anonymous\"/>\n            </head>\n            <Navbar className=\"navbar navbar-bg-color\" collapseOnSelect expand=\"md\" variant=\"dark\">\n                \n                {/* Left Hand Side of Navbar - Title & Image linked to Menu Page */}\n                <Navbar.Brand href=\"/\">\n                    <img src={Logo} className=\"logo-img\" alt=\"UWEAST Logo\" width={window.innerWidth > 768 ? '90' : '80'} \n                        height={window.innerWidth > 768 ? '90' : '80'} />\n                </Navbar.Brand>\n\n                {/* Text to complement the logo */}\n                <div className=\"brand-name\">\n                    <p>Community Kitchen</p>\n                </div>\n\n                {/* The shopping cart will only render if it is a mobile component */}\n                <div className=\"cart-icon\" >\n                    <FontAwesomeIcon icon={faShoppingCart} style={{ color: 'white' }} \n                        onClick={OpenCart} />\n                </div>\n\n                {/* Triggers on Collapse - Hamburger Icon replaces pages */}\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n\n                {/* Right Hand Side of Navbar - Linked Pages (based off of Router paths in App.js) */}\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"ml-auto\">\n                        {/* Menu Page */}\n                        <Nav.Link className={\"nav-link\" + isPageActive(\"/\")} href=\"/\">Menu</Nav.Link>\n\n                        {/* Contact Page */}\n                        <Nav.Link className={\"nav-link\" + isPageActive(\"/contact\")} href=\"/contact\">Contact</Nav.Link>\n\n                        {/* About Page */}\n                        <Nav.Link className={\"nav-link\" + isPageActive(\"/about\")} href=\"/about\">About</Nav.Link>\n\n                        {/* Admin Page */}\n                        <span className=\"desktop-tabs\">\n                            <Nav.Link className={adminContentClass + isPageActive(\"/admin\")} href=\"/admin\">Admin</Nav.Link>\n                        </span>\n\n                        {/* Logout */}\n                        <span className=\"desktop-tabs\">\n                            <Nav.Link className={adminContentClass} onClick={Logout}>Logout</Nav.Link>\n                        </span>\n\n                        {/* Login */}\n                        <span className=\"desktop-tabs\">\n                            <Nav.Link className={loginButtonClass + isPageActive(\"/login\")} href=\"/login\">Login</Nav.Link> \n                        </span>\n                    </Nav>\n                </Navbar.Collapse>\n\n                {/* The shopping cart will only render for smaller desktop screens/tablets */}\n                <div className=\"cart-icon-smaller-desktop\">\n                    <FontAwesomeIcon icon={faShoppingCart} style={{ color: 'white' }} \n                        onClick={() => props.toggleCart()} />\n                </div>\n            </Navbar>\n        </html>\n    )\n}\n","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ContactMap.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ForgotPasswordDialogue.js",["204"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/PayPal.js",["205"],"import React from 'react'\nimport { useHistory } from \"react-router-dom\";\n\n// const paypal = require(\"@paypal/checkout-server-sdk\");\n\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\n//PayPal script is located in public/index.html (contains Client ID)\nexport default function PayPal(props) {\n    const { cart } = props;\n    let history = useHistory();\n    // I assume the cart object looks like this:\n    // {\n    //     cart_total: \"\",\n    //     item_total: \"\",\n    //     tax_total: \"\",\n    //     items: [\n    //         {\n    //             name: \"\",\n    //             quantity: \"\",\n    //             size: \"\",\n    //             addons: [\"\", \"\"],\n    //             individual_price: \"\",\n    //             individual_tax: \"\",\n    //         },\n    //     ],\n    //     pickup_date: \"\"\n    // }\n    const paypalRef = React.useRef();\n    const paypalOrderObject = {\n        intent: \"CAPTURE\",\n        application_context: {\n            shipping_preference: 'NO_SHIPPING',\n        },\n        purchase_units: [{\n            description: \"Food order from UWEAST Kitchen\",\n            // Deals with pricing of the cart\n            amount: {\n                currency_code: \"USD\",\n                value: cart.cart_total,\n                breakdown: {\n                    // includes totals for items and taxes. Shipping and handling can be ignored\n                    // because the items are for pickup and handling is included in price\n                    item_total: {\n                        currency_code: \"USD\",\n                        value: cart.item_total,\n                    },\n                    tax_total: {\n                        currency_code: \"USD\",\n                        value: cart.tax_total,\n                    },\n                }\n            },\n            // Deals with the individual item entries for the order\n            items: \n            cart.items.map((item) => {\n                return {\n                    name: item.name,\n                    // Description follows the format:\n                    // Size: {size}, (Gluten Free,) (Other addons,) \n                    description: [`Size: ${item.size}`, ...item.addons].join(\", \"),\n                    unit_amount: {\n                        currency_code: \"USD\",\n                        value: item.individual_price,\n                    },\n                    tax: {\n                        currency_code: \"USD\",\n                        value: item.individual_tax,\n                    },\n                    quantity: item.quantity,\n                    category: \"PHYSICAL_GOODS\"\n                }\n            })\n        }],\n        shipping_type: 'PICKUP',\n    }\n    // THE FOLLOWING TWO METHODS ARE NOT USED. THEY WERE CREATED FOR\n    // SERVER SIDE PAYMENT INTEGRATION, BUT THIS ISN'T BEST PRACTICE,\n    // SO IT WAS NOT PURSUED. THEREFORE THESE METHODS ARE COMMENTED OUT.\n    /* const createOrder = async () => {\n        console.log(\"Creating order...\");\n        return fetch(`${BACKEND_URL}paypal/createPayment`, {\n            method: \"POST\",\n            body: JSON.stringify(paypalOrderObject),\n            headers: {\n                \"content-type\": \"application/json\"\n            }, \n        }).then((res) => {\n            if(res.ok) {\n                return res.json();\n            }\n        }).then((data) => {\n            console.log(\"finished creating order\")\n            return data.orderID; // make sure to use the same key name for order ID on the client and server\n        })\n        .catch((err) => {\n            console.log(err);\n            alert(\"Create order Error\");\n        });\n    }\n    const onApprove = async (data) => {\n        console.log(\"Authorizing order...\");\n        return fetch(`${BACKEND_URL}paypal/executePayment`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                orderID: data.orderID,\n            }),\n        }).then((res) => {\n           // handle show completion\n           console.log(\"ORDER COMPLETE!\");\n           return res.json();\n        })\n        .catch(() => {\n            alert(\"Error\");\n        }).then((details) => {\n            alert(\"Successful order!\");\n            console.log(details);\n        });\n    } */\n\n     // To show PayPal buttons once the component loads\n    React.useEffect(() => {\n        window.paypal\n        .Buttons({\n            createOrder: async(data, actions) => {\n                return actions.order.create(paypalOrderObject);\n            },\n            onApprove: async (data, actions) => {\n                return actions.order.capture().then(function(details) {\n                    // Details here includes payer name, phone number, and email.\n\n                    // create order object\n                    const orderObj = {\n                        \"Customer\": {\n                            \"Name\": details.payer.name.given_name + \" \" + details.payer.name.surname,\n                            \"Email\": details.payer.email_address,\n                            \"Phone\": details.payer.phone.phone_number.national_number\n                        },\n                        \"Pickup\": cart.pickup_date,\n                        \"PayPal\": {\n                            \"Amount\": cart.cart_total,\n                            \"transactionID\": details.id\n                        },\n                        \"Order\": \n                        cart.items.map((item) => {\n                            return {\n                                \"item\": item.name,\n                                \"quantity\": item.quantity,\n                                \"extra\": [`${item.size} size`, ...item.addons],\n                            }\n                        })\n                    }\n                    // signal email automation by calling the /autoEmails/automate route, \n                    // this will automatically add the order to the database \n                    return fetch(`${BACKEND_URL}autoEmails/automate`, {\n                        method: \"POST\",\n                        headers: {\n                            \"content-type\": \"application/json\",\n                        },\n                        body: JSON.stringify(orderObj),\n                    }).then((res) => {\n                        if(res.ok){\n                            alert('Transaction completed! You will receive a confirmation email shortly.');\n                            history.push(\"/\");\n                        } else {\n                            alert('Transaction completed, but email automation failed. You paid for your meal, and should get a confirmation from PayPal');\n                            history.push(\"/\");\n\n                        }\n                    })\n                    .catch(() => {\n                        alert(\"Error\");\n                    });\n                });\n            },\n            onCancel: () => {\n                // If the user cancels their order, send them back to the cart summary\n                // The cart summary exists at the menu page\n                console.log(\"cancel\");\n                history.push(\"/\");\n            },\n            onError: (err) => {\n                alert(\"An error occurred!\");\n                console.error(err);\n                history.push(\"/\");\n\n            },\n        })\n        .render(paypalRef.current);\n    }, [cart]);\n\n    return (\n        <div>\n            <div ref={paypalRef}/>\n        </div>\n    )\n}","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ContactForm.js",["206","207"],"/**\n * Component creating the form on the contact page. Form takes user's \n * information and sends an email to UWEAST on their behalf. Error handling \n * makes sure that backend response is 200, otherwise notify user.\n * \n * @summary   Form to contact UWEAST found on contact page.\n * @author    Navid Boloorian, Amrit Kaur Singh\n */\nimport React from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { Snackbar } from '@material-ui/core';\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\nconst ContactForm = () => {\n\n  const [state, setState] = React.useState({\n    snack: {\n      message: '',\n      open: false\n    },\n  });\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n  \n    const formData = new FormData(e.target);\n    let data = {};\n    \n    // make FormData into a js object to pass to route\n    for(var [key, value] of formData.entries()) {\n      data[key] = value;\n    }\n  \n    try{\n  \n      const response = await fetch(`${BACKEND_URL}autoEmails/contact`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(data)\n      });\n      \n      // successful response\n      if (response.status == 200){\n        alert(\"Message sent!\");\n        // reload window to clear input boxes \n        window.location.reload();\n        \n        // malformed email\n      } else if(response.status == 400) {\n        setState({...state, snack: {message: 'Invalid Email Address!', open: true}});\n\n        // system error\n      } else {\n        setState({...state, snack: {message: 'System Error: Cannot send email!', open: true}});\n      }\n      \n      // general error\n    } catch(error){\n      setState({...state, snack: {message: 'System Error: Cannot send email!', open: true}});\n    }\n  };\n  \n  // error message display: auto close itself by updating its states\n  const handleSnackClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setState({...state, snack: {open: false}});\n  };\n\n  return (\n    <div className=\"contact-form\">\n      <div className=\"contact-form-text\">\n      <h1>CONTACT US</h1>\n      <p>Please email us using the form below</p>\n      <form onSubmit={sendMessage}>\n        <input type=\"text\" name=\"name\" className=\"first-input contact-form-input\" placeholder=\"Your Name\" required/>\n        <br />\n        <input type=\"text\" name=\"email\" className=\"contact-form-input\" placeholder=\"Your Email\" required />\n        <br />\n        {/** automatically-resizing textarea component */}\n        <TextareaAutosize className=\"contact-form-input\" name=\"message\" placeholder=\"Your message\" maxRows={3} required />\n        <br />\n        <input type=\"submit\" className=\"contact-form-submit\" value=\"Submit\"  />\n      </form>\n      </div>\n      <Snackbar open={state.snack.open} autoHideDuration={6000} onClose={handleSnackClose} message={state.snack.message}/>\n    </div>\n  )\n}\n\nexport default ContactForm;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/util/Auth.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/OrdersTable.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/AdminMenuItems.js",["208","209"],"import React, {useState, useEffect} from 'react';\nimport {Modal, Button} from 'react-bootstrap';\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport SearchBar from \"material-ui-search-bar\";\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport '../css/AdminMenuItems.css';\nimport AddMenuItemModal from './AddMenuItemModal.js';\nimport EditMenuItemModal from './EditMenuItemModal.js';\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\nfunction createData(itemName, imgSource, categoryName, options, baseprice, description, id, featured, dietaryInfo) {\n  return {\n        \"itemName\": itemName, \n        \"imgSource\": imgSource,\n        \"categoryName\": categoryName, \n        \"options\": options, \n        \"basePrice\": baseprice, \n        \"description\": description,\n        \"id\": id,\n        \"isFeatured\": featured,\n        \"dietaryInfo\": dietaryInfo\n    };\n}\n\n// Renders modal that asks the user if they want to remove the item from the menu\nconst deleteConfirmationModal = (deleteConfirmation, setDeleteConfirmation, itemList, setItemList, displayContent, setDisplayContent) => {\n    return (\n        <Modal \n            show={deleteConfirmation !== []} \n            onHide={() => setDeleteConfirmation([\"\", \"\"])} \n            backdrop='static'\n            style={{\"marginTop\": \"30vh\"}}\n        >\n                <Modal.Header closeButton>\n                    <Modal.Title>Delete Menu Item</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div>\n                        <p>Are you sure you want to remove {deleteConfirmation[0]} from the menu?</p>\n                    </div>\n                </Modal.Body>\n                \n                <Modal.Footer>\n                    <Button variant=\"primary\" className=\"menuAddButton\" onClick={() => {\n                        // REMOVE ITEM FROM MENU\n                        console.log(\"removing item from menu\")\n                        \n                        // Call database, remove item from menu\n                        handleRemoveByID(deleteConfirmation[1], itemList, setItemList, displayContent, setDisplayContent);\n                        setDeleteConfirmation([\"\", \"\"]);\n                    }}>\n                        Remove Item\n                    </Button>\n                    <Button variant=\"secondary\" onClick={() => {\n                        setDeleteConfirmation([\"\", \"\"]);\n                    }}>\n                        Cancel\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        );\n}\n\n// Renders table of items based on what is passed in through displayContent\nfunction menuTable(itemList, setItemList, displayContent, setDisplayContent, setDeleteConfirmation, handleFeatureChange, setCurrentEditItem) {\n    return (\n        <TableContainer component={Paper} className=\"menuTableContainer\">\n            <Table aria-label=\"simple table\" stickyHeader className=\"menuTable\">\n                <TableHead>\n                    <TableRow style={{\"overflow\": \"hidden\"}}>\n                        <TableCell className=\"menuTableHeaders\" width=\"5%\">Feature</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"15%\" align=\"center\">Item Image</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"15%\" align=\"left\">Item Name</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"12%\" align=\"left\">Category Name</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"12%\" align=\"left\">Size</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"12%\" align=\"left\">Base Price</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"12%\" align=\"left\">Add-ons</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"12%\" align=\"left\">Edit</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {displayContent.map((row, index) => {\n                        const bgColor = index % 2 === 0 ? \"evenrowbg\" : \"oddrowbg\";\n                        // console.log(row);\n                        return (\n                            <TableRow key={row._id} className={bgColor}>\n                                <TableCell component=\"th\" scope=\"row\" className=\"menuRowText\" width=\"5%\">\n                                    <Checkbox\n                                        id={row._id + \"checkbox\"}\n                                        checked={row.isFeatured}\n                                        onChange={(e) => {\n                                            handleFeatureChange(row);\n                                        }}\n                                        name={row.itemName}\n                                        style ={{\n                                            color: \"#747474\",\n                                        }}\n                                    />\n                                </TableCell>\n                                <TableCell align=\"center\" className=\"menuRowText\" width=\"15%\">\n                                    <img src={row.imgSource} alt={row.itemName} className=\"menuItemImage\"/>\n                                </TableCell>\n                                <TableCell className=\"menuRowText\" width=\"15%\">{row.itemName}</TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"12%\">{row.categoryName}</TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"12%\">\n                                {\n                                    row.basePrice.map((v) => {return (<>{v[0]}<br /></>)})\n                                }\n                                </TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"12%\">\n                                {\n                                    row.basePrice.map((v) => <>${v[1]}<br /></>)\n                                }\n                                </TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"12%\">\n                                {\n                                    row.options.map((v) => <p>{v[1].Description}</p>)\n                                }\n                                </TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"12%\">\n                                    <IconButton onClick={() => setCurrentEditItem(row.id)}>\n                                        <EditIcon style={{\"marginRight\": \"5px\"}}/>\n                                    </IconButton>\n                                    <IconButton aria-label=\"delete item\" onClick={() => setDeleteConfirmation([row.itemName, row.id])}>\n                                        <DeleteIcon style={{\"marginLeft\": \"5px\"}}/>\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                    )})}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n// handle remove based on id passed in through params\nasync function handleRemoveByID(id, itemList, setItemList, displayContent, setDisplayContent){\n    // remove from database\n    console.log(\"Removing \" + id);\n    await fetch(`${BACKEND_URL}item/remove`, {\n            method: \"DELETE\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                \"_id\": id\n            })\n        }).then(res => {\n            if(res.ok){\n                console.log(\"Remove successful!\")\n                // remove from rows\n                setItemList(itemList.filter(x => x.id !== id));\n                // remove from filtered rows\n                setDisplayContent(displayContent.filter(x => x.id !== id));\n            }\n        })\n    \n}\nexport default function AdminMenuItems (props) {\n    const [deleteConfirmation, setDeleteConfirmation] = useState([\"\", \"\"]);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [filter, setFilter] = useState(\"All\");\n    const [displayContent, setDisplayContent] = useState([]);\n    const [itemList, setItemList] = useState([]);\n    const [loaded, setLoaded] = useState(false);\n    const [checkboxUpdate, setCheckboxUpdate] = useState(\"\");\n    const [addItemModal, setAddItemModal] = useState(false);\n    const [currentEditItem, setCurrentEditItem] = useState(\"\");\n    // Fetch all menu items to display in table\n    useEffect(() => {\n        var data = null;\n        const fetchData = async () => {\n            const res = await fetch(`${BACKEND_URL}item/`, {\n                method: \"GET\",\n                headers: {\n                    \"content-type\": \"application/json\",\n                },\n            })\n            data = await res.json();\n            console.log(data.items);\n            const rows = [];\n            data.items.forEach(element => {\n                // log(element);\n                rows.push(\n                    createData(\n                        element.Name,\n                        element.pictureURL, \n                        element.Category, \n                        Object.entries(element.Accommodations),\n                        Object.entries(element.Prices), \n                        element.Description,\n                        element._id,\n                        element.isFeatured,\n                        element.dietaryInfo\n                ));\n            });\n            setItemList(rows);\n            setDisplayContent(rows);\n            setLoaded(true);\n        }\n        \n        fetchData();\n    }, [loaded])\n    // update display contents based on search term\n    const handleSearch = (searchTerm) => {\n        // Empty search term, so we want to reset the displayed items to those of the current category\n        if(searchTerm === \"\"){\n            if(filter === \"All\"){        \n                setDisplayContent(itemList); \n            }\n            else {\n                setDisplayContent(itemList.filter(x => x.categoryName === filter));\n            }\n        }\n        else{\n            // Filters the current display content to show those that contain the\n            // search term in the name AND correspond to current filter\n            if(filter === \"All\"){\n                setDisplayContent(itemList.filter(x => x.itemName.toLowerCase().includes(searchTerm.toLowerCase()))); \n            }\n            else {\n                // Filter based on search term and filter term\n                setDisplayContent(itemList.filter(x => \n                    x.itemName.toLowerCase().includes(searchTerm.toLowerCase())\n                    && x.categoryName === filter\n                )); \n            }\n        }\n    }\n    // update display contents based on filter term\n    // possible terms are: Main Dish, Appetizer, Drink, Side\n    const handleFilterChange = (filter) => {\n        // clear search\n        setSearchTerm(\"\");\n        if(filter === \"All\"){        \n            setDisplayContent(itemList); \n        }\n        else{\n            const newRows = [];\n            for(var index in itemList) { \n                if (itemList[index][\"categoryName\"] === filter){\n                    newRows.push(itemList[index]); \n                }\n            }\n            console.log(newRows)\n            setDisplayContent(newRows); \n        }\n    }\n    // Called when a set featured checkbox is clicked\n    const handleFeatureChange = async (row) => {\n        const itemID = row.id;\n        const newValue = !row.isFeatured;\n        row.isFeatured = newValue;\n        // update item's feature property in local (displayContent and itemList)\n        var itemListIndex = -1;\n        itemList.forEach((x, index) => {\n            itemListIndex = x.id === itemID ? index : itemListIndex;\n        })\n        if(itemListIndex !== -1){\n            setItemList(prev => {\n                prev[itemListIndex].isFeatured = newValue;\n                return prev;\n            })\n        }\n        var displayContentIndex = displayContent.findIndex(x => x.id === itemID);\n        if(displayContentIndex !== -1){\n            displayContent[displayContentIndex].isFeatured = newValue;\n            setDisplayContent(displayContent);\n        }\n        setCheckboxUpdate(row.itemName + \"\" + newValue);\n\n        // update item's feature property in database\n        await fetch(`${BACKEND_URL}item/feature`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                \"_id\": itemID,\n                \"isFeatured\": newValue\n            })\n        })\n    }\n    if(loaded){\n        return (  \n            <div>\n                {currentEditItem !== \"\" && <EditMenuItemModal showModal={currentEditItem !== \"\"} setCurrentEditItem={setCurrentEditItem} item={itemList.filter(item => item.id === currentEditItem)[0]} setLoaded={setLoaded}/>}\n                {deleteConfirmation[0] !== \"\" && deleteConfirmationModal(deleteConfirmation, setDeleteConfirmation, itemList, setItemList, displayContent, setDisplayContent)}\n                {addItemModal && <AddMenuItemModal addItemModal={addItemModal} setAddItemModal={setAddItemModal} setLoaded={setLoaded} />}\n                <div className=\"aboveTableContainer\">\n                    <Button className=\"menuAddButton\" onClick={() => {setAddItemModal(true)}}>\n                        <AddCircleIcon className=\"menuAddButtonIcon\" />\n                        Add Item\n                    </Button>\n                    <div className=\"searchFilterContainer\">\n                        <Select\n                            className=\"menuFilterSelect\"\n                            id=\"item-filter-select\"\n                            defaultValue=\"All\"\n                            displayEmpty=\"false\"\n                            variant=\"outlined\"\n                            value={filter}\n                            onChange={(v) => {\n                                setFilter(v.target.value);\n                                handleFilterChange(v.target.value);\n                            }}\n                        >\n                            <MenuItem value=\"All\">All</MenuItem>\n                            <MenuItem value=\"Appetizers\">Appetizers</MenuItem>\n                            <MenuItem value=\"Main Dishes\">Main Dishes</MenuItem>\n                            <MenuItem value=\"Sides\">Sides</MenuItem>\n                            <MenuItem value=\"Drinks\">Drinks</MenuItem>\n                        </Select>\n                        <SearchBar\n                            className=\"menuSearchBar\"\n                            value={searchTerm}\n                            onChange={(newValue) => setSearchTerm(newValue)}\n                            onRequestSearch={() => handleSearch(searchTerm)}\n                            onCancelSearch={() => {\n                                setSearchTerm(\"\"); \n                                handleSearch(\"\");\n                            }}\n                        />\n                    </div>\n                </div>\n                {menuTable(itemList, setItemList, displayContent, setDisplayContent, setDeleteConfirmation, handleFeatureChange, setCurrentEditItem)}\n            </div>\n        )\n    }\n    else{\n        return (\n            <div>Loading...</div>\n        )\n    }\n}\n","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/AddMenuItemModal.js",["210","211"],"import React, { useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { Modal, FormControl, Checkbox, FormControlLabel, FormGroup, OutlinedInput, Select, MenuItem, InputAdornment, FormHelperText, Snackbar, IconButton } from '@material-ui/core';\nimport '../css/AddMenuItemModal.css';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport ClearIcon from '@material-ui/icons/Clear';\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\n/*\n    This file contains the modal for adding an item into the menu. It's split\n    into sections for each of the form items, including name, image url, category,\n    prices, accommodations, and description. It uses MaterialUI's form control\n    to create the form. \n    The required fields are name, image url, category, description, and price.\n    Price is considered to be filled out if one of the prices is complete (so\n    one of the prices can be empty).\n    Also, a given accommodations is considered to be filled out if it has\n    0 or 2 fields completed. If 0, it is removed, if 1, it is considered incomplete.\n\n    Errors are thrown under the following cases:\n        1. one of the required fields is empty\n        2. one of the accommodations fields has one of the fields filled out\n        3. none of the prices are filled out\n    \n    A new accommodation field can be added if both fields of the previous one\n    has values, if not it will not be added.\n\n    Disclaimer: This file seems really long (it is), but it isn't very hard to\n    understand. A lot of the bulk comes from Material UI's form control handling\n    and general HTML property tags.\n*/\n\n// renders a red asterix that indicates a required field\nfunction requiredAsterix(){\n    return (\n        <p className=\"requiredAsterix\">*</p>\n    );\n}\n\nexport default function AddMenuItemModal (props) {\n    const showModal = props.addItemModal;\n    const setShowModal = props.setAddItemModal;\n    const setLoaded = props.setLoaded;\n\n    // form states\n    const [itemName, setItemName] = useState(\"\")\n    const [itemCategory, setItemCategory] = useState(\"\")\n    const [individualItemPrice, setIndividualItemPrice] = useState(\"\")\n    const [familyItemPrice, setFamilyItemPrice] = useState(\"\")\n    const [itemImageURL, setItemImageURL] = useState(\"\")\n    const [itemDescription, setItemDescription] = useState(\"\")\n    /*  addOns is an array of objects \n    [\n        {\n            name: \"\",\n            price: \"\"\n        }\n    ]\n    */\n    const [addOns, setAddOns] = useState([]);\n        // dietary info\n    const [vegan, setVegan] = useState(false);\n    const [vegetarian, setVegetarian] = useState(false);\n    const [glutenFree, setGlutenFree] = useState(false);\n    const [containsDairy, setContainsDairy] = useState(false);\n\n    const [menuError, setMenuError] = useState(false);\n    const [errorSnackbar, setErrorSnackbar] = useState(false);\n    // function validURL(str) {\n    //     var pattern = new RegExp('/^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/'); // fragment locator\n    //     return !!pattern.test(str);\n    // }\n    const handleSubmit = async () => {\n        // validate basic input\n        if(itemName === \"\" || \n            itemCategory === \"\" || \n            (individualItemPrice === \"\" && familyItemPrice === \"\") || \n            itemImageURL === \"\" || itemDescription === \"\"\n        ){\n            // if(!validURL(itemImageURL)){\n            //     console.log(\"fail url\");\n            //     setMenuError(true);\n            //     return;\n            // }\n            console.log(\"fail basic\");\n            setMenuError(true);\n            setErrorSnackbar(true);\n            return;\n        }\n        // validate addons\n        let failAddOn = false;\n        addOns.forEach(item => {\n            if((item.price === \"\" && item.name !== \"\") || (item.price !== \"\" && item.name === \"\")){\n                // error\n                console.log(\"fail add on\");\n                failAddOn = true;\n                setMenuError(true);\n                setErrorSnackbar(true);\n                return;\n            }\n            else if(item.name !== \"\" && parseFloat(item.price) < 0){\n                //negative number\n                console.log(\"add on price was negative\");\n                failAddOn = true;\n                setMenuError(true);\n                setErrorSnackbar(true);\n                return;\n            }\n        })\n        if(failAddOn){\n            setMenuError(true);\n            setErrorSnackbar(true);\n            return;\n        }\n        // send to db\n        console.log(\"sending to database\");\n\n        // format data into item object\n        let pricesObj = {};\n        if(individualItemPrice !== \"\"){\n            pricesObj.Individual = individualItemPrice;\n        }\n        if(familyItemPrice !== \"\"){\n            pricesObj.Family = familyItemPrice;\n        }\n        let accommodations = [];\n        addOns.forEach(addon => {\n            if(addon.name !== \"\" && addon.price !== \"\"){\n                accommodations.push({\"Description\": addon.name, \"Price\": addon.price});\n            }\n        })\n        const dietaryInfo = {\n            \"vegan\": vegan,\n            \"vegetarian\": vegetarian,\n            \"glutenFree\": glutenFree,\n            \"containsDairy\": containsDairy,\n        };\n        const itemObject = {\n            \"Name\": itemName,\n            \"pictureURL\": itemImageURL,\n            \"Description\": itemDescription,\n            \"Category\": itemCategory,\n            \"Prices\": pricesObj,\n            \"isFeatured\": false,\n            \"isCompleted\": false,\n            \"Accommodations\": accommodations,\n            \"dietaryInfo\": dietaryInfo\n        }\n        // push to database\n        await fetch(`${BACKEND_URL}item/insert`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify(itemObject)\n        }).then(res => {\n            if(res.ok){\n                alert(\"Your item was added!\");\n                //refetch\n                setLoaded(false);\n                setShowModal(false);\n            }\n            else{\n                alert(\"There was an error. Recheck your inputs and try again\");\n            }\n        })\n        \n    }\n    return (\n        <>\n            {/* Failure Snackbar */}\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                open={errorSnackbar}\n                autoHideDuration={5000}\n                onClose={() => setErrorSnackbar(false)}\n                message={<span id=\"message-id\">There was an error in the form</span>}\n            />\n\n            <Modal open={showModal} onClose={() => setShowModal(false)} \n                className=\"modalContainer\"\n            >\n                <div className=\"modalBackground\">\n                    {/* <div className=\"modalHeader\">\n                        <Button onClick={() =>setShowModal(false)}>X</Button>\n                    </div> */}\n                    <div className=\"headerContainer\">\n                        <IconButton\n                            className=\"removeAddOnButton\"\n                            onClick={() => setShowModal(\"\")}\n                        >\n                            <ClearIcon/>\n                        </IconButton>\n                    </div>\n                    <form autocomplete=\"off\">\n                        <div className=\"modalBody\">\n                            {/* Item Name */}\n                            <p className=\"formLabelText\">Name {requiredAsterix()}</p>\n                            <FormControl fullWidth error={menuError && itemName === \"\"} className=\"formItem\" margin='dense'>\n                                <OutlinedInput name=\"name\" id=\"name\" className=\"formTextInput\"\n                                    required \n                                    value={itemName}\n                                    onChange={(e) => setItemName(e.target.value)}\n                                    size=\"small\"\n                                />\n                            </FormControl>\n                            {/* Item Image URL */}\n                            <p className=\"formLabelText\">Image Link {requiredAsterix()}</p>\n                            <FormControl fullWidth error={menuError && itemImageURL === \"\"} className=\"formItem\" margin='dense'>\n                                <OutlinedInput name=\"imageURL\" id=\"imageURL\" className=\"formTextInput\"\n                                    required \n                                    value={itemImageURL}\n                                    onChange={(e) => setItemImageURL(e.target.value)}\n                                    size=\"small\"\n                                />\n                            </FormControl>\n\n                            {/* Item Category */}\n                            <p className=\"formLabelText\">Category Name {requiredAsterix()}</p>\n                            <FormControl fullWidth error={menuError && itemCategory === \"\"} className=\"formItem\" margin='dense' variant=\"outlined\">\n                                <Select name=\"category\" type=\"text\" id=\"category\" className=\"formSelectInput\" required \n                                    placeholder=\"\"\n                                    value={itemCategory}\n                                    onChange={(e) => setItemCategory(e.target.value)}\n                                    size=\"small\"\n                                    displayEmpty\n                                >\n                                    <MenuItem value=\"Appetizers\">Appetizers</MenuItem>\n                                    <MenuItem value=\"Main Dishes\">Main Dishes</MenuItem>\n                                    <MenuItem value=\"Sides\">Sides</MenuItem>\n                                    <MenuItem value=\"Drinks\">Drinks</MenuItem>\n                                </Select>\n                            </FormControl>\n                            {/* Item Sizing and Price*/}\n                            <div className=\"priceSizeContainer\">\n                                <div className=\"sizeContainer\">\n                                    <p className=\"formLabelText\">Size</p>\n                                    <FormControl margin='dense'>\n                                        <OutlinedInput name=\"name\" id=\"individuallabel\" className=\"formTextInput\"\n                                            required \n                                            value={\"Individual\"}\n                                            size=\"small\"\n                                            disabled\n                                        />\n                                    </FormControl>\n                                    <FormControl margin='dense'>\n                                        <OutlinedInput name=\"name\" id=\"familylabel\" className=\"formTextInput\"\n                                            required \n                                            value={\"Family\"}\n                                            size=\"small\"\n                                            disabled\n                                        />\n                                    </FormControl>\n                                </div>\n                                <div className=\"priceContainer\">\n                                    <p className=\"formLabelText\">Price</p>\n                                    <FormControl error={menuError && ((individualItemPrice === \"\" && familyItemPrice === \"\") || (parseInt(individualItemPrice) < 0))} margin='dense' variant=\"outlined\">\n                                        <OutlinedInput name=\"name\" id=\"individualprice\" className=\"formTextInput\"\n                                            type=\"number\"\n                                            value={individualItemPrice}\n                                            startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n                                            onChange={(e) => {if(e.target.value >= 0) {setIndividualItemPrice(e.target.value)}}}\n                                            size=\"small\"\n                                        /> \n                                    </FormControl>\n                                    <FormControl error={menuError && ((individualItemPrice === \"\" && familyItemPrice === \"\") || (parseInt(individualItemPrice) < 0))} margin='dense' variant=\"outlined\">\n                                        <OutlinedInput name=\"name\" id=\"familyprice\" className=\"formTextInput\"\n                                            type=\"number\"\n                                            value={familyItemPrice}\n                                            startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n                                            onChange={(e) => {if(e.target.value >= 0) {setFamilyItemPrice(e.target.value)}}}\n                                            size=\"small\"\n                                        /> \n                                    </FormControl>\n                                </div>\n                            </div>\n                            <div className=\"priceSizeContainer\">\n                                <FormHelperText style={{\"margin\": \"0px 40px 10px 40px\"}}>{requiredAsterix()} At least one size must be given a price. If you do not want a particular size available for the item, please leave its price field blank.</FormHelperText>\n                            </div>\n                            {/* Item Addons */}\n                            <p className=\"formLabelText\" style={{\"marginTop\": \"20px\", \"marginBottom\": \"-10px\"}}>Accommodations</p>\n                            <div className=\"priceSizeContainer\">\n                                <div className=\"sizeContainer\">\n                                    <p className=\"formLabelText\">Description</p>\n                                    {addOns.map((item,index) => {\n                                        \n                                        return(\n                                            <FormControl margin='dense'\n                                                error = \n                                                {   menuError && \n                                                    ((item.name === \"\" && item.price !== \"\") || \n                                                    (item.name !== \"\" && item.price === \"\"))\n                                                }\n                                            >\n                                                <OutlinedInput id={item.name + \"nameinput\"} name={item.name + \"nameinput\"} className=\"formTextInput\"\n                                                    required \n                                                    value={item.name}\n                                                    onChange={e => {\n                                                            let addontemp = [...addOns];\n                                                            addontemp[index].name = e.target.value;\n                                                            setAddOns(addontemp);\n                                                        }} \n                                                    size=\"small\"\n                                                />\n                                            </FormControl>\n                                        );\n                                    })}\n                                </div>\n                                \n                                <div className=\"priceContainer\">\n                                    <p className=\"formLabelText\">Price</p>\n                                    {addOns.map((item,index) => {\n                                        return(\n                                            <FormControl margin='dense'\n                                                error = \n                                                {   menuError && \n                                                    ((item.name === \"\" && item.price !== \"\") || \n                                                    (item.name !== \"\" && item.price === \"\")) ||\n                                                    (parseInt(item.price) < 0)\n                                                }\n                                            >\n                                                <OutlinedInput id={item.name + \"priceinput\"} name={item.name + \"priceinput\"} className=\"formTextInput\"\n                                                    required \n                                                    type=\"number\"\n                                                    value={item.price}\n                                                    startAdornment={<InputAdornment position=\"start\">+$</InputAdornment>}\n                                                    onChange={e => {\n                                                            const addontemp = [...addOns];\n                                                            addontemp[index].price = e.target.value;\n                                                            setAddOns(addontemp);\n                                                        }} \n                                                    size=\"small\"\n                                                />\n                                            </FormControl>\n                                        )\n                                    })}\n                                    \n                                </div>\n                                <div className=\"removeAddOnContainer\">\n                                    {addOns.map((item,index) => {\n                                        return(\n                                            <FormControl margin='dense'>\n                                                <IconButton\n                                                    className=\"removeAddOnButton\"\n                                                    onClick={() => {\n                                                        // remove item from addOns\n                                                        const addontemp = [...addOns];\n                                                        addontemp.splice(index, 1);\n                                                        setAddOns(addontemp);\n                                                    }}\n                                                >\n                                                    <ClearIcon/>\n                                                </IconButton> \n                                            </FormControl>\n                                        )\n                                    })}\n                                   \n                                </div>\n                                \n                            </div>\n                            <div className=\"priceSizeContainer\">\n                                <div className=\"sizeContainer\">\n                                    <Button\n                                        className=\"addAddOnButton\"\n                                        onClick={() => {\n                                            const addontemp = [...addOns];\n                                            addontemp.push({name: \"\", price: \"\"});\n                                            setAddOns(addontemp);\n                                        }}\n                                    >\n                                        <AddCircleIcon className=\"menuAddButtonIcon\" />\n                                        Add Accommodation\n                                    </Button>\n                                </div>\n                                <div className=\"priceContainer\"> </div>\n                                <div className=\"removeAddOnContainer\"></div>\n                            </div>\n                            \n                            {/* Item Dietary Information */}\n                            <FormControl fullWidth className=\"formItem\" margin='dense' variant=\"outlined\">\n                                <p className=\"formLabelText\">Dietary Info</p>\n                                <FormGroup row>\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox \n                                                checked={vegan} \n                                                style ={{\n                                                    color: \"#747474\",\n                                                }}\n                                                onChange={(e) => setVegan(e.target.checked)} \n                                                name=\"vegan\" \n                                            />\n                                        }\n                                        label=\"Vegan\"\n                                    />\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox \n                                                checked={vegetarian} \n                                                style ={{\n                                                    color: \"#747474\",\n                                                }}\n                                                onChange={(e) => setVegetarian(e.target.checked)} \n                                                name=\"vegetarian\" \n                                            />\n                                        }\n                                        label=\"Vegetarian\"\n                                    />\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox \n                                                checked={glutenFree} \n                                                style ={{\n                                                    color: \"#747474\",\n                                                }}\n                                                onChange={(e) => setGlutenFree(e.target.checked)} \n                                                name=\"glutenFree\" \n                                            />\n                                        }\n                                        label=\"Gluten Free\"\n                                    />\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox \n                                                checked={containsDairy} \n                                                style ={{\n                                                    color: \"#747474\",\n                                                }}\n                                                onChange={(e) => setContainsDairy(e.target.checked)} \n                                                name=\"containsDairy\" \n                                            />\n                                        }\n                                        label=\"Contains Dairy\"\n                                    />\n                                </FormGroup>\n                            </FormControl>\n                            \n                            {/* Item Description */}\n                            <p className=\"formLabelText\">Description {requiredAsterix()}</p>\n                            <FormControl fullWidth className=\"formLongItem\" margin='dense' error={menuError && itemDescription === \"\"}>\n                                <OutlinedInput name=\"description\" id=\"description\" className=\"formLongInput\" \n                                    value={itemDescription}\n                                    multiline={true}\n                                    rows={3}\n                                    required\n                                    onChange={(e) => setItemDescription(e.target.value)}\n                                    size=\"small\"\n                                />\n                            </FormControl>\n                        </div>\n                        <div className=\"modalFooter\">\n                            <Button className=\"cancelButton\" onClick={() => setShowModal(false)}>\n                                Close\n                            </Button>\n                            <Button className=\"menuAddButton\" onClick={() => handleSubmit()}>\n                                <AddCircleIcon className=\"menuAddButtonIcon\" />\n                                Add Item\n                            </Button>\n                        </div>\n                    </form>\n                </div>\n            </Modal>\n        </>\n    );\n}\n","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/EditMenuItemModal.js",["212","213"],"import React, { useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { Modal, FormControl, Checkbox, FormControlLabel, FormGroup, OutlinedInput, Select, MenuItem, InputAdornment, FormHelperText, Snackbar, IconButton } from '@material-ui/core';\nimport '../css/AddMenuItemModal.css';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport ClearIcon from '@material-ui/icons/Clear';\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\n/*\n    This file contains the modal for editing an item that exists the menu. It's split\n    into sections for each of the form items, including name, image url, category,\n    prices, accommodations, and description. The fields are automatically filled\n    in with the current information from the item for the user to edit.\n    \n    It uses MaterialUI's form control\n    to create the form. \n    The required fields are name, image url, category, description, and price.\n    Price is considered to be filled out if one of the prices is complete (so\n    one of the prices can be empty).\n    Also, a given accommodations is considered to be filled out if it has\n    0 or 2 fields completed. If 0, it is removed, if 1, it is considered incomplete.\n\n    Errors are thrown under the following cases:\n        1. one of the required fields is empty\n        2. one of the accommodations fields has one of the fields filled out\n        3. none of the prices are filled out\n    \n    A new accommodation field can be added if both fields of the previous one\n    has values, if not it will not be added.\n\n    Disclaimer: This file seems really long (it is), but it isn't very hard to\n    understand. A lot of the bulk comes from Material UI's form control handling\n    and general HTML property tags.\n*/\n\n\n// renders a red asterix that indicates a required field\nfunction requiredAsterix(){\n    return (\n        <p className=\"requiredAsterix\">*</p>\n    );\n}\nexport default function EditMenuItemModal (props) {\n\n    const showModal = props.showModal;\n    const setShowModal = props.setCurrentEditItem;\n    const setLoaded = props.setLoaded;\n    // form states\n    const [itemName, setItemName] = useState(props.item.itemName);\n    const [itemCategory, setItemCategory] = useState(props.item.categoryName)\n\n    let [individualItemPrice, setIndividualItemPrice] = useState(props.item.basePrice[0][0] === \"Individual\" ? props.item.basePrice[0][1] : \"\"); \n    let [familyItemPrice, setFamilyItemPrice] = useState(props.item.basePrice[0][0] === \"Family\" ? props.item.basePrice[0][1] : props.item.basePrice.length === 2 ? props.item.basePrice[1][1] : \"\" );\n    \n    const [itemImageURL, setItemImageURL] = useState(props.item.imgSource)\n    const [itemDescription, setItemDescription] = useState(props.item.description)\n    /*  addOns is an array of objects \n    [\n        {\n            name: \"\",\n            price: \"\"\n        }\n    ]\n    */\n    let tempaddon = [];\n    props.item.options.forEach(item => {\n        tempaddon.push({\"name\": item[1].Description, \"price\": item[1].Price});\n    })\n    const [addOns, setAddOns] = useState(tempaddon);\n    \n        // dietary info\n    const [vegan, setVegan] = useState(props.item.dietaryInfo !== undefined ? props.item.dietaryInfo.vegan : false);\n    const [vegetarian, setVegetarian] = useState(props.item.dietaryInfo !== undefined ? props.item.dietaryInfo.vegetarian : false);\n    const [glutenFree, setGlutenFree] = useState(props.item.dietaryInfo !== undefined ? props.item.dietaryInfo.glutenFree : false);\n    const [containsDairy, setContainsDairy] = useState(props.item.dietaryInfo !== undefined ? props.item.dietaryInfo.containsDairy : false);\n\n    const [menuError, setMenuError] = useState(false);\n    const [errorSnackbar, setErrorSnackbar] = useState(false);\n\n    const handleSubmit = async () => {\n        // validate basic input\n        if(itemName === \"\" || \n            itemCategory === \"\" || \n            (individualItemPrice === \"\" && familyItemPrice === \"\") || \n            itemImageURL === \"\" || itemDescription === \"\"\n        ){\n            // if(!validURL(itemImageURL)){\n            //     console.log(\"fail url\");\n            //     setMenuError(true);\n            //     return;\n            // }\n            console.log(\"fail basic\");\n            setMenuError(true);\n            setErrorSnackbar(true);\n            return;\n        }\n        // validate addons\n        let failAddOn = false;\n        addOns.forEach(item => {\n            if((item.price === \"\" && item.name !== \"\") || (item.price !== \"\" && item.name === \"\")){\n                // error\n                console.log(\"fail add on\");\n                failAddOn = true;\n                setMenuError(true);\n                setErrorSnackbar(true);\n                return;\n            }\n            else if(item.name !== \"\" && parseFloat(item.price) < 0){\n                //negative number\n                console.log(\"add on price was negative\");\n                failAddOn = true;\n                setMenuError(true);\n                setErrorSnackbar(true);\n                return;\n            }\n        })\n        if(failAddOn){\n            setMenuError(true);\n            setErrorSnackbar(true);\n            return;\n        }\n        // send to db\n        console.log(\"sending to database\");\n\n        // format data into item object\n        let pricesObj = {};\n        if(individualItemPrice !== \"\"){\n            pricesObj.Individual = individualItemPrice;\n        }\n        if(familyItemPrice !== \"\"){\n            pricesObj.Family = familyItemPrice;\n        }\n        let accommodations = [];\n        addOns.forEach(addon => {\n            if(addon.name !== \"\" && addon.price !== \"\"){\n                accommodations.push({\"Description\": addon.name, \"Price\": addon.price});\n            }\n        })\n        const dietaryInfo = {\n            \"vegan\": vegan,\n            \"vegetarian\": vegetarian,\n            \"glutenFree\": glutenFree,\n            \"containsDairy\": containsDairy,\n        };\n        const itemObject = {\n            \"_id\": props.item.id,\n            \"Name\": itemName,\n            \"pictureURL\": itemImageURL,\n            \"Description\": itemDescription,\n            \"Category\": itemCategory,\n            \"Prices\": pricesObj,\n            \"isFeatured\": false,\n            \"isCompleted\": false,\n            \"Accommodations\": accommodations,\n            \"dietaryInfo\": dietaryInfo\n        }\n        // push to database\n        await fetch(`${BACKEND_URL}item/edit`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify(itemObject)\n        }).then(res => {\n            if(res.ok){\n                alert(\"Your item was updated!\");\n                //refetch\n                setLoaded(false);\n                setShowModal(\"\");\n            }\n            else{\n                alert(\"There was an error. Recheck your inputs and try again\");\n            }\n        })\n        \n    }\n    return (\n        <>\n            {/* Failure Snackbar */}\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                open={errorSnackbar}\n                autoHideDuration={5000}\n                onClose={() => setErrorSnackbar(false)}\n                message={<span id=\"message-id\">There was an error in the form</span>}\n            />\n            <Modal open={showModal} onClose={() => setShowModal(\"\")} \n                className=\"modalContainer\"\n            >\n                <div className=\"modalBackground\">\n                    <div className=\"headerContainer\">\n                    <IconButton\n                        className=\"removeAddOnButton\"\n                        onClick={() => setShowModal(\"\")}\n                    >\n                        <ClearIcon/>\n                    </IconButton>\n                    </div>\n                    <form autocomplete=\"off\">\n                        <div className=\"modalBody\">\n                            {/* Item Name */}\n                            <p className=\"formLabelText\">Name {requiredAsterix()}</p>\n                            <FormControl fullWidth error={menuError && itemName === \"\"} className=\"formItem\" margin='dense'>\n                                <OutlinedInput name=\"name\" id=\"name\" className=\"formTextInput\"\n                                    required \n                                    value={itemName}\n                                    onChange={(e) => setItemName(e.target.value)}\n                                    size=\"small\"\n                                />\n                            </FormControl>\n                            {/* Item Image URL */}\n                            <p className=\"formLabelText\">Image Link {requiredAsterix()}</p>\n                            <FormControl fullWidth error={menuError && itemImageURL === \"\"} className=\"formItem\" margin='dense'>\n                                <OutlinedInput name=\"imageURL\" id=\"imageURL\" className=\"formTextInput\"\n                                    required \n                                    value={itemImageURL}\n                                    onChange={(e) => setItemImageURL(e.target.value)}\n                                    size=\"small\"\n                                />\n                            </FormControl>\n\n                            {/* Item Category */}\n                            <p className=\"formLabelText\">Category Name {requiredAsterix()}</p>\n                            <FormControl fullWidth error={menuError && itemCategory === \"\"} className=\"formItem\" margin='dense' variant=\"outlined\">\n                                <Select name=\"category\" type=\"text\" id=\"category\" className=\"formSelectInput\" required \n                                    placeholder=\"\"\n                                    value={itemCategory}\n                                    onChange={(e) => setItemCategory(e.target.value)}\n                                    size=\"small\"\n                                    displayEmpty\n                                >\n                                    <MenuItem value=\"Appetizers\">Appetizers</MenuItem>\n                                    <MenuItem value=\"Main Dishes\">Main Dishes</MenuItem>\n                                    <MenuItem value=\"Sides\">Sides</MenuItem>\n                                    <MenuItem value=\"Drinks\">Drinks</MenuItem>\n                                </Select>\n                            </FormControl>\n                            {/* Item Sizing and Price */}\n                            <div className=\"priceSizeContainer\">\n                                <div className=\"sizeContainer\">\n                                    <p className=\"formLabelText\">Size</p>\n                                    <FormControl margin='dense'>\n                                        <OutlinedInput name=\"name\" id=\"individuallabel\" className=\"formTextInput\"\n                                            required \n                                            value={\"Individual\"}\n                                            size=\"small\"\n                                            disabled\n                                        />\n                                    </FormControl>\n                                    <FormControl margin='dense'>\n                                        <OutlinedInput name=\"name\" id=\"familylabel\" className=\"formTextInput\"\n                                            required \n                                            value={\"Family\"}\n                                            size=\"small\"\n                                            disabled\n                                        />\n                                    </FormControl>\n                                </div>\n                                \n                                <div className=\"priceContainer\">\n                                    <p className=\"formLabelText\">Price</p>\n                                    <FormControl error={menuError && individualItemPrice === \"\" && familyItemPrice === \"\"} margin='dense' variant=\"outlined\">\n                                        <OutlinedInput name=\"name\" id=\"individualprice\" className=\"formTextInput\"\n                                            type=\"number\"\n                                            value={individualItemPrice}\n                                            startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n                                            onChange={(e) => {if(e.target.value >= 0) {setIndividualItemPrice(e.target.value)}}}\n                                            size=\"small\"\n                                        /> \n                                    </FormControl>\n                                    <FormControl error={menuError && individualItemPrice === \"\" && familyItemPrice === \"\"} margin='dense' variant=\"outlined\">\n                                        <OutlinedInput name=\"name\" id=\"familyprice\" className=\"formTextInput\"\n                                            type=\"number\"\n                                            value={familyItemPrice}\n                                            startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n                                            onChange={(e) => {if(e.target.value >= 0) {setFamilyItemPrice(e.target.value)}}}\n                                            size=\"small\"\n                                        /> \n                                    </FormControl>\n                                </div>\n                            </div>\n                            <div className=\"priceSizeContainer\">\n                                <FormHelperText style={{\"margin\": \"0px 40px 10px 40px\"}}>{requiredAsterix()} At least one size must be given a price. If you do not want a particular size available for the item, please leave its price field blank.</FormHelperText>\n                            </div>\n                            {/* Item Addons */}\n                            <p className=\"formLabelText\" style={{\"marginTop\": \"20px\", \"marginBottom\": \"-10px\"}}>Accommodations</p>\n                            <div className=\"priceSizeContainer\">\n                                <div className=\"sizeContainer\">\n                                    <p className=\"formLabelText\">Description</p>\n                                    {addOns.map((item,index) => {\n                                        \n                                        return(\n                                            <FormControl margin='dense'\n                                                error = \n                                                {   menuError && \n                                                    ((item.name === \"\" && item.price !== \"\") || \n                                                    (item.name !== \"\" && item.price === \"\"))\n                                                }\n                                            >\n                                                <OutlinedInput id={item.name + \"nameinput\"} name={item.name + \"nameinput\"} className=\"formTextInput\"\n                                                    required \n                                                    value={item.name}\n                                                    onChange={e => {\n                                                            let addontemp = [...addOns];\n                                                            addontemp[index].name = e.target.value;\n                                                            setAddOns(addontemp);\n                                                        }} \n                                                    size=\"small\"\n                                                />\n                                            </FormControl>\n                                        );\n                                    })}\n                                </div>\n                                \n                                <div className=\"priceContainer\">\n                                    <p className=\"formLabelText\">Price</p>\n                                    {addOns.map((item,index) => {\n                                        return(\n                                            <FormControl margin='dense'\n                                                error = \n                                                {   menuError && \n                                                    ((item.name === \"\" && item.price !== \"\") || \n                                                    (item.name !== \"\" && item.price === \"\")) ||\n                                                    (parseInt(item.price) < 0)\n                                                }\n                                            >\n                                                <OutlinedInput id={item.name + \"priceinput\"} name={item.name + \"priceinput\"} className=\"formTextInput\"\n                                                    required \n                                                    type=\"number\"\n                                                    value={item.price}\n                                                    startAdornment={<InputAdornment position=\"start\">+$</InputAdornment>}\n                                                    onChange={e => {\n                                                            const addontemp = [...addOns];\n                                                            addontemp[index].price = e.target.value;\n                                                            setAddOns(addontemp);\n                                                        }} \n                                                    size=\"small\"\n                                                />\n                                            </FormControl>\n                                        )\n                                    })}\n                                    \n                                </div>\n                                <div className=\"removeAddOnContainer\">\n                                    {addOns.map((item,index) => {\n                                        return(\n                                            <FormControl margin='dense'>\n                                                <IconButton\n                                                    className=\"removeAddOnButton\"\n                                                    onClick={() => {\n                                                        // remove item from addOns\n                                                        const addontemp = [...addOns];\n                                                        addontemp.splice(index, 1);\n                                                        setAddOns(addontemp);\n                                                    }}\n                                                >\n                                                    <ClearIcon/>\n                                                </IconButton> \n                                            </FormControl>\n                                        )\n                                    })}\n                                   \n                                </div>\n                                \n                            </div>\n                            <div className=\"priceSizeContainer\">\n                                <div className=\"sizeContainer\">\n                                    <Button\n                                        className=\"addAddOnButton\"\n                                        onClick={() => {\n                                            const addontemp = [...addOns];\n                                            addontemp.push({name: \"\", price: \"\"});\n                                            setAddOns(addontemp);\n                                        }}\n                                    >\n                                        <AddCircleIcon className=\"menuAddButtonIcon\" />\n                                        Add Accommodation\n                                    </Button>\n                                </div>\n                                <div className=\"priceContainer\"> </div>\n                                <div className=\"removeAddOnContainer\"></div>\n                            </div>\n                            {/* Item Dietary Information */}\n                            <FormControl fullWidth className=\"formItem\" margin='dense' variant=\"outlined\">\n                                <p className=\"formLabelText\">Dietary Info</p>\n                                <FormGroup row>\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox \n                                                checked={vegan} \n                                                style ={{\n                                                    color: \"#747474\",\n                                                }}\n                                                onChange={(e) => setVegan(e.target.checked)} \n                                                name=\"vegan\" \n                                            />\n                                        }\n                                        label=\"Vegan\"\n                                    />\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox \n                                                checked={vegetarian} \n                                                style ={{\n                                                    color: \"#747474\",\n                                                }}\n                                                onChange={(e) => setVegetarian(e.target.checked)} \n                                                name=\"vegetarian\" \n                                            />\n                                        }\n                                        label=\"Vegetarian\"\n                                    />\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox \n                                                checked={glutenFree} \n                                                style ={{\n                                                    color: \"#747474\",\n                                                }}\n                                                onChange={(e) => setGlutenFree(e.target.checked)} \n                                                name=\"glutenFree\" \n                                            />\n                                        }\n                                        label=\"Gluten Free\"\n                                    />\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox \n                                                checked={containsDairy} \n                                                style ={{\n                                                    color: \"#747474\",\n                                                }}\n                                                onChange={(e) => setContainsDairy(e.target.checked)} \n                                                name=\"containsDairy\" \n                                            />\n                                        }\n                                        label=\"Contains Dairy\"\n                                    />\n                                </FormGroup>\n                            </FormControl>\n                            \n                            {/* Item Description */}\n                            <p className=\"formLabelText\">Description {requiredAsterix()}</p>\n                            <FormControl fullWidth className=\"formLongItem\" margin='dense'\n                                error={menuError && itemDescription === \"\"}\n                            >\n                                <OutlinedInput name=\"description\" id=\"description\" className=\"formLongInput\" \n                                    value={itemDescription}\n                                    multiline={true}\n                                    rows={3}\n                                    required\n                                    onChange={(e) => setItemDescription(e.target.value)}\n                                    size=\"small\"\n                                />\n                            </FormControl>\n                        </div>\n                        <div className=\"modalFooter\">\n                            <Button className=\"cancelButton\" onClick={() => setShowModal(\"\")}>\n                                Close\n                            </Button>\n                            <Button className=\"menuAddButton\" onClick={() => handleSubmit()}>\n                                Save\n                            </Button>\n                        </div>\n                    </form>\n                </div>\n            </Modal>\n        </>\n    );\n}\n","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuFilter.js",["214","215"],"/**\n * Component that groups all filter buttons together. Responsible for sending \n * the relevant props to individual buttons.\n * \n * @summary   Component that groups all filter buttons.\n * @author    Navid Boloorian\n */\n\nimport React, { Component} from 'react';\nimport MenuFilterButton from './MenuFilterButton';\nimport \"../css/MenuFilter.css\";\nconst config = require('../config');\n\nconst MenuFilter = ( {foodCategories, changeVisibleCategories, toggledFilter, setToggledFilter} ) => {\n    return (\n      <div className=\"menu-filter\">\n        {foodCategories.map((categoryName, key) => (\n          // generates filter buttons based on categories\n          <MenuFilterButton toggledFilter={toggledFilter} setToggledFilter={setToggledFilter} categoryName={categoryName} key={key} changeVisibleCategories={changeVisibleCategories()} />\n        ))}\n      </div>\n    )\n  }\n  \n  export default MenuFilter;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItems.js",["216"],"/**\n * Groups MenuItemCategory components for formatting purposes. Renders \n * categories based off of what is being displayed with filters/states. \n * Simplifies passing of props as it centralizes the components.\n * \n * @summary   Grouping of MenuItemCategory components.\n * @author    Navid Boloorian\n */\n\nimport React from 'react';\nimport MenuItemCategory from './MenuItemCategory';\nimport '../css/MenuItems.css';\n\nconst MenuItems = ({ foodCategories, processForm, popupVisible, popupValues, togglePopup }) => {\n\n  return (\n\n      <div className=\"menu-items\">\n        {/** generates categories in the menu */}\n        {foodCategories.map((categoryName, key) => {\n          return <MenuItemCategory key={key} categoryName={categoryName} key={key} processForm={processForm} popupVisible={popupVisible} popupValues={popupValues} togglePopup={togglePopup}/>\n        })}\n      </div>\n\n  )\n}\n  \n  export default MenuItems;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ChangeEmailScreen.js",["217"],"import React, {useState} from 'react';\nimport { Button} from 'react-bootstrap';\nimport TextField from '@material-ui/core/TextField';\n\nimport '../css/ChangeEmailScreen.css';\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\n\n// calls email change route\nasync function handleFormSubmit(email, setInputError){\n    // validate to make sure email is an email. We do this here because\n    // we don't want to overload the server with invalid emails\n    if (email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\n        setInputError(true);\n        return;\n    }\n    await fetch(`${BACKEND_URL}email/change`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                \"email\": email\n            })\n        }).then(res => {\n            if(res.ok){\n                alert(\"Email update successful!\");\n                setInputError(false);\n            }\n            else {\n                setInputError(true);\n            }\n        })\n}\n\nexport default function AdminMenuItems (props) {\n    const [inputEmail, setInputEmail] = useState(\"\");\n    const [inputError, setInputError] = useState(false);\n    // catch enter rerendeing entire admin page\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            handleFormSubmit(inputEmail, setInputError)\n        }\n    }\n    return (\n        <div> \n            <br />\n            <br />\n            <h1 className=\"emailHeading\">Change Email</h1>\n            <p className=\"emailDescription\">Order confirmations and customer inquiries will be sent to this email.</p>\n                <br />\n                    <TextField id=\"email-input\" \n                        size=\"small\"\n                        error={inputError} \n                        value={inputEmail} \n                        type=\"email\" \n                        className=\"emailUpdateInput\" \n                        onChange={(e) => setInputEmail(e.target.value)} \n                        onKeyDown={(e) => handleKeyDown(e)}\n                        label=\"Email\" \n                        variant=\"outlined\"\n                    />\n                <br />\n                <br />\n                <Button id=\"submit\" \n                    className=\"emailUpdateButton\" \n                    onClick={() => handleFormSubmit(inputEmail, setInputError)}\n                >\n                    Update\n                </Button>\n        </div>\n    )\n}\n","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/OrdersTableColumns.js",["218","219"],"/**\n * Contains the details about each column in the Orders Table.\n * \n * Each Column has specific props it requires. For example, \n * \n * The Pickup Details, Order Status, and Submission Details \n * Require their own custom filtering, so they take in props\n * That allow for custom filtering. \n * \n * Order Status contains props for a custom body inside the table\n * Cell. \n * \n * @summary - Column details for orders table\n */\n\n// import helper functions from utils\nimport {\n    renderStatus,\n    DisplayDateFilters,\n    DisplayStatusFilters,\n    updateDateFilters,\n    renderDateFilters    \n} from '../util/OrdersTableFunctions';\n\n// the column headers for the table\nconst columns = [\n    {\n      name: \"Pick up Details\",\n      options: {\n        filter: true,\n        filterType: 'custom',\n        customFilterListOptions: {\n          render: renderDateFilters,\n          update: updateDateFilters\n        },\n        filterOptions: {\n          names: [],\n          logic(date, filters) {\n            const getDate = date.split(\"\\n\")[0];\n            if (filters[0] && filters[1]) {\n              return getDate < filters[0] || getDate > filters[1];\n            } else if (filters[0]) {\n              return getDate < filters[0];\n            } else if (filters[1]) {\n              return getDate > filters[1];\n            }\n            return false;\n          },\n          display: DisplayDateFilters\n        }\n      }  \n    },\n    {\n      name: \"Name\",\n      options: {\n        filter: true,\n        filterType: 'textField'\n      }  \n    },\n    {\n      name: \"Email\",\n      options: {\n        filter: true,\n        filterType: 'textField'\n      }    \n    },\n    {\n      name: \"Phone Number\",\n      options: {\n        filter: true,\n        filterType: 'textField'\n      }  \n    },\n    {\n      name: \"Amount Paid\",\n      options: {\n        filter: false\n      }  \n    },\n    {\n      name: \"Order Description\",\n      options: {\n        display: false, \n        viewColumns: false, \n        filter: false\n      }\n    },\n    {\n      name: \"Submission Details\",\n      options: {\n        filter: true,\n        filterType: 'custom',\n        customFilterListOptions: {\n          render: renderDateFilters,\n          update: updateDateFilters\n        },\n        filterOptions: {\n          names: [],\n          logic(date, filters) {\n            const getDate = date.split(\"\\n\")[0];\n            if (filters[0] && filters[1]) {\n              return getDate < filters[0] || getDate > filters[1];\n            } else if (filters[0]) {\n              return getDate < filters[0];\n            } else if (filters[1]) {\n              return getDate > filters[1];\n            }\n            return false;\n          },\n          display: DisplayDateFilters\n        }\n      }  \n    },\n    {\n      name: \"Order Status\",\n      options: {\n        filter: true,\n        filterType: 'custom',\n        customBodyRender: renderStatus,\n        customFilterListOptions: {\n          render: (options) => {\n            if(options[0] === \"All Orders\") return [];\n            return options;\n          },\n        },\n        filterOptions: {\n          names: [\"Pending Orders\", \"Completed Orders\"],\n          logic(order, filters) {\n            if (filters[0] == \"Completed Orders\") {\n              return order === \"Pending Orders\";\n            } else if (filters[0] == \"Pending Orders\") {\n              return order === \"Completed Orders\";\n            }\n  \n            return false;\n          },\n          display: DisplayStatusFilters\n        }\n      }\n    },\n    {\n      name: \"Row ID\",\n      options: {\n        display: false, \n        viewColumns: false, \n        filter: false\n      }\n    }\n];\n\nexport { columns } ;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/util/OrdersTableFunctions.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItemCategory.js",["220","221"],"/**\r\n * Individual buttons that handle toggle the display of sections onclick. \r\n * Toggling is based on props so that they dynamically change.\r\n * \r\n * @summary   Individual buttons that toggle the display of sections.\r\n * @author    Navid Boloorian\r\n */\r\n\r\nimport React, { useState, useEffect} from 'react';\r\nimport '../css/MenuItemCategory.css';\r\nimport MenuItem from './MenuItem';\r\nimport MenuItemPopup from './MenuItemPopup';\r\n\r\nconst config = require('../config');\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\nconst MenuItemCategory = ({ categoryName, processForm, popupVisible, popupValues, togglePopup }) => {\r\n  // array that stores menu items for the current category\r\n  const [menuItems, setMenuItems] = useState(new Array());\r\n  const menuItemValues = [];\r\n\r\n  /**\r\n   * useEffect() is called to get information from database\r\n   */\r\n  useEffect(() => {\r\n    fetch(`${BACKEND_URL}item/`)\r\n    .then(async result => {\r\n      if (result.ok) {\r\n        const json = await result.json();\r\n\r\n        for(var i = 0; i < json.items.length; i++) {\r\n          // since \"featured\" isn't a category, we need to handle it differently\r\n          let isCategoryEqual = json.items[i].Category === categoryName;\r\n          let isFeatured = (categoryName === \"Featured\") && (json.items[i].isFeatured);\r\n\r\n          // is stored only if the category name is the same as json's category\r\n          if((json.items !== undefined) && (isCategoryEqual || isFeatured)) {\r\n            menuItemValues.push(json.items[i]);\r\n          }\r\n        }\r\n        setMenuItems(menuItemValues);\r\n      }\r\n      else {\r\n        console.log(\"error\");\r\n      }\r\n    })\r\n\r\n  /**\r\n   * sets dependency on categoryName, meaning that whenever categoryName \r\n   * changes, useEffect is called again. This is necessary so that when filters * are clicked data is actually reloaded\r\n   */\r\n  }, [categoryName]);\r\n  \r\n  return (\r\n      <>\r\n        {/** popup is created here, if it is visible it is rendered */}\r\n        {popupVisible ? <MenuItemPopup values={popupValues} togglePopup={togglePopup} processForm={processForm} /> : null}\r\n        <div className=\"menu-item-category\">\r\n          <h2> {categoryName} </h2>\r\n          <div className=\"menu-item-category-grid\">\r\n            {/** generate menu items based off of array */}\r\n            {menuItems.map((menuItem, key) => {\r\n              let title = menuItem.Name;\r\n              let image = menuItem.pictureURL;\r\n              let description = menuItem.Description;\r\n              // since some items will only have a family pricing option, we use individual as the default; if individual doesnt exist, use family instead\r\n              let price = (\"Individual\" in menuItem.Prices) ? menuItem.Prices.Individual : menuItem.Prices.Family\r\n              let accommodations = menuItem.Accommodations;\r\n              let priceOptions = menuItem.Prices;\r\n              let dietaryInfo = menuItem.dietaryInfo;\r\n\r\n              return <MenuItem title={title} image={image} price={price} description={description} togglePopup={togglePopup} key={key} dietaryInfo={dietaryInfo} priceOptions={priceOptions} accommodations={accommodations} />\r\n            })}\r\n          </div>\r\n        </div>\r\n      </>\r\n  )\r\n}\r\n\r\nexport default MenuItemCategory;\r\n","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuFilterButton.js",["222"],"/**\n * Individual buttons that handle toggle the display of sections onclick. \n * Toggling is based on props so that they dynamically change.\n * \n * @summary   Individual buttons that toggle the display of sections.\n * @author    Navid Boloorian\n */\n\nimport React from 'react';\nimport '../css/MenuFilterButton.css';\n\nconst MenuFilterButton = ( {categoryName, changeVisibleCategories, toggledFilter, setToggledFilter} ) => {\n\n    /**\n     * Function that groups the filter toggling state calls.\n     */\n    function updateFilters() {\n      changeVisibleCategories(categoryName);\n      setToggledFilter(categoryName);\n    }\n\n    // logic to check whether or not the filter button should be highlighted\n    let filterMatch = (categoryName === toggledFilter) && (categoryName != \"Whole Menu\");\n\n    return (\n      <button \n        className={`menu-filter-button ${filterMatch ? \"toggled-filter\": \"\"}`}\n        onClick={() => (updateFilters())}>\n        {categoryName} \n      </button>\n    )\n  }\n  \n  export default MenuFilterButton;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItem.js",["223","224"],"/**\n * Component responsible for displaying and formatting items on menu. Bases \n * information on props and displays them accordingly. \n * \n * @summary   Component representing items in the menu.\n * @author    Navid Boloorian\n */\n\nimport React from 'react';\nimport \"../css/MenuItem.css\";\nconst config = require('../config');\n\nconst MenuItem = ( {description, image, price, title, togglePopup, dietaryInfo, priceOptions, accommodations} ) => {\n    return (\n      <div className=\"menu-item\" onClick={() => togglePopup(title, description, priceOptions, image, dietaryInfo, accommodations)}>\n        <div className=\"menu-image\">\n          <img src={image}></img>\n        </div>\n        <div className=\"menu-text\">\n          <h3 className=\"menu-name\">{title}</h3>\n          <p className=\"menu-description\">{description}</p>\n        </div>\n        <div className=\"menu-absolutes\">\n          <p className=\"menu-price\">${price}</p>\n        </div>\n      </div>\n    );\n}\n  \nexport default MenuItem;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItemPopup.js",["225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241"],"/**\r\n * Popup that displays specified item when MenuItem is clicked. Has form to \r\n * pass data to/add items to cart. Popup gives relevant information such as \r\n * pricing, description, additional accommodations etc.\r\n * \r\n * @summary     Displays item information and allows user to add item to cart.\r\n * @author      Aaron Kirk, Navid Boloorian\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport '../css/MenuItemPopup.css';\r\nimport plus from '../media/plus.svg';\r\nimport minus from '../media/minus.svg';\r\n\r\nconst MenuItemPopup = ({ values, togglePopup, processForm }) => {\r\n\r\n    const getInitialAccommodationsCost = () => {\r\n        var sum = 0;\r\n        if(values.get(\"fillIns\") != undefined) {\r\n            values.get(\"accommodations\").forEach((accommodation) => {\r\n                if(values.get(\"fillIns\").accommodations.includes(accommodation.Description)) {\r\n                    sum += parseFloat(accommodation.Price).toFixed(2);\r\n                }\r\n            });\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    const [quantity, setQuantity] = useState((values.get(\"fillIns\") != undefined) ? parseInt(values.get(\"fillIns\").quantity) : 1);\r\n    // if individual price exists, use that as default; otherwise, use family\r\n    const [currPrice, setCurrPrice] = useState((values.get(\"fillIns\") != undefined) ? ((values.get(\"fillIns\").size == \"Individual\") ? values.get(\"price\").Individual : values.get(\"price\").Family) : ((\"Individual\" in values.get(\"price\")) ? values.get(\"price\").Individual : values.get(\"price\").Family));\r\n    const [accommodationCost, setAccommodationCost] = useState(getInitialAccommodationsCost());\r\n    const [totalPrice, setTotalPrice] = useState((parseFloat(currPrice * quantity) + parseFloat(accommodationCost)).toFixed(2));\r\n\r\n    // handles changing price and quantity states\r\n    const changeQuantity = sign => {\r\n        // everything is fixed to 2 decimal places\r\n        if(sign == \"+\") {\r\n            setQuantity(quantity + 1);\r\n            // calulates on quantity + 1 b/c state hasn't updated yet\r\n            setTotalPrice((parseFloat(accommodationCost) + currPrice * (quantity + 1)).toFixed(2));\r\n        }\r\n        else if(sign == \"-\") {\r\n            if(quantity > 1) {\r\n                setQuantity(quantity - 1);\r\n                // calulates on quantity - 1 b/c state hasn't updated yet\r\n                setTotalPrice((parseFloat(accommodationCost) + currPrice * (quantity - 1)).toFixed(2));\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkAccommodationFillIns = accommodation=> {\r\n        if(values.get(\"fillIns\") != undefined) {\r\n            if(values.get(\"fillIns\").accommodations.includes(accommodation.Description)) {\r\n                handleAccommodation(true, accommodation.Price);\r\n                return true;\r\n            }\r\n        } \r\n        return false;\r\n    }\r\n\r\n    //handles toggling price additions from accommodations\r\n    const handleAccommodation = (checked, price) => {\r\n        if(checked) {\r\n            setAccommodationCost((parseFloat(accommodationCost) + parseFloat(price)).toFixed(2));\r\n            setTotalPrice((parseFloat(totalPrice) + parseFloat(price)).toFixed(2));\r\n            return;\r\n        }\r\n        // everything is fixed to 2 decimal places\r\n        if(checked) {\r\n            // parseFloat() is necessary because otherwise they get treated like strings for addition\r\n            setAccommodationCost((parseFloat(accommodationCost) + parseFloat(price)).toFixed(2));\r\n            setTotalPrice((parseFloat(totalPrice) + parseFloat(price)).toFixed(2));\r\n        } else {\r\n            setAccommodationCost((accommodationCost - price).toFixed(2));\r\n            setTotalPrice((totalPrice - price).toFixed(2));\r\n        }\r\n    }\r\n\r\n    // helper function to render the \r\n    const renderSize = (name, price, hasBothPrices) => {\r\n        return(\r\n            /** conditionally displays family size as an \"add-on\" if both are possible */\r\n            <label className=\"choice-label\">\r\n                <input onClick={() => handleSize(price)} type=\"radio\" name=\"size\" value={name} defaultChecked={(name == \"Individual\" || ((values.get(\"fillIns\") != undefined) && values.get(\"fillIns\").size == name) || !(\"Individual\" in values.get(\"price\")))} required />\r\n                <span onClick={() => handleSize(price)} className=\"label-title\">{(hasBothPrices) ? name + \" +($\" + parseFloat(price - values.get(\"price\").Individual).toFixed(2) + \")\": name}</span>\r\n            </label>\r\n        );\r\n    }\r\n    // will be used when family price is introduced to toggle between\r\n    const handleSize = (newPrice) => {\r\n        setCurrPrice(newPrice);\r\n        // currPrice has yet to update, so still using newPrice\r\n        // fix to 2 decimal places\r\n        setTotalPrice((parseFloat(accommodationCost) + newPrice * (quantity)).toFixed(2));\r\n    }\r\n\r\n    const renderAccommodations = () => {\r\n        // return nothing if there are no accommodations\r\n        if(values.get(\"accommodations\").length == 0) return;\r\n        else {\r\n            return (\r\n                /** Header */\r\n                <div className=\"section accommodations-section\">\r\n                <div className=\"section-title\">\r\n                    <h3>Accommodations</h3>\r\n                    <i>optional</i>\r\n                </div>\r\n                {/* map through and render all accommodations */}\r\n                {values.get(\"accommodations\").map((accommodation) => {\r\n                    return(\r\n                        <label className=\"choice-label\">\r\n                            <input type=\"checkbox\" name=\"accommodations\" defaultChecked={values.get(\"fillIns\") != undefined && values.get(\"fillIns\").accommodations.includes(accommodation.Description)} value={accommodation.Description} id={accommodation.Description} onChange={(e) => handleAccommodation(e.target.checked, accommodation.Price)} />\r\n                            <span className=\"label-title\">{accommodation.Description + \" +($\" + parseFloat(accommodation.Price).toFixed(2) + \")\"}</span>\r\n                        </label>\r\n                    );\r\n                })}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    const numDietaryInfo = () => {\r\n        const dietaryInfo = Object.entries(values.get(\"dietary-info\"));\r\n        var count = 0;\r\n        for (const [key, value] of dietaryInfo) {\r\n            if(value) count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    const renderDietaryInfo = () => {\r\n        if (numDietaryInfo() == 0) return;\r\n        else {\r\n            return (\r\n                <>\r\n                <hr/>\r\n                <p className=\"dietary-info\">\r\n                    {(values.get(\"dietary-info\").vegan) ? \"*Vegan\" : null}\r\n                    {(values.get(\"dietary-info\").vegan) ? <br/> : null}\r\n                    {(values.get(\"dietary-info\").vegetarian) ? \"*Vegetarian\" : null}\r\n                    {(values.get(\"dietary-info\").vegetarian) ? <br/> : null}\r\n                    {(values.get(\"dietary-info\").glutenFree) ? \"*Gluten-free\" : null}\r\n                    {(values.get(\"dietary-info\").glutenFree) ? <br/> : null}\r\n                    {(values.get(\"dietary-info\").containsDairy) ? \"*Contains Dairy\" : null}\r\n                </p>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/** div that fades out the background */}\r\n            <div className=\"greyout\" onClick={togglePopup}></div>\r\n            <div className=\"menu-item-popup\">\r\n                <span className=\"close-button\" onClick={togglePopup}>+</span>\r\n                <div className=\"group-popup\">\r\n\r\n                    {/** Left side with dish details */}\r\n                    <div className=\"left-popup\">\r\n                        <div className=\"popup-image\" style={{backgroundImage: \"url(\" + values.get(\"image\") + \")\", backgroundSize:\"cover\"}}>\r\n                            <div className=\"popup-image-price\"><h3>{\"$\" + parseFloat(currPrice).toFixed(2)}</h3></div>\r\n                        </div>\r\n                        <div className=\"popup-item-info\">\r\n                            <h3 className=\"title-popup\">{values.get(\"title\")}</h3>\r\n                            <p className=\"desc-popup\">{values.get(\"description\")}</p>\r\n                            {renderDietaryInfo()}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/** right side with order options */}\r\n                    <div className=\"right-popup\">\r\n                        <form onSubmit={processForm} id=\"popup-form\">\r\n\r\n                            {/** sizing options */}\r\n                            <div className=\"section size-section\">\r\n                                <div className=\"section-title\">\r\n                                    <h3>Choose Size</h3>\r\n                                    <i>required</i>\r\n                                </div>\r\n                                {/** checks to ensure individual/family sizes exist; conditionally displays family size as an \"add-on\" if both are possible */}\r\n                                {(\"Individual\" in values.get(\"price\")) ? renderSize(\"Individual\", values.get(\"price\").Individual, false) : null}\r\n                                {(\"Family\" in values.get(\"price\")) ? renderSize(\"Family\", values.get(\"price\").Family, (\"Individual\" in values.get(\"price\"))) : null}\r\n                            </div>\r\n\r\n                            {/** accommodations options */}\r\n                            {renderAccommodations()}\r\n\r\n                            {/** custom instructions text area */}\r\n                            <div className=\"section instructions-section\">\r\n                                <div className=\"section-title\">\r\n                                    <h3>Special Instructions</h3>\r\n                                    <i>optional</i>\r\n                                </div>\r\n                                <p className=\"instructions-note\">Special accommodations can be made for orders placed in advanced but are not guaranteed, please <a href=\"/contact\">contact us</a> directly for more info.</p>\r\n                                <textarea name=\"instructions\" maxLength=\"75\" className=\"instructions-textarea\">{(values.get(\"fillIns\") != undefined) ? values.get(\"fillIns\").instructions : \"\"}</textarea>\r\n                            </div>\r\n\r\n                            {/** quantity selection */}\r\n                            <div className=\"section quantity-section\">\r\n                                <div className=\"section-title\"><h3>Quantity</h3></div>\r\n                                <div className=\"quantity-buttons\">\r\n                                    <button type=\"button\" className=\"button decrease-button\" onClick={() => {changeQuantity(\"-\");}\r\n                                    }><img src={minus} alt=\"Decrease Quantity\" /></button>\r\n                                    <span className=\"quantity-number\">{quantity}</span>\r\n                                    <button type=\"button\" className=\"button increase-button\" \r\n                                    onClick={() => {changeQuantity(\"+\");}}><img src={plus} alt=\"Increase Quantity\" /></button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/** hidden fields to pass along to the total price and  quantity */}\r\n                            <input name=\"popupValues\" type=\"hidden\" value={JSON.stringify(Object.fromEntries(values))} />\r\n                            <input name=\"price\" type=\"hidden\" value={parseFloat(totalPrice).toFixed(2)} />\r\n                            <input name=\"quantity\" type=\"hidden\" value={quantity} />\r\n                            <input className=\"submit-order-button\" type=\"submit\" value={(values.get(\"fillIns\") != undefined) ? \"Save Changes: $\" + totalPrice : \"Add \" + quantity + \" to cart: $\" + totalPrice} />\r\n                        </form>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n  \r\n    export default MenuItemPopup;\r\n","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/CartSummary.js",["242","243","244","245","246"],"/**\n * Cart summary component that contains the entire checkout process. It renders the cart as a popup on\n * desktop/tablet and as a separate page on mobile, and includes a date and time picker, a list of the\n * items in the cart with the option to edit or remove each item, the total price, and the paypal\n * component to pay for the order. This file depends on the Navbar, PayPal, CustomTimePicker, and\n * MenuItemPopup components.\n * \n * @summary Displays the cart and checkout process, with functionality to select pickup date/time and \n * edit cart.\n * @author Dhanush Nanjunda Reddy\n */\nimport React, { useState, useEffect } from 'react';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport DateFnsUtils from '@date-io/date-fns';\nimport moment from \"moment\";\nimport '../css/CartSummary.css';\nimport { Button } from 'react-bootstrap';\nimport CustomTimePicker from '../components/CustomTimePicker';\nimport { useCookies } from 'react-cookie';\nimport { useHistory } from \"react-router-dom\";\nimport PayPal from '../components/PayPal';\nimport Navbar from '../components/NavBar';\nimport MenuItemPopup from '../components/MenuItemPopup';\n\n/**\n * displays items currently in the cart and updates subtotal, tax, and total\n * \n * @param {*} cart - current cart object\n * @param {*} popupFunc - function to call to edit an item\n * @param {*} removeItem - function to call to remove an item\n * @returns {div} - a div that contains all items, one on each row\n */\nfunction loadItems(cart, popupFunc, removeItem) {\n    return (\n        <div>\n            {/* iterates through cart items and displays each in a row */}\n            {cart.items.map((item, ind) => {\n\n                const popupValues = JSON.parse(item.popupValues);\n\n                //checks if any accommodations were selected and adds them to be displayed\n                let accom = \"\";\n                if (item.accommodations && Array.isArray(item.accommodations)) {\n                    item.accommodations.forEach((accommodation) => {\n                        accom = accom + \", \" + accommodation;\n                    })\n                } else if (item.accommodations) {\n                    accom = \", \" + item.accommodations;\n                }\n\n                //item size and accommodations that need to be displayed\n                let size = item.size;\n                let extraInfo = size + accom;\n\n                //object to be passed in to MenuItemPopup when edit button is clicked\n                const fillIns = {\n                    quantity: item.quantity,\n                    size: item.size,\n                    instructions: item.instructions,\n                    index: ind,\n                    accommodations: item.accommodations ? item.accommodations : []\n                }\n\n\n                return (\n                    <div key={ind} className=\"summary-item\">\n                        <div className=\"item-wrapper\">\n                            <span className=\"thumbnail-background thumb-image\">{ind + 1}</span>\n                            <span className=\"item-name\">{item.quantity} X {popupValues.title}<br />\n                                <span className=\"item-descript\">{extraInfo}<br />\n\n                                    {/* Conditonally renders a new line with special instructions if any were added */}\n                                    {(item.instructions !== \"\") ? <div><br /><span>Special Instr.: {item.instructions}</span></div> : null}\n                                </span></span>\n\n                            {/* Opens MenuItemPopup to edit item details */}\n                            <button className=\"edit-button\" onClick={() => popupFunc(popupValues.title, popupValues.description, popupValues.price, popupValues.image, popupValues[\"dietary-info\"], popupValues.accommodations, fillIns)}>Edit</button>\n\n                            {/* Removes item from the cart */}\n                            <button className=\"remove-button\" onClick={() => removeItem(ind)}>Remove</button>\n                            <span className=\"thumbnail-background summary-price\">${item.price}</span>\n                        </div>\n                        <span className=\"item-divide\"></span>\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\n/**\n * Renders the cart summary popup on deskopt/tablet and page on mobile\n * \n * @param {*} props - values passed down from parent component\n */\nexport default function CartSummary(props) {\n    let history = useHistory();\n\n    //stores cookie object and function to update cookie\n    const [cookies, setCookie] = useCookies([\"cart\"]);\n\n    //stores date that is selected\n    const [selectedDate, setSelectedDate] = useState(null);\n\n    //stored time that is selected\n    const [selectedTime, setSelectedTime] = useState(null);\n\n    //stores time object to pass to PayPal component\n    const [cartTime, setCartTime] = useState(null);\n\n    //stores whether the window size is mobile or not\n    const [isMobile, setIsMobile] = useState((window.innerWidth < 768) ? true : false);\n\n    //stores the error message for time picker\n    const [error, setError] = useState(\"\");\n\n    //stores the cart object\n    const [cart, setCart] = useState({\n        cart_total: props.total || cookies.cart.total,\n        item_total: props.subtotal || cookies.cart.subtotal,\n        tax_total: props.tax || cookies.cart.tax,\n        items: props.items || cookies.cart.items\n    });\n\n    // stores whether or not the item popup is currently visible\n    const [popupVisible, setPopupVisible] = useState(false);\n\n    // map with all of the data that will be displayed in the item popup\n    const [popupValues, setPopupValues] = useState(new Map());\n\n    // placeholder for rendering Paypal component until props handling is fixed in that component\n    const [paypalCart, setPaypalCart] = useState({\n        cart_total: \"00.00\",\n        item_total: \"00.00\",\n        tax_total: \"00.00\",\n        items: [],\n        pickup_date: \"\"\n    });\n\n    /**\n     * updates item in cart to reflect changes made in item popup\n     * \n     * @param {*} item - edited item object to add to cart\n     */\n    const onItemEdit = (item) => {\n        //gets current cart object from cookies\n        let cart = cookies.cart;\n\n        const popupValues = JSON.parse(item.popupValues);\n        \n        //replaced old item with edited item and updates totals\n        let oldItem = cart.items[popupValues.fillIns.index];\n        cart.items.splice(popupValues.fillIns.index, 1);\n        cart.items.splice(popupValues.fillIns.index, 0, item);\n        cart.subtotal = (parseFloat(cart.subtotal) - parseFloat(oldItem.price) + parseFloat(item.price)).toFixed(2);\n        cart.tax = (parseFloat(cart.subtotal) * 0.0775).toFixed(2);\n        cart.total = (parseFloat(cart.subtotal) + parseFloat(cart.tax)).toFixed(2);\n\n        //updates cart cookie and state values to rerender page\n        setCookie(\"cart\", cart, { path: \"/\" });\n        const newCart = {\n            cart_total: cart.total,\n            item_total: cart.subtotal,\n            tax_total: cart.tax,\n            items: cart.items\n        }\n        setCart(newCart);\n\n        //calls parent function to update its states\n        if(!isMobile) {\n            props.updateItems();\n        }\n    }\n\n    /**\n     * processes the form submitted from the item popup\n     * \n     * @param {*} e - event object from form submission\n     */\n    const processForm = e => {\n        // prevents page reload\n        e.preventDefault();\n\n        // gets the form data\n        var data = new FormData(e.target);\n        var object = {};\n\n        // goes through and makes an object from the FormData\n        data.forEach((value, key) => {\n            if (!Reflect.has(object, key)) {\n                object[key] = value;\n                return;\n            }\n\n            if (!Array.isArray(object[key])) {\n                object[key] = [object[key]];\n            }\n            object[key].push(value);\n        });\n\n        // calls function to add item from item popup to cart\n        onItemEdit(object);\n\n        // when submit button is clicked, the popup is closed\n        togglePopup();\n    }\n\n    /**\n     * closes item popup when open and opens popup when closed\n     * \n     * @param {*} title - name of the item\n     * @param {*} description - item description\n     * @param {*} price - item price\n     * @param {*} image - item image\n     * @param {*} dietaryInfo - dietary info for the item\n     * @param {*} accommodations - accommodation options for the item\n     * @param {*} fillIns - already selected values for this item\n     */\n    const togglePopup = (title, description, price, image, dietaryInfo, accommodations, fillIns) => {\n        setPopupVisible(!popupVisible);\n\n        // sets the values of the map based on passed-in information\n        popupValues.set(\"title\", title);\n        popupValues.set(\"description\", description);\n        popupValues.set(\"price\", price);\n        popupValues.set(\"image\", image);\n        popupValues.set(\"dietary-info\", dietaryInfo);\n        popupValues.set(\"accommodations\", accommodations);\n        popupValues.set(\"fillIns\", fillIns);\n\n        setPopupValues(popupValues);\n    }\n\n    /**\n     * updates selectedDate state to chosen date\n     * \n     * @param {*} date - Date object of chosen date\n     */\n    const handleDateChange = (date) => {\n        setSelectedDate(date);\n    }\n\n    /**\n     * disables any invalid dates (less than 3 days from current date)\n     * \n     * @param {*} date - Date object of some arbitrary date\n     */\n    const disableDates = (date) => {\n        let currDate = new Date();\n        const numDays = new Date(currDate.getFullYear(), currDate.getMonth() + 1, 0).getDate();\n        return (currDate.getMonth() === date.getMonth() && date.getDate() - 3 < currDate.getDate()) || (currDate.getMonth() + 1 === date.getMonth() && date.getDate() < currDate.getDate() + 3 - numDays);\n    }\n\n    /**\n     * Removes the item at index ind from the cart\n     * \n     * @param {*} ind - index of the item to be removed \n     */\n    const handleRemove = (ind) => {\n        //gets current cart object from cookies\n        let cart = cookies.cart;\n\n        //modifies cart object values to remove the item at index ind\n        cart.subtotal = (parseFloat(cart.subtotal) - parseFloat(cart.items[ind].price)).toFixed(2);\n        cart.tax = (parseFloat(cart.subtotal) * 0.0775).toFixed(2);\n        cart.total = (parseFloat(cart.subtotal) + parseFloat(cart.tax)).toFixed(2);\n        cart.items.splice(ind, 1);\n\n        //updates cart cookie and state values to rerender page\n        setCookie(\"cart\", cart, { path: \"/\" });\n        const newCart = {\n            cart_total: cart.total,\n            item_total: cart.subtotal,\n            tax_total: cart.tax,\n            items: cart.items\n        }\n        setCart(newCart);\n    }\n\n    /**\n     * Loads cart page if window size is mobile \n     */\n    useEffect(() => {\n        window.addEventListener('resize', function () {\n            if (window.innerWidth >= 768) {\n                history.push({\n                    pathname: \"/\",\n                    cartVisible: true,\n                });\n            }\n        });\n    })\n\n    return (\n        <div>\n        {/* Renders item popup if an item is being edited */}\n        {popupVisible ? <MenuItemPopup values={popupValues} togglePopup={togglePopup} processForm={processForm} /> : null}\n        <div className=\"cart-wrapper\">\n            {(isMobile) ? <div className=\"navbar-wrapper\">\n                <Navbar />\n            </div> : <div className=\"background\" onClick={props.toggleCart}></div>}\n            <div className=\"cart-popup\">\n                <span className=\"pickup-title\">Choose Pickup Time</span>\n                <div className=\"date-time\">\n                    <div className=\"date-picker\">\n                        {/* Date picker to select a pickup date */}\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                            <KeyboardDatePicker\n                                disableToolbar\n                                variant=\"inline\"\n                                format=\"MM/dd/yyyy\"\n                                margin=\"normal\"\n                                id=\"date-picker-inline\"\n                                label=\"Date\"\n                                value={selectedDate}\n                                onChange={handleDateChange}\n                                disablePast={true}\n                                shouldDisableDate={disableDates}\n                                KeyboardButtonProps={{\n                                    'aria-label': 'change date',\n                                }}\n                                inputProps={\n                                    isMobile ?\n                                        {\n                                            style: {\n                                                fontSize: \"3vw\"\n                                            }\n                                        } : {}}\n                                InputLabelProps={\n                                    isMobile ?\n                                        {\n                                            style: {\n                                                fontSize: \"3vw\"\n                                            }\n                                        } : {}}\n                            />\n                            {(!selectedDate || !selectedTime) ? <p className=\"select-error\">Please select a date and a time</p> : null}\n                        </MuiPickersUtilsProvider>\n                    </div>\n                    {/* Time picker to select a pickup time */}\n                    <CustomTimePicker\n                        label=\"Time\"\n                        value={selectedTime}\n                        setSelectedTime={(time) => {\n                            const minTime = moment(\"7:59 AM\", \"HH:mm A\");\n                            const maxTime = moment(\"6:01 PM\", \"HH:mm A\");\n                            let errorMsg = \"\";\n                            if (minTime.isBefore(time) && maxTime.isAfter(time)) {\n                                setSelectedTime(time.format(\"HH:mm A\"));\n                                setCartTime(time.format(\"HH:mm:ss\"));\n                                errorMsg = false;\n                            } else {\n                                errorMsg = \"Select between 8:00 AM and 6:00 PM\";\n                            }\n                            setError(errorMsg);\n                        }}\n                        setSize={isMobile}\n                        errorMessage={error}\n                    />\n                </div>\n                <p className=\"pickup-date-info\">NOTE: Earliest pickup is 3 days after order has been placed</p>\n                <h1 className=\"summary-title\">Order Summary</h1>\n                <div className=\"cart-items\">\n                    {/* loads and displays all items currently in the cart */}\n                    {(props.removeItem) ? loadItems(cart, togglePopup, props.removeItem) : loadItems(cart, togglePopup, handleRemove)}\n                </div>\n                <div className=\"order-totalprices\">\n                    <br />\n                        Subtotal: ${cart.item_total}<br />\n                        Tax: ${cart.tax_total}<br />\n                        Total Price: ${cart.cart_total}\n                </div>\n                {/* Renders an error message if cart total is less than the $20 minimum */}\n                <div className=\"order-minimum\">\n                    {(parseFloat(cart.cart_total) < 20) ? <span>Order minimum is $20. Please add ${(20 - parseFloat(cart.cart_total)).toFixed(2)} to your cart to proceed to checkout.</span> : null}\n                </div>\n                {/* Renders PayPal component if all required fields are completed and return to menu button otherwise */}\n                <div className=\"return-button\">\n                    {(selectedTime && selectedDate && parseFloat(cart.cart_total) >= 20) ? <PayPal cart={paypalCart} /> : <Button style={{ backgroundColor: \"#f9ce1d\", borderColor: \"#f9ce1d\", color: \"#000000\" }} className=\"return\" onClick={(isMobile) ? () => history.push(\"/\") : () => props.toggleCart()}>Return to Menu</Button>}\n                </div>\n            </div>\n        </div>\n        </div>\n    )\n}","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Emails.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ChangeHeaderModal.js",["247","248"],"/**\n * Modal used to change the header image of the Menu page. The modal renders\n * whenever the \"Change Header\" button from AdminMenuItems.js is clicked. It\n * contains a simple form used to update the URL of the header image of the\n * Menu page.\n * \n * An error is thrown if and only if the \"Image Link\" field is empty.\n *\n * Note: the backend functionality for this modal, which stores the menu header\n * image URL in the database, throws an error in case of inserting a duplicate\n * URL or an invalid URL. This case is handled by the backend, and the frontend\n * displays an error message to let the user know.\n * \n * @summary     Modal used to change the header image of the Menu page.\n */\n\nimport React, { useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { Modal, FormControl, OutlinedInput, Snackbar, IconButton } from '@material-ui/core';\nimport '../css/ChangeHeaderModal.css';\nimport ClearIcon from '@material-ui/icons/Clear';\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\n/**\n * Renders a red asterisk that indicates a required field.\n * \n * @returns {HTMLParagraphElement} - Red asterisk to indicate a required field\n */\nfunction requiredAsterisk(){\n    return (\n        <p className=\"requiredAsterisk\">*</p>\n    );\n}\n\n/**\n * Renders the modal used to change the URL of the Menu page's header image.\n * \n * @param {boolean} changeHeaderModal - show/hide modal\n * @param {function} setChangeHeaderModal - set changeHeaderModal\n * @param {function} setLoaded - sets AdminMenuItems.js loaded state\n * @param {string} headerImageUrl - current header image URL\n * @returns {HTMLElement} - A modal with implemented functionality\n */\nexport default function ChangeHeaderModal (props){\n    // inherit display functions as props\n    const showModal = props.changeHeaderModal;\n    const setShowModal = props.setChangeHeaderModal;\n    const setLoaded = props.setLoaded;\n\n    // error handling\n    const [menuError, setMenuError] = useState(false);\n    const [errorSnackbar, setErrorSnackbar] = useState(false);\n\n    // form's states\n    const [headerImageURL, setHeaderImageURL] = useState(props.headerImageURL);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        // validate input\n        if (headerImageURL === \"\")\n        {\n            console.log(\"failed header image input\");\n            setMenuError(true);\n            setErrorSnackbar(true);\n            return;\n        }\n        // create the object to oush to the database\n        const imageURLObject = {\n            \"imageUrl\": headerImageURL,\n        }\n        // push to database\n        await fetch(`${BACKEND_URL}menuImages/changeMenuImage`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify(imageURLObject)\n        }).then(res => {\n            // success\n            if(res.ok){\n                alert(\"The header image was changed!\");\n                // refetch\n                setLoaded(false);\n                setShowModal(false);\n            }\n            // failure\n            else{\n                console.log(\"failed header image input\");\n                setMenuError(true);\n                setErrorSnackbar(true);\n                return;\n            }\n        })\n\n    }\n    return(\n        <>\n            {/* Failure Snackbar */}\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                open={errorSnackbar}\n                autoHideDuration={5000}\n                onClose={() => setErrorSnackbar(false)}\n                message={<span id=\"message-id\">URL is either already in use or invalid</span>}\n            />\n            {/* Change header image Modal */}\n            <Modal open={showModal} onClose={() => setShowModal(false)} \n                className=\"modalContainer\" style={{display:'flex',alignItems:'center',justifyContent:'center'}}\n            >\n                <div className=\"modalBackground\">\n                    <div className=\"modalHeader\">\n                        {/* Modal close button */}\n                        <IconButton className=\"closeModalButton\" \n                            onClick={() => setShowModal(false)}\n                        >\n                            <ClearIcon/>\n                        </IconButton>\n                    </div>\n                    <form autocomplete=\"off\" onSubmit={(e) => handleSubmit(e)}>\n                        <div className=\"modalBody\">\n                            {/* Header image URL */}\n                            <p className=\"formLabelText\">Image Link {requiredAsterisk()}</p>\n                            <FormControl fullWidth error={menuError && headerImageURL === \"\"} className=\"formItem\" margin='dense'>\n                                <OutlinedInput name=\"imageUrl\" id=\"imageUrl\" className=\"formTextInput\"\n                                    value={headerImageURL}\n                                    onChange={(e) => setHeaderImageURL(e.target.value)}\n                                    size=\"small\"\n                                />\n                            </FormControl>\n                        </div>\n                        <div className=\"modalFooter\">\n                            {/* Change header button */}\n                            <Button className=\"changeHeaderButton\" type=\"submit\">\n                                Change Header\n                            </Button>\n                        </div>\n                    </form>\n                </div>\n            </Modal>\n        </>\n    );\n}","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ChangeSecondaryEmailScreen.js",["249","250","251"],"/**\n * This file renders the information related to the secondary emails.\n * It displays all the current secondary emails that that admin \n * user has authorized.\n * It makes two calls to the backend:\n * \n *  1) POST call to add secondary email\n *  2) DELETE call to remove a secondary email\n * \n * @summary     Handles functionality of secondary emails on Admin page.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport TextField from '@material-ui/core/TextField';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusCircle, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport '../css/ChangeEmailScreen.css';\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\n// styling for the MUI form\nconst useStyles = makeStyles((theme) => ({\n    span: {\n      \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n        borderColor: \"black\"\n      },\n      \"& .MuiInputLabel-outlined.Mui-focused\": {\n        color: \"black\"\n      }\n    }\n}));\n\n/**\n * Renders the node containing the email addresses.\n * \n * @param {string} email - Secondary email\n * @param {array} secondaryEmails - List of all current secondary emails\n * @param {function} setSecondaryEmails - Function to update secondary emails list\n * @param {function} updateSecondaryEmails - Parent function to update parent state \n * @returns {component} - Renders the node with email\n */\nconst renderNode = (email, secondaryEmails, setSecondaryEmails, updateSecondaryEmails) => {\n    // delete the email from the database\n    const deleteItem = () => {\n        fetch(`${BACKEND_URL}email/removeSecondary`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                email: email\n            })\n        })\n        .then(res => res.json())\n        .then(data => {\n            if(data.success) {\n                // update the array in the current class\n                // and in the parent class\n                const arr = secondaryEmails.filter(a => a !== email);\n                setSecondaryEmails(arr);\n                updateSecondaryEmails(arr);\n            }\n        })    \n    }\n    \n    return (\n        <div>\n            <p className=\"secondary-email-name\">{email}</p>\n            <FontAwesomeIcon icon={faTrash} className=\"trash-icon\" \n                onClick={(e) => deleteItem()}\n            />\n        </div>\n    )\n}\n\n// styling used for the plus icon\nconst plusIcon = {\n    color: 'white',\n    marginRight: 'calc(0.5vw)'\n}\n\nexport default function ChangeSecondaryEmailScreen (props) {\n    const classes = useStyles();\n    const updateSecondaryEmails = props.updateSecondaryEmails;\n    const [secondaryEmails, setSecondaryEmails] = useState([]);\n    const [primaryEmail, setPrimaryEmail] = useState(\"\");\n    const [addSecondaryEmail, setAddSecondaryEmail] = useState(\"\");\n    const [inputError, setInputError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    // allows user to press 'enter' to submit\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            addEmail(addSecondaryEmail);    \n        }\n    }\n\n    // loads all emails from the parent class\n    useEffect(() => {\n        setSecondaryEmails(props.emails);\n        setPrimaryEmail(props.primaryEmail);\n    }, [props])\n\n    /**\n     * Adds the email to the database.\n     * \n     * @param {string} addSecondaryEmail - Email to add\n     */\n    const addEmail = (addSecondaryEmail) => {\n        // make sure email is not a primary email \n        if(addSecondaryEmail === primaryEmail) {\n            setErrorMessage(\"This is currently your primary email.\"); \n            setInputError(true);\n            return;\n        }\n\n        // make sure the email follows proper format\n        if (addSecondaryEmail && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(addSecondaryEmail) || addSecondaryEmail.length === 0) {\n            setErrorMessage(\"Enter a valid email address.\");\n            setInputError(true);\n            return;\n        }\n\n        fetch(`${BACKEND_URL}email/addSecondary`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                email: addSecondaryEmail\n            })\n        })\n        .then(res => res.json())\n        .then(data => {\n            if(data.success) {\n                // update the parent's array and the child's array\n                const getNewEmail = addSecondaryEmail;\n                const arr = secondaryEmails.concat(getNewEmail)\n                setSecondaryEmails(arr);\n                updateSecondaryEmails(arr);\n                // clear the textfield\n                setAddSecondaryEmail(\"\");\n                // clear any error handling\n                setInputError(false);\n                setErrorMessage(\"\");\n            } else {\n                // error handling\n                setErrorMessage(\"This email is already listed as a secondary email.\"); \n                setInputError(true);\n            }\n        })\n    }\n\n    return (\n        <div className=\"secondary-emails-container\"> \n            <h1 className=\"emailHeading\">Change Secondary Email</h1>\n            <p className=\"emailDescription\">Order confirmations will be sent to this email.</p>\n            \n            <div className=\"secondary-emails\">\n                {secondaryEmails.map((secondary, ind) => (\n                    renderNode(secondary, secondaryEmails, setSecondaryEmails, updateSecondaryEmails)\n                ))}\n            </div>\n            \n            {/* The textfield */}\n            <div className=\"add-secondary-email\">\n                <span className={classes.span}>\n                    <TextField id=\"email-input\" \n                        size=\"small\"\n                        error={inputError} \n                        value={addSecondaryEmail} \n                        type=\"email\" \n                        onChange={(e) => setAddSecondaryEmail(e.target.value)} \n                        onKeyDown={(e) => handleKeyDown(e)}\n                        label=\"Add Secondary Email\" \n                        variant=\"outlined\"\n                        helperText={errorMessage}\n                        id=\"secondaryEmail\"\n                    />\n                </span>\n\n                <Button id=\"submit\" className=\"emailAddButton\" \n                    onClick={(e) => addEmail(addSecondaryEmail)}\n                >   \n                    {/* The \"add\" icon */}\n                    <FontAwesomeIcon icon={faPlusCircle} style={plusIcon} />\n                        Add\n                </Button>\n            </div>\n        </div>\n    )\n}\n",{"ruleId":"252","replacedBy":"253"},{"ruleId":"254","replacedBy":"255"},{"ruleId":"256","severity":1,"message":"257","line":16,"column":8,"nodeType":"258","messageId":"259","endLine":16,"endColumn":14},{"ruleId":"256","severity":1,"message":"260","line":7,"column":7,"nodeType":"258","messageId":"259","endLine":7,"endColumn":18},{"ruleId":"261","severity":1,"message":"262","line":39,"column":10,"nodeType":"263","endLine":39,"endColumn":12,"suggestions":"264"},{"ruleId":"261","severity":1,"message":"262","line":77,"column":6,"nodeType":"263","endLine":77,"endColumn":8,"suggestions":"265"},{"ruleId":"261","severity":1,"message":"262","line":79,"column":6,"nodeType":"263","endLine":79,"endColumn":8,"suggestions":"266"},{"ruleId":"267","severity":1,"message":"268","line":44,"column":21,"nodeType":"269","messageId":"270","endLine":44,"endColumn":23},{"ruleId":"267","severity":1,"message":"268","line":53,"column":35,"nodeType":"269","messageId":"270","endLine":53,"endColumn":37},{"ruleId":"256","severity":1,"message":"271","line":84,"column":9,"nodeType":"258","messageId":"259","endLine":84,"endColumn":13},{"ruleId":"267","severity":1,"message":"272","line":29,"column":26,"nodeType":"269","messageId":"270","endLine":29,"endColumn":28},{"ruleId":"273","severity":1,"message":"274","line":41,"column":7,"nodeType":"275","endLine":41,"endColumn":111},{"ruleId":"256","severity":1,"message":"276","line":1,"column":28,"nodeType":"258","messageId":"259","endLine":1,"endColumn":37},{"ruleId":"277","severity":1,"message":"278","line":24,"column":21,"nodeType":"279","endLine":24,"endColumn":31},{"ruleId":"277","severity":1,"message":"278","line":25,"column":21,"nodeType":"279","endLine":25,"endColumn":31},{"ruleId":"277","severity":1,"message":"278","line":26,"column":21,"nodeType":"279","endLine":26,"endColumn":31},{"ruleId":"277","severity":1,"message":"278","line":27,"column":21,"nodeType":"279","endLine":27,"endColumn":31},{"ruleId":"277","severity":1,"message":"278","line":28,"column":21,"nodeType":"279","endLine":28,"endColumn":31},{"ruleId":"280","severity":1,"message":"281","line":19,"column":5,"nodeType":"282","messageId":"283","endLine":19,"endColumn":47},{"ruleId":"280","severity":1,"message":"281","line":26,"column":5,"nodeType":"282","messageId":"283","endLine":26,"endColumn":66},{"ruleId":"280","severity":1,"message":"281","line":30,"column":5,"nodeType":"282","messageId":"283","endLine":30,"endColumn":59},{"ruleId":"261","severity":1,"message":"262","line":44,"column":10,"nodeType":"263","endLine":44,"endColumn":12,"suggestions":"284"},{"ruleId":"280","severity":1,"message":"281","line":46,"column":5,"nodeType":"282","messageId":"283","endLine":46,"endColumn":109},{"ruleId":"280","severity":1,"message":"281","line":55,"column":5,"nodeType":"282","messageId":"283","endLine":55,"endColumn":74},{"ruleId":"267","severity":1,"message":"268","line":53,"column":31,"nodeType":"269","messageId":"270","endLine":53,"endColumn":33},{"ruleId":"261","severity":1,"message":"285","line":201,"column":8,"nodeType":"263","endLine":201,"endColumn":14,"suggestions":"286"},{"ruleId":"267","severity":1,"message":"268","line":47,"column":27,"nodeType":"269","messageId":"270","endLine":47,"endColumn":29},{"ruleId":"267","severity":1,"message":"268","line":53,"column":33,"nodeType":"269","messageId":"270","endLine":53,"endColumn":35},{"ruleId":"256","severity":1,"message":"287","line":244,"column":12,"nodeType":"258","messageId":"259","endLine":244,"endColumn":26},{"ruleId":"256","severity":1,"message":"288","line":263,"column":13,"nodeType":"258","messageId":"259","endLine":263,"endColumn":19},{"ruleId":"289","severity":1,"message":"290","line":329,"column":63,"nodeType":"291","messageId":"292","endLine":329,"endColumn":65},{"ruleId":"289","severity":1,"message":"290","line":331,"column":94,"nodeType":"291","messageId":"292","endLine":331,"endColumn":96},{"ruleId":"289","severity":1,"message":"290","line":334,"column":63,"nodeType":"291","messageId":"292","endLine":334,"endColumn":65},{"ruleId":"289","severity":1,"message":"290","line":336,"column":94,"nodeType":"291","messageId":"292","endLine":336,"endColumn":96},{"ruleId":"256","severity":1,"message":"293","line":9,"column":17,"nodeType":"258","messageId":"259","endLine":9,"endColumn":26},{"ruleId":"256","severity":1,"message":"294","line":12,"column":7,"nodeType":"258","messageId":"259","endLine":12,"endColumn":13},{"ruleId":"295","severity":1,"message":"296","line":21,"column":74,"nodeType":"297","endLine":21,"endColumn":83},{"ruleId":"295","severity":1,"message":"296","line":137,"column":25,"nodeType":"297","endLine":137,"endColumn":46},{"ruleId":"267","severity":1,"message":"268","line":129,"column":28,"nodeType":"269","messageId":"270","endLine":129,"endColumn":30},{"ruleId":"267","severity":1,"message":"268","line":131,"column":35,"nodeType":"269","messageId":"270","endLine":131,"endColumn":37},{"ruleId":"298","severity":1,"message":"299","line":19,"column":46,"nodeType":"300","messageId":"301","endLine":19,"endColumn":57},{"ruleId":"261","severity":1,"message":"302","line":52,"column":6,"nodeType":"263","endLine":52,"endColumn":20,"suggestions":"303"},{"ruleId":"267","severity":1,"message":"272","line":23,"column":73,"nodeType":"269","messageId":"270","endLine":23,"endColumn":75},{"ruleId":"256","severity":1,"message":"294","line":11,"column":7,"nodeType":"258","messageId":"259","endLine":11,"endColumn":13},{"ruleId":"273","severity":1,"message":"274","line":17,"column":11,"nodeType":"275","endLine":17,"endColumn":45},{"ruleId":"267","severity":1,"message":"272","line":19,"column":34,"nodeType":"269","messageId":"270","endLine":19,"endColumn":36},{"ruleId":"267","severity":1,"message":"272","line":29,"column":69,"nodeType":"269","messageId":"270","endLine":29,"endColumn":71},{"ruleId":"267","severity":1,"message":"272","line":31,"column":71,"nodeType":"269","messageId":"270","endLine":31,"endColumn":73},{"ruleId":"267","severity":1,"message":"268","line":31,"column":116,"nodeType":"269","messageId":"270","endLine":31,"endColumn":118},{"ruleId":"267","severity":1,"message":"268","line":38,"column":17,"nodeType":"269","messageId":"270","endLine":38,"endColumn":19},{"ruleId":"267","severity":1,"message":"268","line":43,"column":22,"nodeType":"269","messageId":"270","endLine":43,"endColumn":24},{"ruleId":"256","severity":1,"message":"304","line":52,"column":11,"nodeType":"258","messageId":"259","endLine":52,"endColumn":36},{"ruleId":"267","severity":1,"message":"272","line":53,"column":34,"nodeType":"269","messageId":"270","endLine":53,"endColumn":36},{"ruleId":"267","severity":1,"message":"268","line":85,"column":118,"nodeType":"269","messageId":"270","endLine":85,"endColumn":120},{"ruleId":"267","severity":1,"message":"272","line":85,"column":161,"nodeType":"269","messageId":"270","endLine":85,"endColumn":163},{"ruleId":"267","severity":1,"message":"268","line":85,"column":205,"nodeType":"269","messageId":"270","endLine":85,"endColumn":207},{"ruleId":"267","severity":1,"message":"268","line":100,"column":48,"nodeType":"269","messageId":"270","endLine":100,"endColumn":50},{"ruleId":"267","severity":1,"message":"272","line":113,"column":112,"nodeType":"269","messageId":"270","endLine":113,"endColumn":114},{"ruleId":"256","severity":1,"message":"305","line":126,"column":21,"nodeType":"258","messageId":"259","endLine":126,"endColumn":24},{"ruleId":"267","severity":1,"message":"268","line":133,"column":30,"nodeType":"269","messageId":"270","endLine":133,"endColumn":32},{"ruleId":"267","severity":1,"message":"272","line":197,"column":136,"nodeType":"269","messageId":"270","endLine":197,"endColumn":138},{"ruleId":"267","severity":1,"message":"272","line":216,"column":112,"nodeType":"269","messageId":"270","endLine":216,"endColumn":114},{"ruleId":"267","severity":1,"message":"272","line":48,"column":57,"nodeType":"269","messageId":"270","endLine":48,"endColumn":59},{"ruleId":"256","severity":1,"message":"306","line":63,"column":11,"nodeType":"258","messageId":"259","endLine":63,"endColumn":19},{"ruleId":"256","severity":1,"message":"307","line":69,"column":22,"nodeType":"258","messageId":"259","endLine":69,"endColumn":33},{"ruleId":"256","severity":1,"message":"308","line":79,"column":24,"nodeType":"258","messageId":"259","endLine":79,"endColumn":37},{"ruleId":"256","severity":1,"message":"309","line":87,"column":11,"nodeType":"258","messageId":"259","endLine":87,"endColumn":17},{"ruleId":"256","severity":1,"message":"310","line":58,"column":12,"nodeType":"258","messageId":"259","endLine":58,"endColumn":27},{"ruleId":"256","severity":1,"message":"311","line":58,"column":29,"nodeType":"258","messageId":"259","endLine":58,"endColumn":47},{"ruleId":"289","severity":1,"message":"290","line":130,"column":31,"nodeType":"291","messageId":"292","endLine":130,"endColumn":33},{"ruleId":"289","severity":1,"message":"290","line":130,"column":103,"nodeType":"291","messageId":"292","endLine":130,"endColumn":105},{"ruleId":"295","severity":1,"message":"296","line":197,"column":25,"nodeType":"297","endLine":197,"endColumn":44},"no-native-reassign",["312"],"no-negated-in-lhs",["313"],"no-unused-vars","'Orders' is defined but never used.","Identifier","unusedVar","'BACKEND_URL' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.","ArrayExpression",["314"],["315"],["316"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'json' is assigned a value but never used.","Expected '!==' and instead saw '!='.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'useEffect' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["317"],"React Hook React.useEffect has missing dependencies: 'history' and 'paypalOrderObject'. Either include them or remove the dependency array.",["318"],"'checkboxUpdate' is assigned a value but never used.","'imgUrl' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'Component' is defined but never used.","'config' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","React Hook useEffect has a missing dependency: 'menuItemValues'. Either include it or remove the dependency array.",["319"],"'checkAccommodationFillIns' is assigned a value but never used.","'key' is assigned a value but never used.","'location' is assigned a value but never used.","'setIsMobile' is assigned a value but never used.","'setPaypalCart' is assigned a value but never used.","'styles' is assigned a value but never used.","'failedAdminAuth' is assigned a value but never used.","'setFailedAdminAuth' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"320","fix":"321"},{"desc":"320","fix":"322"},{"desc":"320","fix":"323"},{"desc":"320","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},"Update the dependencies array to be: [state]",{"range":"329","text":"330"},{"range":"331","text":"330"},{"range":"332","text":"330"},{"range":"333","text":"330"},"Update the dependencies array to be: [cart, history, paypalOrderObject]",{"range":"334","text":"335"},"Update the dependencies array to be: [categoryName, menuItemValues]",{"range":"336","text":"337"},[1179,1181],"[state]",[1795,1797],[1888,1890],[1370,1372],[7643,7649],"[cart, history, paypalOrderObject]",[1859,1873],"[categoryName, menuItemValues]"]