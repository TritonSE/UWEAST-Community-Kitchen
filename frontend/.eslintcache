[{"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/index.js":"1","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Contact.js":"2","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/About.js":"3","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/PayPal.js":"4","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Login.js":"5","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/util/auth.js":"6","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/App.js":"7","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Admin.js":"8","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/NavBar.js":"9","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Register.js":"10","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/config.js":"11","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/ResetPassword.js":"12","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ForgotPasswordDialogue.js":"13","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/reportWebVitals.js":"14","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Menu.js":"15","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuSection.js":"16","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItemPopup.js":"17","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItems.js":"18","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItem.js":"19","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/SearchSection.js":"20"},{"size":500,"mtime":1609664178795,"results":"21","hashOfConfig":"22"},{"size":482,"mtime":1611703511595,"results":"23","hashOfConfig":"22"},{"size":1468,"mtime":1611703511436,"results":"24","hashOfConfig":"22"},{"size":3667,"mtime":1610581375659,"results":"25","hashOfConfig":"22"},{"size":4642,"mtime":1611733083371,"results":"26","hashOfConfig":"22"},{"size":1489,"mtime":1611703571895,"results":"27","hashOfConfig":"22"},{"size":1318,"mtime":1611648361193,"results":"28","hashOfConfig":"22"},{"size":33815,"mtime":1611703511547,"results":"29","hashOfConfig":"22"},{"size":3362,"mtime":1611707264162,"results":"30","hashOfConfig":"22"},{"size":5225,"mtime":1611733399568,"results":"31","hashOfConfig":"22"},{"size":191,"mtime":1610581375660,"results":"32","hashOfConfig":"22"},{"size":5381,"mtime":1611733482779,"results":"33","hashOfConfig":"22"},{"size":3366,"mtime":1611732921005,"results":"34","hashOfConfig":"22"},{"size":362,"mtime":1609664178797,"results":"35","hashOfConfig":"22"},{"size":650,"mtime":1611703511597,"results":"36","hashOfConfig":"22"},{"size":3704,"mtime":1611703511233,"results":"37","hashOfConfig":"22"},{"size":4122,"mtime":1611703511228,"results":"38","hashOfConfig":"22"},{"size":689,"mtime":1611703511230,"results":"39","hashOfConfig":"22"},{"size":647,"mtime":1611703511223,"results":"40","hashOfConfig":"22"},{"size":450,"mtime":1611703511421,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1a5s4x",{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"76"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/index.js",[],["93","94"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Contact.js",["95"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/About.js",["96"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/PayPal.js",[],["97","98"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Login.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/util/auth.js",["99"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/App.js",[],["100","101"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Admin.js",["102","103","104","105","106","107","108","109","110","111","112","113"],"import React, { Component } from 'react';\nimport { Modal, Button} from 'react-bootstrap';\nimport Navbar from '../components/NavBar';\nimport '../css/Admin.css';\n\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nclass Admin extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            renderFeaturedItems: false,\n            renderEditItems: false,\n            renderAddItems: false,\n            renderDeleteItems: false,\n            renderItemDetails: false,\n            getItemsArray: [],\n            insertItem: {\n                vegan: false,\n                vegetarian: false,\n                glutenFree: false\n            },\n            featureList: {},\n            deleteItemsArray: []\n        }\n\n        //Modals\n        this.featuredItemModal = this.featuredItemModal.bind(this);\n        this.editItemModal = this.editItemModal.bind(this);\n        this.addItemModal = this.addItemModal.bind(this);\n        this.deleteItemModal = this.deleteItemModal.bind(this);\n        this.editItemDetails = this.editItemDetails.bind(this);\n\n        //Helper methods\n        this.updateField = this.updateField.bind(this);\n        this.updateFieldCheckbox = this.updateFieldCheckbox.bind(this);\n        this.updateInsertField = this.updateInsertField.bind(this);\n        this.updateInsertFieldCheckbox = this.updateInsertFieldCheckbox.bind(this);\n\n        //Fetch calls\n        this.getItems = this.getItems.bind(this);\n        this.saveItemChanges = this.saveItemChanges.bind(this);\n        this.deleteItem = this.deleteItem.bind(this);\n        this.insertItem = this.insertItem.bind(this);\n        this.saveFeatures = this.saveFeatures.bind(this);\n    }\n\n    //////////////////////////////////////////\n    //          Fetch call methods          //\n    //////////////////////////////////////////\n\n    //Fetch call to get all menu items\n    getItems() {\n        fetch(`${BACKEND_URL}item`)\n        .then(res => res.json())\n        .then(data => {\n            this.setState({\n                getItemsArray: data.items,\n            }, () => {\n                //This callback function allows for featureList to be populated \n                //upon loading of the page\n                let setList = {};\n                for (let i = 0; i < this.state.getItemsArray.length; i++) {\n                    let info = this.state.getItemsArray[i];\n                    if(info.featured) setList[info._id] = info._id;\n                }\n\n                this.setState({\n                    featureList: setList    \n                })\n            });   \n        }).catch((error) => {\n            console.log(error);\n        })\n    }\n\n    //Fetch call to save item changes upon editing\n    insertItem() {\n        if(Object.keys(this.state.insertItem).length < 10) {\n            console.log(\"Error! not enough items in addItem object\")\n            return;\n        }\n\n        fetch(`${BACKEND_URL}item/insert`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(this.state.insertItem)\n        }).then(async result => {\n            if (result.ok) console.log(result.statusText);\n            this.setState({ renderAddItems: false })\n        })\n        .catch(e => {\n            console.log(e);\n        });\n    }\n\n    //fetch call to delete the item\n    deleteItem(item) {\n        if(!item) {\n            console.log(\"Error! Can't delete this item\");\n            return;\n        }\n\n        fetch(`${BACKEND_URL}item/remove`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(item)\n        }).then(async result => {\n            if (result.ok) console.log(result.statusText);\n\n            this.setState({ renderDeleteItems: false })\n            //render the list to get the updated list without refreshing the page\n            this.getItems();\n        })\n        .catch(e => {\n            console.log(e);\n        });    \n    }\n\n    //Fetch call to insert data into the table\n    saveItemChanges(e) {\n        // e.preventDefault();\n        const keys = [\"name\", \"description\", \"category\", \"price\", \"image\", \"cuisine\", \"ingredients\", \"vegan\", \"vegetarian\", \"glutenFree\"];\n        if(!this.state.getItemInfo) {\n            console.log(\"Error! editing item problem.\");\n            return;\n        }\n\n        for(let key in keys) {\n            if(!(keys[key] in this.state.getItemInfo)) {\n                console.log(\"Error! Missing \" + keys[key] + \" in object\");\n                return;\n            }    \n        }\n\n        fetch(`${BACKEND_URL}item/edit`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(this.state.getItemInfo)\n        }).then(async result => {\n            if (result.ok) console.log(result.statusText);\n            this.setState({ renderItemDetails: false })\n            //render the list to get the updated list without refreshing the page\n            this.getItems();\n        })\n        .catch(e => {\n            console.log(e);\n        });\n    }\n\n    //update the items to be listed under the features tag\n    saveFeatures() {\n        fetch(`${BACKEND_URL}item/feature`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(this.state.featureList)\n        }).then(async result => {\n            if (result.ok) console.log(result.statusText);\n            this.setState({ renderFeaturedItems: false })\n        })\n        .catch(e => {\n            console.log(e);\n        });    \n    }\n\n    componentDidMount() {\n        //Get the list of menu items when loading the page\n        this.getItems();\n    }\n\n    //This modal will render when the user clicks on \"feature\" button\n    //Determine the items to be listed as \"featured\"\n    featuredItemModal() {\n        //List of categories\n        const featuredCategories = [\"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\n\n        return (\n            <Modal show={this.state.renderFeaturedItems} onHide={() => this.setState({renderFeaturedItems: false})} backdrop='static'>\n                <Modal.Header closeButton>\n                    <Modal.Title>Featured Menu Item</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div>\n                        {featuredCategories.map((category, ind) => (\n                            <div>\n                                <h6>{category}</h6>\n                                <div className=\"list-group\">\n                                    {this.state.getItemsArray.map((item, ind) => {\n                                        if(item.category === category) {\n                                            return (\n                                                <div className=\"featured-item-checkbox\">\n                                                    <input name=\"menu-item\" className=\"form-check-input\" type=\"checkbox\" checked={this.state.featureList[item._id]}\n                                                            onChange={(e) => {\n                                                                const getList = this.state.featureList;\n                                                                getList[item._id] ? delete getList[item._id] : getList[item._id] = item._id;\n                                                                this.setState({\n                                                                    featureList: getList\n                                                                });\n                                                            }}>      \n                                                    </input>\n                                            \n                                                    <label class=\"form-check-label\" >\n                                                        {item.name}\n                                                    </label>\n                                                </div>\n                                            )\n                                        }\n                                    })}\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => this.setState({renderFeaturedItems: false })}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={() => this.saveFeatures()}>\n                        Save Changes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        )\n    }\n\n    //This modal opens when the Admin clicks on \"edit\"\n    //This will allows the admin to edit their menu items\n    editItemModal() {\n        const featuredCategories = [\"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\n\n        return (\n            <Modal show={this.state.renderEditItems} onHide={() => this.setState({renderEditItems: false})} backdrop='static'>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit item</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div>\n                        {featuredCategories.map((category, ind) => (\n                            <div>\n                                <h6>{category}</h6>\n                                <div className=\"list-group\">\n                                    {this.state.getItemsArray.map((item, ind) => {\n                                        if(item.category === category) {\n                                            return (\n                                                <button onClick={() => {\n                                                    const filterItem = this.state.getItemsArray.filter(items => items.name === item.name)[0];\n                                                    this.setState({\n                                                        renderEditItems: false,\n                                                        renderItemDetails: true,\n                                                        getItemInfo: filterItem,\n                                                    })\n                                                }}>Edit {item.name}</button>\n                                            )\n                                        }\n                                    })}\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => this.setState({ renderEditItems: false })}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        )\n    }\n\n    // Helper method used to update textfield in edit item modal\n    updateField(e, field) {\n        let updateField = this.state.getItemInfo;\n        \n        //Delete the object so the form wil check for empty inputs\n        if(e.target.value == \"\") delete updateField[e.target.name];\n        else updateField[field] = e.target.value;\n\n        this.setState({ getItemInfo: updateField });\n    }\n\n    //Used for vegan, vegetarian, and glutenFree checkboxes\n    updateFieldCheckbox(isChecked, field) {\n        let updateField = this.state.getItemInfo;\n        updateField[field] = isChecked;\n        this.setState({ getItemInfo: updateField });\n    }\n\n    //This will render when the user clicks on an item inside the \"edit\" modal\n    //Allows the admin to edit any field and update accordingly\n    editItemDetails() {\n        //Undefined when page initially renders, returns an error\n        //This check prevents such error\n        if(this.state.getItemInfo === undefined) return; \n\n        return (\n            <Modal show={this.state.renderItemDetails} onHide={() => this.setState({renderItemDetails: false})} backdrop='static'>\n                <Modal.Header closeButton>\n                    <Modal.Title></Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <form>\n                        <div class=\"form-group\">\n                            <label for=\"name\">Name</label>\n                            <input name=\"name\" type=\"text\" class=\"form-control\" placeholder=\"Enter name\" required \n                                value={this.state.getItemInfo.name} onChange={(e) => this.updateField(e, 'name')}\n                            />\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"name\">Description</label>\n                            <input name=\"description\" type=\"text\" class=\"form-control\" placeholder=\"Enter description\" required \n                                value={this.state.getItemInfo.description} onChange={(e) => this.updateField(e, 'description')}\n                            />\n                        </div>\n\n                        <label for=\"description\">Category</label>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" value=\"Appetizers\" required \n                                checked={this.state.getItemInfo.category === \"Appetizers\"} onChange={(e) => this.updateField(e, 'category')}\n                            />\n                            <label class=\"form-check-label\" for=\"Appetizers\">\n                                Appetizers\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" value=\"Main Dishes\" required \n                                checked={this.state.getItemInfo.category === \"Main Dishes\"} onChange={(e) => this.updateField(e, 'category')}\n                            />\n                            <label class=\"form-check-label\" for=\"Main Dishes\">\n                                Main Dishes\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" value=\"Sides\" required \n                                checked={this.state.getItemInfo.category === \"Sides\"} onChange={(e) => this.updateField(e, 'category')}\n                            />\n                            <label class=\"form-check-label\" for=\"Sides\">\n                                Sides\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" value=\"Drinks\" required \n                                checked={this.state.getItemInfo.category === \"Drinks\"} onChange={(e) => this.updateField(e, 'category')}\n                            />\n                            <label class=\"form-check-label\" for=\"Drinks\">\n                                Drinks\n                            </label>\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"price\">Price</label>\n                            <input name=\"price\" type=\"number\" step=\"0.01\" class=\"form-control\" placeholder=\"Enter price\" required \n                                value={this.state.getItemInfo.price} onChange={(e) => this.updateField(e, 'price')}\n                            />\n                        </div>\n\n                        <div class=\"form-group\">\n                            <label for=\"image\">Image Link</label>\n                            <input name=\"image\" type=\"text\" class=\"form-control\" placeholder=\"Enter link\" required \n                                value={this.state.getItemInfo.image} onChange={(e) => this.updateField(e, 'image')}\n                            />\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"cuisine\">Cuisine</label>\n                            <input name=\"cuisine\" type=\"text\" class=\"form-control\" placeholder=\"Enter cuisine\" required \n                                value={this.state.getItemInfo.cuisine} onChange={(e) => this.updateField(e, 'cuisine')}\n                            />\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"ingredients\">Ingredients</label>\n                            <input name=\"ingredients\" type=\"text\" class=\"form-control\" placeholder=\"Enter ingredients, separated by commas\" required \n                                value={this.state.getItemInfo.ingredients ? this.state.getItemInfo.ingredients.toString().replace(',', ', ') : ''} \n                                onChange={(e) => this.updateField(e, 'ingredients')}\n                            />\n                        </div>\n\n                        <div class=\"form-check form-check-inline\">\n                            <input name=\"vegan\" class=\"form-check-input\" type=\"checkbox\"\n                                checked={this.state.getItemInfo.vegan} onChange={(e) => this.updateFieldCheckbox(!this.state.getItemInfo.vegan, 'vegan')}\n                            />\n                            <label class=\"form-check-label\" for=\"defaultCheck1\">\n                                Vegan\n                            </label>\n                        </div>\n                        \n                        <div class=\"form-check form-check-inline\">\n                            <input name=\"vegetarian\" class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"editVegetarian\" \n                                checked={this.state.getItemInfo.vegetarian} onChange={(e) => this.updateFieldCheckbox(!this.state.getItemInfo.vegetarian, 'vegetarian')}\n                            />\n                            <label class=\"form-check-label\" for=\"defaultCheck2\">\n                                Vegetarian\n                            </label>\n                        </div>\n                        \n                        <div class=\"form-check form-check-inline\">\n                            <input name=\"glutenFree\" class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"editGlutenFree\" \n                                checked={this.state.getItemInfo.glutenFree} onChange={(e) => this.updateFieldCheckbox(!this.state.getItemInfo.glutenFree, 'glutenFree')}\n                            />\n                            <label class=\"form-check-label\" for=\"defaultCheck3\">\n                                Gluten Free\n                            </label>\n                        </div>   \n                        <Modal.Footer>\n                            <Button variant=\"secondary\" onClick={() => {\n                                this.setState({ renderItemDetails: false, renderEditItems: true });\n                                //This call will allow the changes to not take effect if the user closes the modal\n                                this.getItems();\n                            } }>\n                                Close\n                            </Button>\n                            <Button variant=\"primary\" type=\"submit\" onClick={(e) => this.saveItemChanges(e)}>\n                                Save Changes\n                            </Button>\n                        </Modal.Footer>\n                    </form>\n                </Modal.Body>\n            </Modal>\n        )\n    }\n\n    //Method used for updating state for inserting item\n    updateInsertField(e, isIngredients) {\n        const getState = this.state.insertItem;\n\n        //Check for ingredients key, so then it will split values into array\n        if(isIngredients) {\n            getState[e.target.name] = e.target.value.split(',');\n        } else {\n            getState[e.target.name] = e.target.value;\n        }\n        \n        this.setState({\n            insertItem: getState\n        })\n    }\n\n    //Same concept as updateInsertField but for the three checkboxes\n    //which are vegan, vegetarian, and glutenFree\n    updateInsertFieldCheckbox(e) {\n        const getState = this.state.insertItem;\n        getState[e.target.name] = !this.state.insertItem[e.target.name];\n\n        this.setState({\n            insertItem: getState\n        });\n    }\n\n    //This modal will render when the user clicks on the \"add\" button\n    //Admin user can add new item to the database through here\n    addItemModal() {\n        return (\n            <Modal show={this.state.renderAddItems} onHide={() => this.setState({ renderAddItems: false })} backdrop='static'>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add Menu Item</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <form>\n                        <div class=\"form-group\">\n                            <label for=\"name\">Name</label>\n                            <input name=\"name\" type=\"text\" class=\"form-control\" id=\"name\" placeholder=\"Enter name\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"name\">Description</label>\n                            <input name=\"description\" type=\"text\" class=\"form-control\" id=\"description\" placeholder=\"Enter description\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                        </div>\n\n                        <label for=\"description\">Category</label>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" id=\"category\" value=\"Appetizers\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                            <label class=\"form-check-label\" for=\"Appetizers\">\n                                Appetizers\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" id=\"category\" value=\"Main Dishes\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                            <label class=\"form-check-label\" for=\"Main Dishes\">\n                                Main Dishes\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" id=\"category\" value=\"Sides\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                            <label class=\"form-check-label\" for=\"Sides\">\n                                Sides\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" id=\"category\" value=\"Drinks\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                            <label class=\"form-check-label\" for=\"Drinks\">\n                                Drinks\n                            </label>\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"price\">Price</label>\n                            <input name=\"price\" type=\"number\" step=\"0.01\" class=\"form-control\" id=\"price\" placeholder=\"Enter price\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                        </div>\n\n                        <div class=\"form-group\">\n                            <label for=\"image\">Image Link</label>\n                            <input name=\"image\" type=\"text\" class=\"form-control\" id=\"image\" placeholder=\"Enter link\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"cuisine\">Cuisine</label>\n                            <input name=\"cuisine\" type=\"text\" class=\"form-control\" id=\"cuisine\" placeholder=\"Enter cuisine\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"ingredients\">Ingredients</label>\n                            <input name=\"ingredients\" type=\"text\" class=\"form-control\" id=\"ingredients\" placeholder=\"Enter ingredients, separated by commas\" required \n                                onChange={(e) => this.updateInsertField(e, true)}\n                            />\n                        </div>\n\n                        <div class=\"form-check form-check-inline\">\n                            <input name=\"vegan\" class=\"form-check-input\" type=\"checkbox\" checked={this.state.vegan} id=\"vegan\" \n                                onChange={(e) => this.updateInsertFieldCheckbox(e)}\n                            />\n                            <label class=\"form-check-label\" for=\"defaultCheck1\">\n                                Vegan\n                            </label>\n                        </div>\n                        \n                        <div class=\"form-check form-check-inline\">\n                            <input name=\"vegetarian\" class=\"form-check-input\" type=\"checkbox\" checked={this.state.vegetarian} id=\"vegetarian\" \n                                onChange={(e) => this.updateInsertFieldCheckbox(e)}\n                            />\n                            <label class=\"form-check-label\" for=\"defaultCheck2\">\n                                Vegetarian\n                            </label>\n                        </div>\n                        \n                        <div class=\"form-check form-check-inline\">\n                            <input name=\"glutenFree\" class=\"form-check-input\" type=\"checkbox\" checked={this.state.glutenFree} id=\"glutenFree\" \n                                onChange={(e) => this.updateInsertFieldCheckbox(e)}\n                            />\n                            <label class=\"form-check-label\" for=\"defaultCheck3\">\n                                Gluten Free\n                            </label>\n                        </div>\n                        <Modal.Footer>\n                            <Button variant=\"secondary\" onClick={() => this.setState({\n                                insertItem: {\n                                    vegan: false,\n                                    vegetarian: false,\n                                    glutenFree: false\n                                },\n                                renderAddItems: false\n                            })}>\n                                Close\n                            </Button>\n                            <Button variant=\"primary\" type=\"submit\" onClick={() => this.insertItem()}>\n                                Save Changes\n                            </Button>\n                        </Modal.Footer>\n                    </form>\n                </Modal.Body>\n            </Modal>\n        )\n    }\n\n    //This modal renders when the user clicks on the \"delete\" button\n    //Allows the admin user to delete an item from the database\n    deleteItemModal() {\n        const featuredCategories = [\"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\n\n        return (\n            <Modal show={this.state.renderDeleteItems} onHide={() => this.setState({renderDeleteItems: false})} backdrop='static'>\n                <Modal.Header closeButton>\n                    <Modal.Title>Delete items</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <div>\n                        {featuredCategories.map((category, ind) => (\n                            <div>\n                                <h6>{category}</h6>\n                                <div className=\"list-group\">\n                                    {this.state.getItemsArray.map((item, ind) => {\n                                        if(item.category === category) {\n                                            return (\n                                                <div>\n                                                    <input type=\"checkbox\" checked={this.state.deleteItemsArray[item._id]} \n                                                        onChange={(e) => {\n                                                            let itemList = this.state.deleteItemsArray;\n                                                            if(itemList.filter(e => e._id === item._id).length > 0) {\n                                                                itemList = itemList.filter(e => e._id !== item._id)\n                                                            } else {\n                                                                itemList.push(item);\n                                                            }\n\n                                                            this.setState({\n                                                                deleteItemsArray: itemList\n                                                            });\n                                                        }}\n                                                    />\n                                                    <label>Delete {item.name}</label>\n                                                </div>\n                                            )\n                                        }\n                                    })}\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </Modal.Body>\n                \n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={() => {\n                        const getList = this.state.deleteItemsArray;\n                        const length = getList.length;\n                        for(let i = 0; i < length; i++ ) { \n                            this.deleteItem(this.state.deleteItemsArray[i]); \n                        }\n\n                        this.setState({ \n                            renderDeleteItems: false,\n                            deleteItemsArray: []\n                        })\n                    }}\n                        disabled={this.state.deleteItemsArray.length === 0}>\n                        Delete Item(s)\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        )\n    }\n\n    render() {\n      return (\n          <div>\n            {/* The navbar on top of the page */}\n              <Navbar currentPage=\"admin\"/>\n\n              {/* This is the contents on the admin page */}\n              <div class=\"admin-section\">\n                    <div class=\"col-12\">\n                        <h2 class=\"admin-title\">Admin Panel</h2>\n                        <p>Please use this page to edit what is displayed on the website to customers.</p>\n                    </div>\n\n                    <br />\n\n                    {/* <div class=\"col-12\">\n                        <h2 class=\"admin-title\">Orders</h2>\n                        <p>View placed orders and mark them as fulfilled.</p>\n                        <a class=\"btn btn-primary\" href=\"/orders\" role=\"button\">Orders</a>\n                    </div> */}\n\n                    <br />\n\n                    <div class=\"col-12\">\n                        <h2 class=\"admin-title\">Menu Items</h2>\n                        <p>Adjust what items are on the website.</p>\n                        <Button onClick={() => this.setState({renderAddItems: true})}>\n                            Add\n                        </Button>\n                        <Button onClick={() => this.setState({renderEditItems: true})}>\n                            Edit\n                        </Button>\n                        <Button onClick={() => this.setState({renderDeleteItems: true})}>\n                            Delete\n                        </Button>\n                    </div>\n\n                    <br />\n\n                    <div class=\"col-12\">\n                        <h2 class=\"admin-title\">Featured Item</h2>\n                        <p>Choose the featured item to display at the top of the site.</p>\n                        <Button onClick={() => this.setState({renderFeaturedItems: true})} >Edit</Button>\n                    </div>\n                </div>       \n\n                {/* These are the modals used on the page. They will conditionally render */}\n                {this.featuredItemModal()}\n                {this.editItemModal()}\n                {this.addItemModal()}\n                {this.deleteItemModal()}\n                {this.editItemDetails(this.state.itemName)}\n          </div>\n\n      )\n    }\n  }\n  \n  export default Admin;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/NavBar.js",["114","115","116","117","118"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Register.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/config.js",[],["119","120"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/ResetPassword.js",["121","122","123"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ForgotPasswordDialogue.js",["124"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Link } from 'react-router-dom';\nimport { Typography } from '@material-ui/core';\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\nexport default function FormDialog() {\n  //const [open, setOpen] = React.useState(false);\n  const [state, setState] = React.useState({\n    open: false,\n    email: '',\n    error:{\n      display: false,\n      message: ''\n    }\n  });\n\n  const handleSend = async() => {\n      const submission = {\n          email: state.email\n      };\n\n      //Check if email field is empty\n    if (state.email === ''){\n        setState({...state, error:{display: true, message: \"Field cannot be empty!\"}})\n        return;\n    }\n    try{\n      const response = await fetch(`${BACKEND_URL}user/forgotPassword`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(submission)\n      });\n\n      //Everything went great\n      if (response.ok) {\n        alert(\"Email Successfully Sent!\");\n        handleClose();\n      } \n      //Invalid Email\n      else if(response.status == 401){\n        setState({...state, error:{display: true, message: \"Invalid Email\"}});\n      }\n      //Any Server Errors\n      else {\n            setState({...state, error:{display: true, message: \"System Error: Try Again Later\"}});\n      }\n    }\n    //General Errors\n    catch(error){\n        setState({...state, error:{display: true, message: `An error occurred: ${error.message}`}});\n    }\n\n  }\n\n  const handleClickOpen = () => {\n    setState({...state, email:'', open: true, error:{display: false}});\n  };\n\n  const handleClose = () => {\n    setState({...state, open: false, error:{display: false}});\n  };\n\n  const handleEmailChange = (event) => {\n    setState({...state, email: event.target.value, open: true});\n  }\n\n  return (\n    <div>\n      <Link onClick={handleClickOpen}><Typography>Forgot Password?</Typography></Link>\n      <Dialog open={state.open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Forgot Password?</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please enter the email address of the associated account here. An email will be sent to\n            you there containing next steps. \n          </DialogContentText>\n          <TextField\n            onChange={handleEmailChange}\n            error={state.error.display}\n            helperText={state.error.display ? state.error.message: null}\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Email Address\"\n            type=\"email\"\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleSend} color=\"primary\">\n            Send Email\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/reportWebVitals.js",[],["125","126"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Menu.js",["127","128"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuSection.js",["129","130","131","132","133"],"import React, { useState } from 'react';\nimport MenuFilter from './MenuFilter';\nimport MenuItems from './MenuItems';\nimport MenuItemPopup from './MenuItemPopup';\nimport '../css/MenuSection.css';\nconst config = require('../config');\n\n// MenuSection is responsible for managing states for most of the menu\nconst MenuSection = () => {\n  // filterCategories populates the filter buttons\n  const filterCategories = [\"Whole Menu\", \"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\n\n  // populates the menu item categories\n  const defaultCategories = [\"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\n\n  // stores all the categories currently visible\n  let displayedCategories = [];\n\n  // states that are managed and passed down to components\n  const [visibleCategories, setVisibleCategories] = useState(defaultCategories);\n\n  // stores whether or not the popup is currently visible\n  const [popupVisible, setPopupVisible] = useState(false);\n\n  // map with all of the data that will be displayed in the popup\n  const [popupValues, setPopupValues] = useState(new Map());\n\n  // changes visible categories when filter button is clicked\n  const changeVisibleCategories = categoryName => {\n    if(categoryName == \"Whole Menu\") {\n      displayedCategories = defaultCategories;\n    }\n    else {\n      // if the option is not \"whole menu\", a new item is added to the \n      // displayedCategories array that is then passed to be rendered\n      displayedCategories.push(categoryName);\n    }\n\n    if(displayedCategories.length == 0) {\n      displayedCategories = defaultCategories;\n    }\n    \n    // responsible for actually rendering/setting what will be visible\n    setVisibleCategories(displayedCategories);\n  }\n\n  // processes the form submitted from the popup\n  const processForm = e => {\n    // prevents page reload\n    e.preventDefault();\n\n    // gets the form data\n    var data = new FormData(e.target);\n    var object = {};\n\n    // goes through and makes an object from the FormData\n    data.forEach((value, key) => {\n        if(!Reflect.has(object, key)){\n            object[key] = value;\n            return;\n        }\n\n        if(!Array.isArray(object[key])){\n            object[key] = [object[key]];    \n        }\n        object[key].push(value);\n    });\n\n    // converts the FormData to a JSON string, optional\n    var json = JSON.stringify(object);\n    \n    // when submit button is clicked, the popup is closed\n    togglePopup();\n  }\n  \n  // closes popup when open and opens popup when closed\n  const togglePopup = (title, description, price, image, dietaryInfo) => {\n    setPopupVisible(!popupVisible);\n    \n    // sets the values of the map based on passed-in information\n    popupValues.set(\"title\", title);\n    popupValues.set(\"description\", description);\n    popupValues.set(\"price\", price);\n    popupValues.set(\"image\", image);\n    popupValues.set(\"dietary-info\", dietaryInfo)\n\n    setPopupValues(popupValues);\n  }\n\n  /**\n   * MenuSection is split into three columns:\n   * 1. filter column\n   * 2. menu column\n   * 3. cart column\n   */\n  return (\n    <div className=\"menu-section-wrapper\">\n      <div className=\"menu-section\">\n        <div className=\"menu-filter-wrapper\">\n          <MenuFilter foodCategories={filterCategories} changeVisibleCategories={() => changeVisibleCategories} />\n        </div>\n        <div className=\"menu-items\">\n          {/** parameters are states being passed down */}\n          <MenuItems foodCategories={visibleCategories} processForm={processForm} popupVisible={popupVisible} popupValues={popupValues} togglePopup={togglePopup} />\n        </div>\n        <div className=\"menu-cart\">\n          cart\n      </div>\n      </div>\n    </div>\n  )\n}\n\nexport default MenuSection;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItemPopup.js",["134","135","136"],"import React, { useState } from 'react';\nimport '../css/MenuItemPopup.css';\n\nconst MenuItemPopup = ({ values, togglePopup, processForm }) => {\n  const [quantity, setQuantity] = useState(1);\n  const [totalPrice, setTotalPrice] = useState(parseInt(values.get(\"price\")));\n  const indvidualPrice = parseInt(values.get(\"price\"));\n  const familyPrice = parseInt(indvidualPrice);\n\n  let currPrice = indvidualPrice;\n\n  // handles changing price and quantity states\n  const changeQuantity = sign => {\n    if(sign == \"+\") {\n      setQuantity(quantity + 1);\n      // calulates on quantity + 1 b/c state hasn't updated yet\n      setTotalPrice(currPrice * (quantity + 1));\n    }\n    else if(sign == \"-\") {\n      if(quantity > 1) {\n        setQuantity(quantity - 1);\n        // calulates on quantity - 1 b/c state hasn't updated yet\n        setTotalPrice(currPrice * (quantity - 1));\n      }\n    }\n  }\n\n  // will be used when family price is introduced to toggle between\n  const changePrice = newPrice => {\n    currPrice = newPrice;\n  }\n\n  return (\n    <>\n      {/** div that fades out the background */}\n      <div className=\"greyout\" onClick={togglePopup}></div>\n      <div className=\"menu-item-popup\">\n        <span className=\"close-button\" onClick={togglePopup}>+</span>\n        <div className=\"left-popup\">\n          <img src={values.get(\"image\")} />\n        </div>\n        <div className=\"right-popup\">\n          <form onSubmit={processForm} id=\"popup-form\">\n            <h2 className=\"title-popup\">{values.get(\"title\")}</h2>\n            <h2 className=\"desc-popup\">{values.get(\"description\")}</h2>\n            <p className=\"dietary-info\">\n              {/**\n               * dietary info is an array list with 3 boolean values:\n               * 1. vegan\n               * 2. vegatarian\n               * 3. gluten-free\n               */}\n              {(values.get(\"dietary-info\")[0]) ? \"vegan \" : null}\n              {(values.get(\"dietary-info\")[1]) ? \"vegetarian \" : null}\n              {(values.get(\"dietary-info\")[2]) ? \"gluten-free \" : null}\n            </p>\n            <div className=\"size-section\">\n              <div className=\"section-title\">\n                <h3>Choose Size</h3>\n                <i>required</i>\n              </div>\n              <label className=\"choice-label\">\n                <input onClick={() => changePrice(indvidualPrice)} type=\"radio\" name=\"size\" value=\"individual\" required />\n                <span onClick={() => changePrice(indvidualPrice)} className=\"label-title\">Individual</span>\n              </label>\n              <label className=\"choice-label\">\n                <input onClick={() => changePrice(familyPrice)} type=\"radio\" name=\"size\" value=\"family\" required />\n                <span onClick={() => changePrice(familyPrice)} className=\"label-title\">Family</span>\n              </label>\n            </div>\n            <div className=\"instructions-section\">\n              <div className=\"section-title\">\n                <h3>Special Instructions</h3>\n                <i>optional</i>\n              </div>\n              <textarea name=\"instructions\" className=\"instructions-textarea\" />\n            </div>\n            <div className=\"quantity-section\">\n              <div className=\"section-title\"><h3>Quantity</h3></div>\n              <div className=\"quantity-buttons\">\n                <button type=\"button\" className=\"button decrease-button\" onClick={() => {changeQuantity(\"-\");}\n                  }>-</button>\n                <span className=\"quantity-number\">{quantity}</span>\n                <button type=\"button\" className=\"button increase-button\" \n                  onClick={() => {changeQuantity(\"+\");}}>+</button>\n              </div>\n            </div>\n            <input name=\"name\" type=\"hidden\" value={values.get(\"title\")} />\n            <input name=\"price\" type=\"hidden\" value={totalPrice} />\n            <input name=\"quantity\" type=\"hidden\" value={quantity} />\n            <input className=\"submit-order-button\" type=\"submit\" value={\"Add \" + quantity + \" to cart $\" + totalPrice} />\n          </form>\n        </div>\n      </div>\n    </>\n  )\n}\n  \n  export default MenuItemPopup;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItems.js",["137","138"],"import React from 'react';\nimport MenuItemCategory from './MenuItemCategory';\nimport '../css/MenuItems.css';\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nconst MenuItems = ({ foodCategories, processForm, popupVisible, popupValues, togglePopup }) => {\n  return (\n\n      <div className=\"menu-items\">\n        {/** generates categories in the menu */}\n        {foodCategories.map((categoryName, key) => {\n          return <MenuItemCategory key={key} categoryName={categoryName} key={key} processForm={processForm} popupVisible={popupVisible} popupValues={popupValues} togglePopup={togglePopup} />\n        })}\n      </div>\n\n  )\n}\n  \n  export default MenuItems;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItem.js",["139","140"],"import React from 'react';\nimport \"../css/MenuItem.css\";\nconst config = require('../config');\n\nconst MenuItem = ( {description, image, price, title, togglePopup, dietaryInfo} ) => {\n    return (\n      <div className=\"menu-item\" onClick={() => togglePopup(title, description, price, image, dietaryInfo)}>\n        <div className=\"menu-image\">\n          <img src={image}></img>\n        </div>\n        <div className=\"menu-text\">\n          <h3 className=\"menu-name\">{title}</h3>\n          <p className=\"menu-description\">{description}</p>\n          <p className=\"menu-price\">{price}</p>\n        </div>\n      </div>\n    );\n}\n  \nexport default MenuItem;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/SearchSection.js",["141","142"],{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","severity":1,"message":"148","line":6,"column":7,"nodeType":"149","messageId":"150","endLine":6,"endColumn":18},{"ruleId":"147","severity":1,"message":"148","line":7,"column":7,"nodeType":"149","messageId":"150","endLine":7,"endColumn":18},{"ruleId":"143","replacedBy":"151"},{"ruleId":"145","replacedBy":"152"},{"ruleId":"147","severity":1,"message":"148","line":6,"column":7,"nodeType":"149","messageId":"150","endLine":6,"endColumn":18},{"ruleId":"143","replacedBy":"153"},{"ruleId":"145","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":199,"column":79,"nodeType":"157","messageId":"158","endLine":199,"endColumn":81},{"ruleId":"155","severity":1,"message":"156","line":253,"column":79,"nodeType":"157","messageId":"158","endLine":253,"endColumn":81},{"ruleId":"159","severity":1,"message":"160","line":286,"column":27,"nodeType":"161","messageId":"162","endLine":286,"endColumn":29},{"ruleId":"163","severity":1,"message":"164","line":331,"column":90,"nodeType":"165","endLine":331,"endColumn":105},{"ruleId":"163","severity":1,"message":"164","line":340,"column":90,"nodeType":"165","endLine":340,"endColumn":105},{"ruleId":"163","severity":1,"message":"164","line":349,"column":90,"nodeType":"165","endLine":349,"endColumn":105},{"ruleId":"163","severity":1,"message":"164","line":358,"column":90,"nodeType":"165","endLine":358,"endColumn":105},{"ruleId":"163","severity":1,"message":"164","line":494,"column":90,"nodeType":"165","endLine":494,"endColumn":105},{"ruleId":"163","severity":1,"message":"164","line":503,"column":90,"nodeType":"165","endLine":503,"endColumn":105},{"ruleId":"163","severity":1,"message":"164","line":512,"column":90,"nodeType":"165","endLine":512,"endColumn":105},{"ruleId":"163","severity":1,"message":"164","line":521,"column":90,"nodeType":"165","endLine":521,"endColumn":105},{"ruleId":"155","severity":1,"message":"156","line":621,"column":79,"nodeType":"157","messageId":"158","endLine":621,"endColumn":81},{"ruleId":"166","severity":1,"message":"167","line":10,"column":5,"nodeType":"168","messageId":"169","endLine":10,"endColumn":47},{"ruleId":"166","severity":1,"message":"167","line":13,"column":5,"nodeType":"168","messageId":"169","endLine":13,"endColumn":66},{"ruleId":"166","severity":1,"message":"167","line":17,"column":5,"nodeType":"168","messageId":"169","endLine":17,"endColumn":59},{"ruleId":"166","severity":1,"message":"167","line":24,"column":5,"nodeType":"168","messageId":"169","endLine":24,"endColumn":109},{"ruleId":"166","severity":1,"message":"167","line":33,"column":5,"nodeType":"168","messageId":"169","endLine":33,"endColumn":74},{"ruleId":"143","replacedBy":"170"},{"ruleId":"145","replacedBy":"171"},{"ruleId":"147","severity":1,"message":"172","line":2,"column":10,"nodeType":"149","messageId":"150","endLine":2,"endColumn":14},{"ruleId":"147","severity":1,"message":"173","line":8,"column":27,"nodeType":"149","messageId":"150","endLine":8,"endColumn":33},{"ruleId":"147","severity":1,"message":"174","line":8,"column":35,"nodeType":"149","messageId":"150","endLine":8,"endColumn":42},{"ruleId":"159","severity":1,"message":"160","line":49,"column":31,"nodeType":"161","messageId":"162","endLine":49,"endColumn":33},{"ruleId":"143","replacedBy":"175"},{"ruleId":"145","replacedBy":"176"},{"ruleId":"147","severity":1,"message":"177","line":5,"column":8,"nodeType":"149","messageId":"150","endLine":5,"endColumn":21},{"ruleId":"147","severity":1,"message":"148","line":8,"column":7,"nodeType":"149","messageId":"150","endLine":8,"endColumn":18},{"ruleId":"147","severity":1,"message":"177","line":4,"column":8,"nodeType":"149","messageId":"150","endLine":4,"endColumn":21},{"ruleId":"147","severity":1,"message":"178","line":6,"column":7,"nodeType":"149","messageId":"150","endLine":6,"endColumn":13},{"ruleId":"159","severity":1,"message":"160","line":30,"column":21,"nodeType":"161","messageId":"162","endLine":30,"endColumn":23},{"ruleId":"159","severity":1,"message":"160","line":39,"column":35,"nodeType":"161","messageId":"162","endLine":39,"endColumn":37},{"ruleId":"147","severity":1,"message":"179","line":70,"column":9,"nodeType":"149","messageId":"150","endLine":70,"endColumn":13},{"ruleId":"159","severity":1,"message":"160","line":14,"column":13,"nodeType":"161","messageId":"162","endLine":14,"endColumn":15},{"ruleId":"159","severity":1,"message":"160","line":19,"column":18,"nodeType":"161","messageId":"162","endLine":19,"endColumn":20},{"ruleId":"180","severity":1,"message":"181","line":40,"column":11,"nodeType":"182","endLine":40,"endColumn":44},{"ruleId":"147","severity":1,"message":"148","line":6,"column":7,"nodeType":"149","messageId":"150","endLine":6,"endColumn":18},{"ruleId":"163","severity":1,"message":"164","line":14,"column":74,"nodeType":"165","endLine":14,"endColumn":83},{"ruleId":"147","severity":1,"message":"178","line":3,"column":7,"nodeType":"149","messageId":"150","endLine":3,"endColumn":13},{"ruleId":"180","severity":1,"message":"181","line":9,"column":11,"nodeType":"182","endLine":9,"endColumn":28},{"ruleId":"147","severity":1,"message":"183","line":1,"column":17,"nodeType":"149","messageId":"150","endLine":1,"endColumn":26},{"ruleId":"147","severity":1,"message":"148","line":6,"column":7,"nodeType":"149","messageId":"150","endLine":6,"endColumn":18},"no-native-reassign",["184"],"no-negated-in-lhs",["185"],"no-unused-vars","'BACKEND_URL' is assigned a value but never used.","Identifier","unusedVar",["184"],["185"],["184"],["185"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["184"],["185"],"'Link' is defined but never used.","'setJWT' is defined but never used.","'setUser' is defined but never used.",["184"],["185"],"'MenuItemPopup' is defined but never used.","'config' is assigned a value but never used.","'json' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Component' is defined but never used.","no-global-assign","no-unsafe-negation"]