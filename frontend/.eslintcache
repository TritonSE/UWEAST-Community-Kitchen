[{"/Users/amador/UWEAST-Community-Kitchen/frontend/src/App.js":"1","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Admin.js":"2","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/PayPal.js":"3","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/SearchSection.js":"4","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/AdminMenuItems.js":"5","/Users/amador/UWEAST-Community-Kitchen/frontend/src/util/auth.js":"6","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuItems.js":"7","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/OrdersTableColumns.js":"8","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuItem.js":"9","/Users/amador/UWEAST-Community-Kitchen/frontend/src/reportWebVitals.js":"10","/Users/amador/UWEAST-Community-Kitchen/frontend/src/config.js":"11","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/NavBar.js":"12","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/CartPreview.js":"13","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuSection.js":"14","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/ChangeEmailScreen.js":"15","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuFilter.js":"16","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/CartSummary.js":"17","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/About.js":"18"},{"size":1133,"mtime":1611646058299,"results":"19","hashOfConfig":"20"},{"size":2982,"mtime":1612853720839,"results":"21","hashOfConfig":"20"},{"size":7471,"mtime":1611646058305,"results":"22","hashOfConfig":"20"},{"size":322,"mtime":1612853720834,"results":"23","hashOfConfig":"20"},{"size":15295,"mtime":1612853720830,"results":"24","hashOfConfig":"20"},{"size":129,"mtime":1611204935535,"results":"25","hashOfConfig":"20"},{"size":689,"mtime":1612853651876,"results":"26","hashOfConfig":"20"},{"size":3384,"mtime":1612853720833,"results":"27","hashOfConfig":"20"},{"size":757,"mtime":1612853720832,"results":"28","hashOfConfig":"20"},{"size":362,"mtime":1610411291970,"results":"29","hashOfConfig":"20"},{"size":191,"mtime":1610411291969,"results":"30","hashOfConfig":"20"},{"size":3480,"mtime":1611646058304,"results":"31","hashOfConfig":"20"},{"size":2780,"mtime":1612853651873,"results":"32","hashOfConfig":"20"},{"size":3879,"mtime":1612854266997,"results":"33","hashOfConfig":"20"},{"size":2518,"mtime":1612853720831,"results":"34","hashOfConfig":"20"},{"size":620,"mtime":1611646058300,"results":"35","hashOfConfig":"20"},{"size":5393,"mtime":1612916883904,"results":"36","hashOfConfig":"20"},{"size":1503,"mtime":1611646058310,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wx0vlp",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/amador/UWEAST-Community-Kitchen/frontend/src/App.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Admin.js",[],["83","84"],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/PayPal.js",["85"],"import React from 'react'\nimport { useHistory } from \"react-router-dom\";\n\n// const paypal = require(\"@paypal/checkout-server-sdk\");\n\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\n//PayPal script is located in public/index.html (contains Client ID)\nexport default function PayPal(props) {\n    const { cart } = props;\n    let history = useHistory();\n    // I assume the cart object looks like this:\n    // {\n    //     cart_total: \"\",\n    //     item_total: \"\",\n    //     tax_total: \"\",\n    //     items: [\n    //         {\n    //             name: \"\",\n    //             quantity: \"\",\n    //             size: \"\",\n    //             addons: [\"\", \"\"],\n    //             individual_price: \"\",\n    //             individual_tax: \"\",\n    //         },\n    //     ],\n    //     pickup_date: \"\"\n    // }\n    const paypalRef = React.useRef();\n    const paypalOrderObject = {\n        intent: \"CAPTURE\",\n        application_context: {\n            shipping_preference: 'NO_SHIPPING',\n        },\n        purchase_units: [{\n            description: \"Food order from UWEAST Kitchen\",\n            // Deals with pricing of the cart\n            amount: {\n                currency_code: \"USD\",\n                value: cart.cart_total,\n                breakdown: {\n                    // includes totals for items and taxes. Shipping and handling can be ignored\n                    // because the items are for pickup and handling is included in price\n                    item_total: {\n                        currency_code: \"USD\",\n                        value: cart.item_total,\n                    },\n                    tax_total: {\n                        currency_code: \"USD\",\n                        value: cart.tax_total,\n                    },\n                }\n            },\n            // Deals with the individual item entries for the order\n            items: \n            cart.items.map((item) => {\n                return {\n                    name: item.name,\n                    // Description follows the format:\n                    // Size: {size}, (Gluten Free,) (Other addons,) \n                    description: [`Size: ${item.size}`, ...item.addons].join(\", \"),\n                    unit_amount: {\n                        currency_code: \"USD\",\n                        value: item.individual_price,\n                    },\n                    tax: {\n                        currency_code: \"USD\",\n                        value: item.individual_tax,\n                    },\n                    quantity: item.quantity,\n                    category: \"PHYSICAL_GOODS\"\n                }\n            })\n        }],\n        shipping_type: 'PICKUP',\n    }\n    // THE FOLLOWING TWO METHODS ARE NOT USED. THEY WERE CREATED FOR\n    // SERVER SIDE PAYMENT INTEGRATION, BUT THIS ISN'T BEST PRACTICE,\n    // SO IT WAS NOT PURSUED. THEREFORE THESE METHODS ARE COMMENTED OUT.\n    /* const createOrder = async () => {\n        console.log(\"Creating order...\");\n        return fetch(`${BACKEND_URL}paypal/createPayment`, {\n            method: \"POST\",\n            body: JSON.stringify(paypalOrderObject),\n            headers: {\n                \"content-type\": \"application/json\"\n            }, \n        }).then((res) => {\n            if(res.ok) {\n                return res.json();\n            }\n        }).then((data) => {\n            console.log(\"finished creating order\")\n            return data.orderID; // make sure to use the same key name for order ID on the client and server\n        })\n        .catch((err) => {\n            console.log(err);\n            alert(\"Create order Error\");\n        });\n    }\n    const onApprove = async (data) => {\n        console.log(\"Authorizing order...\");\n        return fetch(`${BACKEND_URL}paypal/executePayment`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                orderID: data.orderID,\n            }),\n        }).then((res) => {\n           // handle show completion\n           console.log(\"ORDER COMPLETE!\");\n           return res.json();\n        })\n        .catch(() => {\n            alert(\"Error\");\n        }).then((details) => {\n            alert(\"Successful order!\");\n            console.log(details);\n        });\n    } */\n\n     // To show PayPal buttons once the component loads\n    React.useEffect(() => {\n        window.paypal\n        .Buttons({\n            createOrder: async(data, actions) => {\n                return actions.order.create(paypalOrderObject);\n            },\n            onApprove: async (data, actions) => {\n                return actions.order.capture().then(function(details) {\n                    // Details here includes payer name, phone number, and email.\n\n                    // create order object\n                    const orderObj = {\n                        \"Customer\": {\n                            \"Name\": details.payer.name.given_name + \" \" + details.payer.name.surname,\n                            \"Email\": details.payer.email_address,\n                            \"Phone\": details.payer.phone.phone_number.national_number\n                        },\n                        \"Pickup\": cart.pickup_date,\n                        \"PayPal\": {\n                            \"Amount\": cart.cart_total,\n                            \"transactionID\": details.id\n                        },\n                        \"Order\": \n                        cart.items.map((item) => {\n                            return {\n                                \"item\": item.name,\n                                \"quantity\": item.quantity,\n                                \"extra\": [`${item.size} size`, ...item.addons],\n                            }\n                        })\n                    }\n                    // signal email automation by calling the /autoEmails/automate route, \n                    // this will automatically add the order to the database \n                    return fetch(`${BACKEND_URL}autoEmails/automate`, {\n                        method: \"POST\",\n                        headers: {\n                            \"content-type\": \"application/json\",\n                        },\n                        body: JSON.stringify(orderObj),\n                    }).then((res) => {\n                        if(res.ok){\n                            alert('Transaction completed! You will receive a confirmation email shortly.');\n                            history.push(\"/\");\n                        } else {\n                            alert('Transaction completed, but email automation failed. You paid for your meal, and should get a confirmation from PayPal');\n                            history.push(\"/\");\n\n                        }\n                    })\n                    .catch(() => {\n                        alert(\"Error\");\n                    });\n                });\n            },\n            onCancel: () => {\n                // If the user cancels their order, send them back to the cart summary\n                // The cart summary exists at the menu page\n                console.log(\"cancel\");\n                history.push(\"/\");\n            },\n            onError: (err) => {\n                alert(\"An error occurred!\");\n                console.error(err);\n                history.push(\"/\");\n\n            },\n        })\n        .render(paypalRef.current);\n    }, [cart]);\n\n    return (\n        <div>\n            <div ref={paypalRef}/>\n        </div>\n    )\n}","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/SearchSection.js",["86","87","88"],"import React, { Component } from 'react';\nimport SearchBar from \"./SearchBar\";\nimport \"../css/SearchSection.css\";\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nconst SearchSection = () => {\n    return (\n      <div className=\"search-section\"></div>\n    );\n}\n  \nexport default SearchSection;",["89","90"],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/AdminMenuItems.js",["91"],"import React, {useState, useEffect} from 'react';\nimport {Modal, Button} from 'react-bootstrap';\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport SearchBar from \"material-ui-search-bar\";\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport '../css/AdminMenuItems.css';\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\nfunction createData(itemName, imgSource, categoryName, options, baseprice, description, id, featured) {\n  return {\n        \"itemName\": itemName, \n        \"imgSource\": imgSource,\n        \"categoryName\": categoryName, \n        \"options\": options, \n        \"basePrice\": baseprice, \n        \"description\": description,\n        \"id\": id,\n        \"isFeatured\": featured,\n    };\n}\n\n// Renders modal that asks the user if they want to remove the item from the menu\nconst deleteConfirmationModal = (deleteConfirmation, setDeleteConfirmation, itemList, setItemList, displayContent, setDisplayContent) => {\n    return (\n        <Modal \n            show={deleteConfirmation !== []} \n            onHide={() => setDeleteConfirmation([\"\", \"\"])} \n            backdrop='static'\n            style={{\"marginTop\": \"30vh\"}}\n        >\n                <Modal.Header closeButton>\n                    <Modal.Title>Delete Menu Item</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div>\n                        <p>Are you sure you want to remove {deleteConfirmation[0]} from the menu?</p>\n                    </div>\n                </Modal.Body>\n                \n                <Modal.Footer>\n                    <Button variant=\"primary\" className=\"menuAddButton\" onClick={() => {\n                        // REMOVE ITEM FROM MENU\n                        console.log(\"removing item from menu\")\n                        \n                        // Call database, remove item from menu\n                        handleRemoveByID(deleteConfirmation[1], itemList, setItemList, displayContent, setDisplayContent);\n                        setDeleteConfirmation([\"\", \"\"]);\n                    }}>\n                        Remove Item\n                    </Button>\n                    <Button variant=\"secondary\" onClick={() => {\n                        setDeleteConfirmation([\"\", \"\"]);\n                    }}>\n                        Cancel\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        );\n}\n\n// Renders table of items based on what is passed in through displayContent\nfunction menuTable(itemList, setItemList, displayContent, setDisplayContent, setDeleteConfirmation, handleFeatureChange) {\n    return (\n        <TableContainer component={Paper} className=\"menuTableContainer\">\n            <Table aria-label=\"simple table\" stickyHeader className=\"menuTable\">\n                <TableHead>\n                    <TableRow style={{\"overflow\": \"hidden\"}}>\n                        <TableCell className=\"menuTableHeaders\" width=\"5%\">Feature</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"15%\" align=\"center\">Item Image</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"15%\" align=\"left\">Item Name</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"12%\" align=\"left\">Category Name</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"12%\" align=\"left\">Size</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"12%\" align=\"left\">Base Price</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"12%\" align=\"left\">Add-ons</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"12%\" align=\"left\">Edit</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {displayContent.map((row, index) => {\n                        const bgColor = index % 2 === 0 ? \"evenrowbg\" : \"oddrowbg\";\n                        console.log(row);\n                        return (\n                            <TableRow key={row._id} className={bgColor}>\n                                <TableCell component=\"th\" scope=\"row\" className=\"menuRowText\" width=\"5%\">\n                                    <Checkbox\n                                        id={row._id + \"checkbox\"}\n                                        checked={row.isFeatured}\n                                        onChange={(e) => {\n                                            handleFeatureChange(row);\n                                        }}\n                                        name={row.itemName}\n                                        style ={{\n                                            color: \"#747474\",\n                                        }}\n                                    />\n                                </TableCell>\n                                <TableCell align=\"center\" className=\"menuRowText\" width=\"15%\">\n                                    <img src={row.imgSource} alt={row.itemName} className=\"menuItemImage\"/>\n                                </TableCell>\n                                <TableCell className=\"menuRowText\" width=\"15%\">{row.itemName}</TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"12%\">{row.categoryName}</TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"12%\">\n                                {\n                                    row.basePrice.map((v) => {return (<>{v[0]}<br /></>)})\n                                }\n                                </TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"12%\">\n                                {\n                                    row.basePrice.map((v) => <>${v[1]}<br /></>)\n                                }\n                                </TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"12%\">\n                                {\n                                    row.options.map((v) => <p>{v[1].Description}</p>)\n                                }\n                                </TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"12%\">\n                                    <IconButton>\n                                        <EditIcon style={{\"marginRight\": \"5px\"}}/>\n                                    </IconButton>\n                                    <IconButton aria-label=\"delete item\" onClick={() => setDeleteConfirmation([row.itemName, row.id])}>\n                                        <DeleteIcon style={{\"marginLeft\": \"5px\"}}/>\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                    )})}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n// handle remove based on id passed in through params\nasync function handleRemoveByID(id, itemList, setItemList, displayContent, setDisplayContent){\n    // remove from database\n    console.log(\"Removing \" + id);\n    await fetch(`${BACKEND_URL}item/remove`, {\n            method: \"DELETE\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                \"_id\": id\n            })\n        }).then(res => {\n            if(res.ok){\n                console.log(\"Remove successful!\")\n                // remove from rows\n                setItemList(itemList.filter(x => x.id !== id));\n                // remove from filtered rows\n                setDisplayContent(displayContent.filter(x => x.id !== id));\n            }\n        })\n    \n}\nexport default function AdminMenuItems (props) {\n    const [deleteConfirmation, setDeleteConfirmation] = useState([\"\", \"\"]);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [filter, setFilter] = useState(\"All\");\n    const [displayContent, setDisplayContent] = useState([]);\n    const [itemList, setItemList] = useState([]);\n    const [loaded, setLoaded] = useState(false);\n    const [checkboxUpdate, setCheckboxUpdate] = useState(\"\");\n    // Fetch all menu items to display in table\n    useEffect(() => {\n        var data = null;\n        const fetchData = async () => {\n            const res = await fetch(`${BACKEND_URL}item/`, {\n                method: \"GET\",\n                headers: {\n                    \"content-type\": \"application/json\",\n                },\n            })\n            data = await res.json();\n            console.log(data.items);\n            const rows = [];\n            data.items.forEach(element => {\n                console.log(element);\n                rows.push(\n                    createData(\n                        element.Name,\n                        element.pictureURL, \n                        element.Category, \n                        Object.entries(element.Accomodations),\n                        Object.entries(element.Prices), \n                        element.Description,\n                        element._id,\n                        element.isFeatured,\n                ));\n            });\n            setItemList(rows);\n            setDisplayContent(rows);\n            setLoaded(true);\n        }\n        \n        fetchData();\n    }, [setLoaded,])\n    // update display contents based on search term\n    const handleSearch = (searchTerm) => {\n        // Empty search term, so we want to reset the displayed items to those of the current category\n        if(searchTerm === \"\"){\n            if(filter === \"All\"){        \n                setDisplayContent(itemList); \n            }\n            else {\n                setDisplayContent(itemList.filter(x => x.categoryName === filter));\n            }\n        }\n        else{\n            // Filters the current display content to show those that contain the\n            // search term in the name AND correspond to current filter\n            if(filter === \"All\"){\n                setDisplayContent(itemList.filter(x => x.itemName.toLowerCase().includes(searchTerm.toLowerCase()))); \n            }\n            else {\n                // Filter based on search term and filter term\n                setDisplayContent(itemList.filter(x => \n                    x.itemName.toLowerCase().includes(searchTerm.toLowerCase())\n                    && x.categoryName === filter\n                )); \n            }\n        }\n    }\n    // update display contents based on filter term\n    // possible terms are: Main Dish, Appetizer, Drink, Side\n    const handleFilterChange = (filter) => {\n        // clear search\n        setSearchTerm(\"\");\n        if(filter === \"All\"){        \n            setDisplayContent(itemList); \n        }\n        else{\n            const newRows = [];\n            for(var index in itemList) { \n                if (itemList[index][\"categoryName\"] === filter){\n                    newRows.push(itemList[index]); \n                }\n            }\n            console.log(newRows)\n            setDisplayContent(newRows); \n        }\n    }\n    // Called when a set featured checkbox is clicked\n    const handleFeatureChange = async (row) => {\n        const itemID = row.id;\n        const newValue = !row.isFeatured;\n        row.isFeatured = newValue;\n        // update item's feature property in local (displayContent and itemList)\n        var itemListIndex = -1;\n        itemList.forEach((x, index) => {\n            itemListIndex = x.id === itemID ? index : itemListIndex;\n        })\n        if(itemListIndex !== -1){\n            setItemList(prev => {\n                prev[itemListIndex].isFeatured = newValue;\n                return prev;\n            })\n        }\n        var displayContentIndex = displayContent.findIndex(x => x.id === itemID);\n        if(displayContentIndex !== -1){\n            displayContent[displayContentIndex].isFeatured = newValue;\n            setDisplayContent(displayContent);\n        }\n        setCheckboxUpdate(row.itemName + \"\" + newValue);\n\n        // update item's feature property in database\n        await fetch(`${BACKEND_URL}item/feature`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                \"_id\": itemID,\n                \"isFeatured\": newValue\n            })\n        })\n    }\n    if(loaded){\n        return (  \n            <div>\n                {deleteConfirmation[0] !== \"\" && deleteConfirmationModal(deleteConfirmation, setDeleteConfirmation, itemList, setItemList, displayContent, setDisplayContent)}\n                <div className=\"aboveTableContainer\">\n                    <Button className=\"menuAddButton\">\n                        <AddCircleIcon className=\"menuAddButtonIcon\" />\n                        Add Item\n                    </Button>\n                    <div className=\"searchFilterContainer\">\n                        <Select\n                            className=\"menuFilterSelect\"\n                            id=\"item-filter-select\"\n                            defaultValue=\"All\"\n                            displayEmpty=\"false\"\n                            variant=\"outlined\"\n                            value={filter}\n                            onChange={(v) => {\n                                setFilter(v.target.value);\n                                handleFilterChange(v.target.value);\n                            }}\n                        >\n                            <MenuItem value=\"All\">All</MenuItem>\n                            <MenuItem value=\"Appetizer\">Appetizer</MenuItem>\n                            <MenuItem value=\"Main Dish\">Main Dish</MenuItem>\n                            <MenuItem value=\"Side\">Side</MenuItem>\n                            <MenuItem value=\"Drink\">Drink</MenuItem>\n                        </Select>\n                        <SearchBar\n                            className=\"menuSearchBar\"\n                            value={searchTerm}\n                            onChange={(newValue) => setSearchTerm(newValue)}\n                            onRequestSearch={() => handleSearch(searchTerm)}\n                            onCancelSearch={() => {\n                                setSearchTerm(\"\"); \n                                handleSearch(\"\");\n                            }}\n                        />\n                    </div>\n                </div>\n                {menuTable(itemList, setItemList, displayContent, setDisplayContent, setDeleteConfirmation, handleFeatureChange)}\n            </div>\n        )\n    }\n    else{\n        return (\n            <div> </div>\n        )\n    }\n}\n","/Users/amador/UWEAST-Community-Kitchen/frontend/src/util/auth.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuItems.js",["92","93"],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/OrdersTableColumns.js",["94","95"],"import 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap-daterangepicker/daterangepicker.css';\nimport '../css/Orders.css';\n\n// Import helper functions from utils\nimport {\n    renderStatus,\n    DisplayDateFilters,\n    DisplayStatusFilters,\n    updateDateFilters,\n    renderDateFilters    \n} from '../util/OrdersTableFunctions';\n\n//The column headers for the table\nconst columns = [\n    {\n      name: \"Pick up Details\",\n      options: {\n        filter: true,\n        filterType: 'custom',\n        customFilterListOptions: {\n          render: renderDateFilters,\n          update: updateDateFilters\n        },\n        filterOptions: {\n          names: [],\n          logic(date, filters) {\n            const getDate = date.split(\"\\n\")[0];\n            if (filters[0] && filters[1]) {\n              return getDate < filters[0] || getDate > filters[1];\n            } else if (filters[0]) {\n              return getDate < filters[0];\n            } else if (filters[1]) {\n              return getDate > filters[1];\n            }\n            return false;\n          },\n          display: DisplayDateFilters\n        }\n      }  \n    },\n    {\n      name: \"Name\",\n      options: {\n        filter: true,\n        filterType: 'textField'\n      }  \n    },\n    {\n      name: \"Email\",\n      options: {\n        filter: true,\n        filterType: 'textField'\n      }    \n    },\n    {\n      name: \"Phone Number\",\n      options: {\n        filter: true,\n        filterType: 'textField'\n      }  \n    },\n    {\n      name: \"Amount Paid\",\n      options: {\n        filter: false\n      }  \n    },\n    {\n      name: \"Order Description\",\n      options: {\n        display: false, \n        viewColumns: false, \n        filter: false\n      }\n    },\n    {\n      name: \"Submission Details\",\n      options: {\n        filter: true,\n        filterType: 'custom',\n        customFilterListOptions: {\n          render: renderDateFilters,\n          update: updateDateFilters\n        },\n        filterOptions: {\n          names: [],\n          logic(date, filters) {\n            const getDate = date.split(\"\\n\")[0];\n            if (filters[0] && filters[1]) {\n              return getDate < filters[0] || getDate > filters[1];\n            } else if (filters[0]) {\n              return getDate < filters[0];\n            } else if (filters[1]) {\n              return getDate > filters[1];\n            }\n            return false;\n          },\n          display: DisplayDateFilters\n        }\n      }  \n    },\n    {\n      name: \"Order Status\",\n      options: {\n        filter: true,\n        filterType: 'custom',\n        customBodyRender: renderStatus,\n        customFilterListOptions: {\n          render: (options) => {\n            if(options[0] === \"All Orders\") return [];\n            return options;\n          },\n        },\n        filterOptions: {\n          names: [\"Pending Orders\", \"Completed Orders\"],\n          logic(order, filters) {\n            if (filters[0] == \"Completed Orders\") {\n              return order === \"Pending Orders\";\n            } else if (filters[0] == \"Pending Orders\") {\n              return order === \"Completed Orders\";\n            }\n  \n            return false;\n          },\n          display: DisplayStatusFilters\n        }\n      }\n    },\n    {\n      name: \"Row ID\",\n      options: {\n        display: false, \n        viewColumns: false, \n        filter: false\n      }\n    }\n];\n\nexport { columns } ;","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuItem.js",["96","97"],"import React from 'react';\nimport \"../css/MenuItem.css\";\nconst config = require('../config');\n\nconst MenuItem = ( {description, image, price, title, togglePopup, dietaryInfo, priceOptions, accommodations} ) => {\n    return (\n      <div className=\"menu-item\" onClick={() => togglePopup(title, description, priceOptions, image, dietaryInfo, accommodations)}>\n        <div className=\"menu-image\">\n          <img src={image}></img>\n        </div>\n        <div className=\"menu-text\">\n          <h3 className=\"menu-name\">{title}</h3>\n          <p className=\"menu-description\">{description}</p>\n        </div>\n        <div className=\"menu-absolutes\">\n          <p className=\"menu-price\">${price}</p>\n        </div>\n      </div>\n    );\n}\n  \nexport default MenuItem;","/Users/amador/UWEAST-Community-Kitchen/frontend/src/reportWebVitals.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/config.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/NavBar.js",["98","99","100","101","102"],"import React from 'react';\nimport {useHistory} from \"react-router-dom\";\nimport {Navbar, Nav} from 'react-bootstrap';\nimport {isAuthorized, removeJWT} from '../util/auth.js';\nimport '../css/NavBar.css';\n\n\nexport default function NavBar (props) {\n\n    {/* history hook to redirect on logout */}\n    const history = useHistory();\n\n    {/* stores class names to toggle whether content is shown */}\n    var adminContentClass;\n    var loginButtonClass;\n\n    {/* removes login token and redirects to menu page */}\n    function logout() {\n        removeJWT();\n        history.push(\"/\");\n        history.go(0);\n    }\n\n    {/* Hides admin content (admin page + logout) or login button depending on whether user is logged in */}\n    if(isAuthorized()) {\n        adminContentClass = \"nav-link\";\n        loginButtonClass = \"nav-link d-none\";\n    } else {\n        adminContentClass = \"nav-link d-none\";\n        loginButtonClass = \"nav-link\";\n    }\n\n    {/* Check current page from props to change active nav-link color */}\n    function isPageActive(pageToCheck) {\n        return (pageToCheck === props.currentPage) ? \" active\" : \"\";\n    }\n\n    return (\n        <html>\n            <head>\n                {/* Bootstrap Resources */}\n                <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossOrigin=\"anonymous\"/>\n            </head>\n            <Navbar className=\"navbar navbar-bg-color\" collapseOnSelect expand=\"md\" variant=\"dark\">\n                {/* Left Hand Side of Navbar - Title & Image linked to Menu Page */}\n                <Navbar.Brand href=\"/\">\n                    <img src=\"\" className=\"d-inline-block align-top\" alt=\"UWEAST Logo\"/>\n                </Navbar.Brand>\n\n                {/* Triggers on Collapse - Hamburger Icon replaces pages */}\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n\n                {/* Right Hand Side of Navbar - Linked Pages (based off of Router paths in App.js) */}\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"ml-auto\">\n                        {/* Menu Page */}\n                        <Nav.Link className={\"nav-link\" + isPageActive(\"menu\")} href=\"/\">Menu</Nav.Link>\n\n                        {/* Contact Page */}\n                        <Nav.Link className={\"nav-link\" + isPageActive(\"contact\")} href=\"/contact\">Contact</Nav.Link>\n\n                        {/* About Page */}\n                        <Nav.Link className={\"nav-link\" + isPageActive(\"about\")} href=\"/about\">About</Nav.Link>\n\n                        {/* Admin Page - only visible when isAuthorized()*/}\n                        <Nav.Link className={adminContentClass + isPageActive(\"admin\")} href=\"/admin\">Admin</Nav.Link>\n\n                        <Nav.Link className={adminContentClass + isPageActive(\"admin\")} href=\"/orders\">Orders</Nav.Link>\n\n                        {/* Logout Button - starts logout operation, only visible when isAuthorized() */}\n                        <Nav.Link className={adminContentClass} onClick={logout}>Logout</Nav.Link>\n\n                        {/* Login Page - only visible when not isAuthorized()*/}\n                        <Nav.Link className={loginButtonClass + isPageActive(\"login\")} href=\"/login\">Login</Nav.Link>        \n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        </html>\n    )\n}","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/CartPreview.js",["103","104","105","106","107"],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuSection.js",["108","109","110","111","112"],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/ChangeEmailScreen.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/MenuFilter.js",["113","114"],"import React, { Component} from 'react';\nimport MenuFilterButton from './MenuFilterButton';\nimport \"../css/MenuFilter.css\";\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nconst MenuFilter = ( {foodCategories, changeVisibleCategories} ) => {\n    return (\n      <div className=\"menu-filter\">\n        {foodCategories.map((categoryName, key) => (\n          // generates filter buttons based on categories\n          <MenuFilterButton categoryName={categoryName} key={key} changeVisibleCategories={changeVisibleCategories()} />\n        ))}\n      </div>\n    )\n  }\n  \n  export default MenuFilter;","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/CartSummary.js",["115","116","117","118","119","120","121","122","123","124"],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/About.js",["125"],{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":195,"column":8,"nodeType":"132","endLine":195,"endColumn":14,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":26},{"ruleId":"134","severity":1,"message":"138","line":2,"column":8,"nodeType":"136","messageId":"137","endLine":2,"endColumn":17},{"ruleId":"134","severity":1,"message":"139","line":6,"column":7,"nodeType":"136","messageId":"137","endLine":6,"endColumn":18},{"ruleId":"126","replacedBy":"140"},{"ruleId":"128","replacedBy":"141"},{"ruleId":"134","severity":1,"message":"142","line":177,"column":12,"nodeType":"136","messageId":"137","endLine":177,"endColumn":26},{"ruleId":"134","severity":1,"message":"139","line":6,"column":7,"nodeType":"136","messageId":"137","endLine":6,"endColumn":18},{"ruleId":"143","severity":1,"message":"144","line":15,"column":74,"nodeType":"145","endLine":15,"endColumn":83},{"ruleId":"146","severity":1,"message":"147","line":118,"column":28,"nodeType":"148","messageId":"149","endLine":118,"endColumn":30},{"ruleId":"146","severity":1,"message":"147","line":120,"column":35,"nodeType":"148","messageId":"149","endLine":120,"endColumn":37},{"ruleId":"134","severity":1,"message":"150","line":3,"column":7,"nodeType":"136","messageId":"137","endLine":3,"endColumn":13},{"ruleId":"151","severity":1,"message":"152","line":9,"column":11,"nodeType":"153","endLine":9,"endColumn":28},{"ruleId":"154","severity":1,"message":"155","line":10,"column":5,"nodeType":"156","messageId":"157","endLine":10,"endColumn":47},{"ruleId":"154","severity":1,"message":"155","line":13,"column":5,"nodeType":"156","messageId":"157","endLine":13,"endColumn":66},{"ruleId":"154","severity":1,"message":"155","line":17,"column":5,"nodeType":"156","messageId":"157","endLine":17,"endColumn":59},{"ruleId":"154","severity":1,"message":"155","line":24,"column":5,"nodeType":"156","messageId":"157","endLine":24,"endColumn":109},{"ruleId":"154","severity":1,"message":"155","line":33,"column":5,"nodeType":"156","messageId":"157","endLine":33,"endColumn":74},{"ruleId":"134","severity":1,"message":"158","line":1,"column":28,"nodeType":"136","messageId":"137","endLine":1,"endColumn":37},{"ruleId":"159","severity":1,"message":"160","line":24,"column":21,"nodeType":"161","endLine":24,"endColumn":31},{"ruleId":"159","severity":1,"message":"160","line":25,"column":21,"nodeType":"161","endLine":25,"endColumn":31},{"ruleId":"159","severity":1,"message":"160","line":26,"column":21,"nodeType":"161","endLine":26,"endColumn":31},{"ruleId":"159","severity":1,"message":"160","line":27,"column":21,"nodeType":"161","endLine":27,"endColumn":31},{"ruleId":"134","severity":1,"message":"162","line":4,"column":8,"nodeType":"136","messageId":"137","endLine":4,"endColumn":21},{"ruleId":"134","severity":1,"message":"150","line":6,"column":7,"nodeType":"136","messageId":"137","endLine":6,"endColumn":13},{"ruleId":"146","severity":1,"message":"147","line":30,"column":21,"nodeType":"148","messageId":"149","endLine":30,"endColumn":23},{"ruleId":"146","severity":1,"message":"147","line":39,"column":35,"nodeType":"148","messageId":"149","endLine":39,"endColumn":37},{"ruleId":"134","severity":1,"message":"163","line":70,"column":9,"nodeType":"136","messageId":"137","endLine":70,"endColumn":13},{"ruleId":"134","severity":1,"message":"135","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":26},{"ruleId":"134","severity":1,"message":"139","line":6,"column":7,"nodeType":"136","messageId":"137","endLine":6,"endColumn":18},{"ruleId":"134","severity":1,"message":"164","line":2,"column":10,"nodeType":"136","messageId":"137","endLine":2,"endColumn":33},{"ruleId":"134","severity":1,"message":"165","line":3,"column":10,"nodeType":"136","messageId":"137","endLine":3,"endColumn":28},{"ruleId":"134","severity":1,"message":"166","line":4,"column":8,"nodeType":"136","messageId":"137","endLine":4,"endColumn":20},{"ruleId":"134","severity":1,"message":"167","line":5,"column":8,"nodeType":"136","messageId":"137","endLine":5,"endColumn":18},{"ruleId":"134","severity":1,"message":"168","line":8,"column":10,"nodeType":"136","messageId":"137","endLine":8,"endColumn":19},{"ruleId":"134","severity":1,"message":"169","line":8,"column":26,"nodeType":"136","messageId":"137","endLine":8,"endColumn":29},{"ruleId":"159","severity":1,"message":"160","line":41,"column":21,"nodeType":"161","endLine":41,"endColumn":31},{"ruleId":"159","severity":1,"message":"160","line":42,"column":21,"nodeType":"161","endLine":42,"endColumn":31},{"ruleId":"159","severity":1,"message":"160","line":43,"column":21,"nodeType":"161","endLine":43,"endColumn":31},{"ruleId":"159","severity":1,"message":"160","line":44,"column":21,"nodeType":"161","endLine":44,"endColumn":31},{"ruleId":"134","severity":1,"message":"139","line":7,"column":7,"nodeType":"136","messageId":"137","endLine":7,"endColumn":18},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'history' and 'paypalOrderObject'. Either include them or remove the dependency array.","ArrayExpression",["172"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'SearchBar' is defined but never used.","'BACKEND_URL' is assigned a value but never used.",["170"],["171"],"'checkboxUpdate' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'config' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'useEffect' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'MenuItemPopup' is defined but never used.","'json' is assigned a value but never used.","'MuiPickersUtilsProvider' is defined but never used.","'KeyboardDatePicker' is defined but never used.","'DateFnsUtils' is defined but never used.","'LuxonUtils' is defined but never used.","'Container' is defined but never used.","'Col' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"173","fix":"174"},"Update the dependencies array to be: [cart, history, paypalOrderObject]",{"range":"175","text":"176"},[7377,7383],"[cart, history, paypalOrderObject]"]