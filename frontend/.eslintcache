[{"/Users/amador/UWEAST-Community-Kitchen/frontend/src/index.js":"1","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/About.js":"2","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Admin.js":"3","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Menu.js":"4","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/CartPreview.js":"5","/Users/amador/UWEAST-Community-Kitchen/frontend/src/reportWebVitals.js":"6","/Users/amador/UWEAST-Community-Kitchen/frontend/src/config.js":"7","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/PayPal.js":"8","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Login.js":"9","/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/NavBar.js":"10"},{"size":500,"mtime":1610411291969,"results":"11","hashOfConfig":"12"},{"size":1448,"mtime":1611176590755,"results":"13","hashOfConfig":"12"},{"size":33796,"mtime":1611176590755,"results":"14","hashOfConfig":"12"},{"size":533,"mtime":1611187422619,"results":"15","hashOfConfig":"12"},{"size":2357,"mtime":1611204570351,"results":"16","hashOfConfig":"12"},{"size":362,"mtime":1610411291970,"results":"17","hashOfConfig":"12"},{"size":191,"mtime":1610411291969,"results":"18","hashOfConfig":"12"},{"size":3667,"mtime":1611176590752,"results":"19","hashOfConfig":"12"},{"size":1601,"mtime":1611159524410,"results":"20","hashOfConfig":"12"},{"size":3297,"mtime":1610411291968,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"wx0vlp",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/amador/UWEAST-Community-Kitchen/frontend/src/index.js",[],["47","48"],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/About.js",["49"],"import React, { Component} from 'react';\nimport Navbar from '../components/NavBar';\nimport PayPal from '../components/PayPal';\n\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nclass About extends Component {\n\n    // For paypal payment handling, we assume the cart passed into the PayPal object looks like...\n    // {\n    //     item_total: \"\",\n    //     tax_total: \"\",\n    //     items: [\n    //         {\n    //             name: \"\",\n    //             quantity: \"\", \n    //             size: \"\", (Individual or Family)\n    //             addons: [\"\", \"\"], (Sides, gluten free)\n    //             individual_price: \"\", (price per item)\n    //             individual_tax: \"\", (tax per item)\n    //         },\n\n    //     ]\n    // }\n    \n    render (){\n    const cart = {\n        cart_total: \"15.00\",\n        item_total: \"12.00\",\n        tax_total: \"3.00\",\n        items: [\n            {\n                name: \"Food 1\",\n                quantity: \"2\",\n                size: \"Individual\",\n                addons: [\"Gluten Free\"],\n                individual_price: \"6.00\",\n                individual_tax: \"1.50\",\n            },\n        ]\n    }\n      return (\n\n          <div>\n              <Navbar/>\n              <div style={{marginTop: \"30px\"}}>\n                  This is the About Page.\n              </div>\n              <PayPal cart={cart}/>           \n          </div>\n\n      )\n    }\n  }\n  \n  export default About;","/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Admin.js",["50","51","52","53","54","55","56","57","58","59","60","61"],"import React, { Component } from 'react';\nimport { Modal, Button} from 'react-bootstrap';\nimport Navbar from '../components/NavBar';\nimport '../css/Admin.css';\n\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nclass Admin extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            renderFeaturedItems: false,\n            renderEditItems: false,\n            renderAddItems: false,\n            renderDeleteItems: false,\n            renderItemDetails: false,\n            getItemsArray: [],\n            insertItem: {\n                vegan: false,\n                vegetarian: false,\n                glutenFree: false\n            },\n            featureList: {},\n            deleteItemsArray: []\n        }\n\n        //Modals\n        this.featuredItemModal = this.featuredItemModal.bind(this);\n        this.editItemModal = this.editItemModal.bind(this);\n        this.addItemModal = this.addItemModal.bind(this);\n        this.deleteItemModal = this.deleteItemModal.bind(this);\n        this.editItemDetails = this.editItemDetails.bind(this);\n\n        //Helper methods\n        this.updateField = this.updateField.bind(this);\n        this.updateFieldCheckbox = this.updateFieldCheckbox.bind(this);\n        this.updateInsertField = this.updateInsertField.bind(this);\n        this.updateInsertFieldCheckbox = this.updateInsertFieldCheckbox.bind(this);\n\n        //Fetch calls\n        this.getItems = this.getItems.bind(this);\n        this.saveItemChanges = this.saveItemChanges.bind(this);\n        this.deleteItem = this.deleteItem.bind(this);\n        this.insertItem = this.insertItem.bind(this);\n        this.saveFeatures = this.saveFeatures.bind(this);\n    }\n\n    //////////////////////////////////////////\n    //          Fetch call methods          //\n    //////////////////////////////////////////\n\n    //Fetch call to get all menu items\n    getItems() {\n        fetch(`${BACKEND_URL}item`)\n        .then(res => res.json())\n        .then(data => {\n            this.setState({\n                getItemsArray: data.items,\n            }, () => {\n                //This callback function allows for featureList to be populated \n                //upon loading of the page\n                let setList = {};\n                for (let i = 0; i < this.state.getItemsArray.length; i++) {\n                    let info = this.state.getItemsArray[i];\n                    if(info.featured) setList[info._id] = info._id;\n                }\n\n                this.setState({\n                    featureList: setList    \n                })\n            });   \n        }).catch((error) => {\n            console.log(error);\n        })\n    }\n\n    //Fetch call to save item changes upon editing\n    insertItem() {\n        if(Object.keys(this.state.insertItem).length < 10) {\n            console.log(\"Error! not enough items in addItem object\")\n            return;\n        }\n\n        fetch(`${BACKEND_URL}item/insert`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(this.state.insertItem)\n        }).then(async result => {\n            if (result.ok) console.log(result.statusText);\n            this.setState({ renderAddItems: false })\n        })\n        .catch(e => {\n            console.log(e);\n        });\n    }\n\n    //fetch call to delete the item\n    deleteItem(item) {\n        if(!item) {\n            console.log(\"Error! Can't delete this item\");\n            return;\n        }\n\n        fetch(`${BACKEND_URL}item/remove`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(item)\n        }).then(async result => {\n            if (result.ok) console.log(result.statusText);\n\n            this.setState({ renderDeleteItems: false })\n            //render the list to get the updated list without refreshing the page\n            this.getItems();\n        })\n        .catch(e => {\n            console.log(e);\n        });    \n    }\n\n    //Fetch call to insert data into the table\n    saveItemChanges(e) {\n        // e.preventDefault();\n        const keys = [\"name\", \"description\", \"category\", \"price\", \"image\", \"cuisine\", \"ingredients\", \"vegan\", \"vegetarian\", \"glutenFree\"];\n        if(!this.state.getItemInfo) {\n            console.log(\"Error! editing item problem.\");\n            return;\n        }\n\n        for(let key in keys) {\n            if(!(keys[key] in this.state.getItemInfo)) {\n                console.log(\"Error! Missing \" + keys[key] + \" in object\");\n                return;\n            }    \n        }\n\n        fetch(`${BACKEND_URL}item/edit`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(this.state.getItemInfo)\n        }).then(async result => {\n            if (result.ok) console.log(result.statusText);\n            this.setState({ renderItemDetails: false })\n            //render the list to get the updated list without refreshing the page\n            this.getItems();\n        })\n        .catch(e => {\n            console.log(e);\n        });\n    }\n\n    //update the items to be listed under the features tag\n    saveFeatures() {\n        fetch(`${BACKEND_URL}item/feature`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(this.state.featureList)\n        }).then(async result => {\n            if (result.ok) console.log(result.statusText);\n            this.setState({ renderFeaturedItems: false })\n        })\n        .catch(e => {\n            console.log(e);\n        });    \n    }\n\n    componentDidMount() {\n        //Get the list of menu items when loading the page\n        this.getItems();\n    }\n\n    //This modal will render when the user clicks on \"feature\" button\n    //Determine the items to be listed as \"featured\"\n    featuredItemModal() {\n        //List of categories\n        const featuredCategories = [\"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\n\n        return (\n            <Modal show={this.state.renderFeaturedItems} onHide={() => this.setState({renderFeaturedItems: false})} backdrop='static'>\n                <Modal.Header closeButton>\n                    <Modal.Title>Featured Menu Item</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div>\n                        {featuredCategories.map((category, ind) => (\n                            <div>\n                                <h6>{category}</h6>\n                                <div className=\"list-group\">\n                                    {this.state.getItemsArray.map((item, ind) => {\n                                        if(item.category === category) {\n                                            return (\n                                                <div className=\"featured-item-checkbox\">\n                                                    <input name=\"menu-item\" className=\"form-check-input\" type=\"checkbox\" checked={this.state.featureList[item._id]}\n                                                            onChange={(e) => {\n                                                                const getList = this.state.featureList;\n                                                                getList[item._id] ? delete getList[item._id] : getList[item._id] = item._id;\n                                                                this.setState({\n                                                                    featureList: getList\n                                                                });\n                                                            }}>      \n                                                    </input>\n                                            \n                                                    <label class=\"form-check-label\" >\n                                                        {item.name}\n                                                    </label>\n                                                </div>\n                                            )\n                                        }\n                                    })}\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => this.setState({renderFeaturedItems: false })}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={() => this.saveFeatures()}>\n                        Save Changes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        )\n    }\n\n    //This modal opens when the Admin clicks on \"edit\"\n    //This will allows the admin to edit their menu items\n    editItemModal() {\n        const featuredCategories = [\"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\n\n        return (\n            <Modal show={this.state.renderEditItems} onHide={() => this.setState({renderEditItems: false})} backdrop='static'>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit item</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div>\n                        {featuredCategories.map((category, ind) => (\n                            <div>\n                                <h6>{category}</h6>\n                                <div className=\"list-group\">\n                                    {this.state.getItemsArray.map((item, ind) => {\n                                        if(item.category === category) {\n                                            return (\n                                                <button onClick={() => {\n                                                    const filterItem = this.state.getItemsArray.filter(items => items.name === item.name)[0];\n                                                    this.setState({\n                                                        renderEditItems: false,\n                                                        renderItemDetails: true,\n                                                        getItemInfo: filterItem,\n                                                    })\n                                                }}>Edit {item.name}</button>\n                                            )\n                                        }\n                                    })}\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => this.setState({ renderEditItems: false })}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        )\n    }\n\n    // Helper method used to update textfield in edit item modal\n    updateField(e, field) {\n        let updateField = this.state.getItemInfo;\n        \n        //Delete the object so the form wil check for empty inputs\n        if(e.target.value == \"\") delete updateField[e.target.name];\n        else updateField[field] = e.target.value;\n\n        this.setState({ getItemInfo: updateField });\n    }\n\n    //Used for vegan, vegetarian, and glutenFree checkboxes\n    updateFieldCheckbox(isChecked, field) {\n        let updateField = this.state.getItemInfo;\n        updateField[field] = isChecked;\n        this.setState({ getItemInfo: updateField });\n    }\n\n    //This will render when the user clicks on an item inside the \"edit\" modal\n    //Allows the admin to edit any field and update accordingly\n    editItemDetails() {\n        //Undefined when page initially renders, returns an error\n        //This check prevents such error\n        if(this.state.getItemInfo === undefined) return; \n\n        return (\n            <Modal show={this.state.renderItemDetails} onHide={() => this.setState({renderItemDetails: false})} backdrop='static'>\n                <Modal.Header closeButton>\n                    <Modal.Title></Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <form>\n                        <div class=\"form-group\">\n                            <label for=\"name\">Name</label>\n                            <input name=\"name\" type=\"text\" class=\"form-control\" placeholder=\"Enter name\" required \n                                value={this.state.getItemInfo.name} onChange={(e) => this.updateField(e, 'name')}\n                            />\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"name\">Description</label>\n                            <input name=\"description\" type=\"text\" class=\"form-control\" placeholder=\"Enter description\" required \n                                value={this.state.getItemInfo.description} onChange={(e) => this.updateField(e, 'description')}\n                            />\n                        </div>\n\n                        <label for=\"description\">Category</label>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" value=\"Appetizers\" required \n                                checked={this.state.getItemInfo.category === \"Appetizers\"} onChange={(e) => this.updateField(e, 'category')}\n                            />\n                            <label class=\"form-check-label\" for=\"Appetizers\">\n                                Appetizers\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" value=\"Main Dishes\" required \n                                checked={this.state.getItemInfo.category === \"Main Dishes\"} onChange={(e) => this.updateField(e, 'category')}\n                            />\n                            <label class=\"form-check-label\" for=\"Main Dishes\">\n                                Main Dishes\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" value=\"Sides\" required \n                                checked={this.state.getItemInfo.category === \"Sides\"} onChange={(e) => this.updateField(e, 'category')}\n                            />\n                            <label class=\"form-check-label\" for=\"Sides\">\n                                Sides\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" value=\"Drinks\" required \n                                checked={this.state.getItemInfo.category === \"Drinks\"} onChange={(e) => this.updateField(e, 'category')}\n                            />\n                            <label class=\"form-check-label\" for=\"Drinks\">\n                                Drinks\n                            </label>\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"price\">Price</label>\n                            <input name=\"price\" type=\"number\" step=\"0.01\" class=\"form-control\" placeholder=\"Enter price\" required \n                                value={this.state.getItemInfo.price} onChange={(e) => this.updateField(e, 'price')}\n                            />\n                        </div>\n\n                        <div class=\"form-group\">\n                            <label for=\"image\">Image Link</label>\n                            <input name=\"image\" type=\"text\" class=\"form-control\" placeholder=\"Enter link\" required \n                                value={this.state.getItemInfo.image} onChange={(e) => this.updateField(e, 'image')}\n                            />\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"cuisine\">Cuisine</label>\n                            <input name=\"cuisine\" type=\"text\" class=\"form-control\" placeholder=\"Enter cuisine\" required \n                                value={this.state.getItemInfo.cuisine} onChange={(e) => this.updateField(e, 'cuisine')}\n                            />\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"ingredients\">Ingredients</label>\n                            <input name=\"ingredients\" type=\"text\" class=\"form-control\" placeholder=\"Enter ingredients, separated by commas\" required \n                                value={this.state.getItemInfo.ingredients ? this.state.getItemInfo.ingredients.toString().replace(',', ', ') : ''} \n                                onChange={(e) => this.updateField(e, 'ingredients')}\n                            />\n                        </div>\n\n                        <div class=\"form-check form-check-inline\">\n                            <input name=\"vegan\" class=\"form-check-input\" type=\"checkbox\"\n                                checked={this.state.getItemInfo.vegan} onChange={(e) => this.updateFieldCheckbox(!this.state.getItemInfo.vegan, 'vegan')}\n                            />\n                            <label class=\"form-check-label\" for=\"defaultCheck1\">\n                                Vegan\n                            </label>\n                        </div>\n                        \n                        <div class=\"form-check form-check-inline\">\n                            <input name=\"vegetarian\" class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"editVegetarian\" \n                                checked={this.state.getItemInfo.vegetarian} onChange={(e) => this.updateFieldCheckbox(!this.state.getItemInfo.vegetarian, 'vegetarian')}\n                            />\n                            <label class=\"form-check-label\" for=\"defaultCheck2\">\n                                Vegetarian\n                            </label>\n                        </div>\n                        \n                        <div class=\"form-check form-check-inline\">\n                            <input name=\"glutenFree\" class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"editGlutenFree\" \n                                checked={this.state.getItemInfo.glutenFree} onChange={(e) => this.updateFieldCheckbox(!this.state.getItemInfo.glutenFree, 'glutenFree')}\n                            />\n                            <label class=\"form-check-label\" for=\"defaultCheck3\">\n                                Gluten Free\n                            </label>\n                        </div>   \n                        <Modal.Footer>\n                            <Button variant=\"secondary\" onClick={() => {\n                                this.setState({ renderItemDetails: false, renderEditItems: true });\n                                //This call will allow the changes to not take effect if the user closes the modal\n                                this.getItems();\n                            } }>\n                                Close\n                            </Button>\n                            <Button variant=\"primary\" type=\"submit\" onClick={(e) => this.saveItemChanges(e)}>\n                                Save Changes\n                            </Button>\n                        </Modal.Footer>\n                    </form>\n                </Modal.Body>\n            </Modal>\n        )\n    }\n\n    //Method used for updating state for inserting item\n    updateInsertField(e, isIngredients) {\n        const getState = this.state.insertItem;\n\n        //Check for ingredients key, so then it will split values into array\n        if(isIngredients) {\n            getState[e.target.name] = e.target.value.split(',');\n        } else {\n            getState[e.target.name] = e.target.value;\n        }\n        \n        this.setState({\n            insertItem: getState\n        })\n    }\n\n    //Same concept as updateInsertField but for the three checkboxes\n    //which are vegan, vegetarian, and glutenFree\n    updateInsertFieldCheckbox(e) {\n        const getState = this.state.insertItem;\n        getState[e.target.name] = !this.state.insertItem[e.target.name];\n\n        this.setState({\n            insertItem: getState\n        });\n    }\n\n    //This modal will render when the user clicks on the \"add\" button\n    //Admin user can add new item to the database through here\n    addItemModal() {\n        return (\n            <Modal show={this.state.renderAddItems} onHide={() => this.setState({ renderAddItems: false })} backdrop='static'>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add Menu Item</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <form>\n                        <div class=\"form-group\">\n                            <label for=\"name\">Name</label>\n                            <input name=\"name\" type=\"text\" class=\"form-control\" id=\"name\" placeholder=\"Enter name\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"name\">Description</label>\n                            <input name=\"description\" type=\"text\" class=\"form-control\" id=\"description\" placeholder=\"Enter description\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                        </div>\n\n                        <label for=\"description\">Category</label>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" id=\"category\" value=\"Appetizers\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                            <label class=\"form-check-label\" for=\"Appetizers\">\n                                Appetizers\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" id=\"category\" value=\"Main Dishes\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                            <label class=\"form-check-label\" for=\"Main Dishes\">\n                                Main Dishes\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" id=\"category\" value=\"Sides\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                            <label class=\"form-check-label\" for=\"Sides\">\n                                Sides\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" name=\"category\" type=\"radio\" name=\"category\" id=\"category\" value=\"Drinks\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                            <label class=\"form-check-label\" for=\"Drinks\">\n                                Drinks\n                            </label>\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"price\">Price</label>\n                            <input name=\"price\" type=\"number\" step=\"0.01\" class=\"form-control\" id=\"price\" placeholder=\"Enter price\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                        </div>\n\n                        <div class=\"form-group\">\n                            <label for=\"image\">Image Link</label>\n                            <input name=\"image\" type=\"text\" class=\"form-control\" id=\"image\" placeholder=\"Enter link\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"cuisine\">Cuisine</label>\n                            <input name=\"cuisine\" type=\"text\" class=\"form-control\" id=\"cuisine\" placeholder=\"Enter cuisine\" required \n                                onChange={(e) => this.updateInsertField(e)}\n                            />\n                        </div>\n                        \n                        <div class=\"form-group\">\n                            <label for=\"ingredients\">Ingredients</label>\n                            <input name=\"ingredients\" type=\"text\" class=\"form-control\" id=\"ingredients\" placeholder=\"Enter ingredients, separated by commas\" required \n                                onChange={(e) => this.updateInsertField(e, true)}\n                            />\n                        </div>\n\n                        <div class=\"form-check form-check-inline\">\n                            <input name=\"vegan\" class=\"form-check-input\" type=\"checkbox\" checked={this.state.vegan} id=\"vegan\" \n                                onChange={(e) => this.updateInsertFieldCheckbox(e)}\n                            />\n                            <label class=\"form-check-label\" for=\"defaultCheck1\">\n                                Vegan\n                            </label>\n                        </div>\n                        \n                        <div class=\"form-check form-check-inline\">\n                            <input name=\"vegetarian\" class=\"form-check-input\" type=\"checkbox\" checked={this.state.vegetarian} id=\"vegetarian\" \n                                onChange={(e) => this.updateInsertFieldCheckbox(e)}\n                            />\n                            <label class=\"form-check-label\" for=\"defaultCheck2\">\n                                Vegetarian\n                            </label>\n                        </div>\n                        \n                        <div class=\"form-check form-check-inline\">\n                            <input name=\"glutenFree\" class=\"form-check-input\" type=\"checkbox\" checked={this.state.glutenFree} id=\"glutenFree\" \n                                onChange={(e) => this.updateInsertFieldCheckbox(e)}\n                            />\n                            <label class=\"form-check-label\" for=\"defaultCheck3\">\n                                Gluten Free\n                            </label>\n                        </div>\n                        <Modal.Footer>\n                            <Button variant=\"secondary\" onClick={() => this.setState({\n                                insertItem: {\n                                    vegan: false,\n                                    vegetarian: false,\n                                    glutenFree: false\n                                },\n                                renderAddItems: false\n                            })}>\n                                Close\n                            </Button>\n                            <Button variant=\"primary\" type=\"submit\" onClick={() => this.insertItem()}>\n                                Save Changes\n                            </Button>\n                        </Modal.Footer>\n                    </form>\n                </Modal.Body>\n            </Modal>\n        )\n    }\n\n    //This modal renders when the user clicks on the \"delete\" button\n    //Allows the admin user to delete an item from the database\n    deleteItemModal() {\n        const featuredCategories = [\"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\n\n        return (\n            <Modal show={this.state.renderDeleteItems} onHide={() => this.setState({renderDeleteItems: false})} backdrop='static'>\n                <Modal.Header closeButton>\n                    <Modal.Title>Delete items</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <div>\n                        {featuredCategories.map((category, ind) => (\n                            <div>\n                                <h6>{category}</h6>\n                                <div className=\"list-group\">\n                                    {this.state.getItemsArray.map((item, ind) => {\n                                        if(item.category === category) {\n                                            return (\n                                                <div>\n                                                    <input type=\"checkbox\" checked={this.state.deleteItemsArray[item._id]} \n                                                        onChange={(e) => {\n                                                            let itemList = this.state.deleteItemsArray;\n                                                            if(itemList.filter(e => e._id === item._id).length > 0) {\n                                                                itemList = itemList.filter(e => e._id !== item._id)\n                                                            } else {\n                                                                itemList.push(item);\n                                                            }\n\n                                                            this.setState({\n                                                                deleteItemsArray: itemList\n                                                            });\n                                                        }}\n                                                    />\n                                                    <label>Delete {item.name}</label>\n                                                </div>\n                                            )\n                                        }\n                                    })}\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </Modal.Body>\n                \n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={() => {\n                        const getList = this.state.deleteItemsArray;\n                        const length = getList.length;\n                        for(let i = 0; i < length; i++ ) { \n                            this.deleteItem(this.state.deleteItemsArray[i]); \n                        }\n\n                        this.setState({ \n                            renderDeleteItems: false,\n                            deleteItemsArray: []\n                        })\n                    }}\n                        disabled={this.state.deleteItemsArray.length === 0}>\n                        Delete Item(s)\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        )\n    }\n\n    render() {\n      return (\n          <div>\n            {/* The navbar on top of the page */}\n              <Navbar />\n\n              {/* This is the contents on the admin page */}\n              <div class=\"admin-section\">\n                    <div class=\"col-12\">\n                        <h2 class=\"admin-title\">Admin Panel</h2>\n                        <p>Please use this page to edit what is displayed on the website to customers.</p>\n                    </div>\n\n                    <br />\n\n                    {/* <div class=\"col-12\">\n                        <h2 class=\"admin-title\">Orders</h2>\n                        <p>View placed orders and mark them as fulfilled.</p>\n                        <a class=\"btn btn-primary\" href=\"/orders\" role=\"button\">Orders</a>\n                    </div> */}\n\n                    <br />\n\n                    <div class=\"col-12\">\n                        <h2 class=\"admin-title\">Menu Items</h2>\n                        <p>Adjust what items are on the website.</p>\n                        <Button onClick={() => this.setState({renderAddItems: true})}>\n                            Add\n                        </Button>\n                        <Button onClick={() => this.setState({renderEditItems: true})}>\n                            Edit\n                        </Button>\n                        <Button onClick={() => this.setState({renderDeleteItems: true})}>\n                            Delete\n                        </Button>\n                    </div>\n\n                    <br />\n\n                    <div class=\"col-12\">\n                        <h2 class=\"admin-title\">Featured Item</h2>\n                        <p>Choose the featured item to display at the top of the site.</p>\n                        <Button onClick={() => this.setState({renderFeaturedItems: true})} >Edit</Button>\n                    </div>\n                </div>       \n\n                {/* These are the modals used on the page. They will conditionally render */}\n                {this.featuredItemModal()}\n                {this.editItemModal()}\n                {this.addItemModal()}\n                {this.deleteItemModal()}\n                {this.editItemDetails(this.state.itemName)}\n          </div>\n\n      )\n    }\n  }\n  \n  export default Admin;",["62","63"],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Menu.js",["64"],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/CartPreview.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/reportWebVitals.js",[],["65","66"],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/config.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/PayPal.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/pages/Login.js",[],"/Users/amador/UWEAST-Community-Kitchen/frontend/src/components/NavBar.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":7,"column":7,"nodeType":"73","messageId":"74","endLine":7,"endColumn":18},{"ruleId":"75","severity":1,"message":"76","line":199,"column":79,"nodeType":"77","messageId":"78","endLine":199,"endColumn":81},{"ruleId":"75","severity":1,"message":"76","line":253,"column":79,"nodeType":"77","messageId":"78","endLine":253,"endColumn":81},{"ruleId":"79","severity":1,"message":"80","line":286,"column":27,"nodeType":"81","messageId":"82","endLine":286,"endColumn":29},{"ruleId":"83","severity":1,"message":"84","line":331,"column":90,"nodeType":"85","endLine":331,"endColumn":105},{"ruleId":"83","severity":1,"message":"84","line":340,"column":90,"nodeType":"85","endLine":340,"endColumn":105},{"ruleId":"83","severity":1,"message":"84","line":349,"column":90,"nodeType":"85","endLine":349,"endColumn":105},{"ruleId":"83","severity":1,"message":"84","line":358,"column":90,"nodeType":"85","endLine":358,"endColumn":105},{"ruleId":"83","severity":1,"message":"84","line":494,"column":90,"nodeType":"85","endLine":494,"endColumn":105},{"ruleId":"83","severity":1,"message":"84","line":503,"column":90,"nodeType":"85","endLine":503,"endColumn":105},{"ruleId":"83","severity":1,"message":"84","line":512,"column":90,"nodeType":"85","endLine":512,"endColumn":105},{"ruleId":"83","severity":1,"message":"84","line":521,"column":90,"nodeType":"85","endLine":521,"endColumn":105},{"ruleId":"75","severity":1,"message":"76","line":621,"column":79,"nodeType":"77","messageId":"78","endLine":621,"endColumn":81},{"ruleId":"67","replacedBy":"86"},{"ruleId":"69","replacedBy":"87"},{"ruleId":"71","severity":1,"message":"72","line":6,"column":7,"nodeType":"73","messageId":"74","endLine":6,"endColumn":18},{"ruleId":"67","replacedBy":"88"},{"ruleId":"69","replacedBy":"89"},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"no-unused-vars","'BACKEND_URL' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["90"],["91"],["90"],["91"],"no-global-assign","no-unsafe-negation"]