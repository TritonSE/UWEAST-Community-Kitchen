[{"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\index.js":"1","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\App.js":"3","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\About.js":"4","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Contact.js":"5","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Register.js":"6","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\ResetPassword.js":"7","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Admin.js":"8","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Login.js":"9","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Menu.js":"10","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\CartSummary.js":"11","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\config.js":"12","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\ContactMap.js":"13","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\ContactForm.js":"14","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\ForgotPasswordDialogue.js":"15","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\AdminMenuItems.js":"16","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Emails.js":"17","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\PayPal.js":"18","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\NavBar.js":"19","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\SearchSection.js":"20","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\Banner.js":"21","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\util\\Auth.js":"22","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Orders.js":"23","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuSection.js":"24","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\CartPreview.js":"25","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuItemPopup.js":"26","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\CustomTimePicker.js":"27","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\ChangeHeaderModal.js":"28","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\EditMenuItemModal.js":"29","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\AddMenuItemModal.js":"30","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\ChangeEmailScreen.js":"31","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\ChangeSecondaryEmailScreen.js":"32","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuFilter.js":"33","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuItems.js":"34","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\OrdersTable.js":"35","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuFilterButton.js":"36","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\OrdersTableColumns.js":"37","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuItemCategory.js":"38","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\util\\OrdersTableFunctions.js":"39","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuItem.js":"40","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Custom404.js":"41"},{"size":517,"mtime":1610307420384,"results":"42","hashOfConfig":"43"},{"size":375,"mtime":1610307420390,"results":"44","hashOfConfig":"43"},{"size":2305,"mtime":1615420841764,"results":"45","hashOfConfig":"43"},{"size":1676,"mtime":1615420841833,"results":"46","hashOfConfig":"43"},{"size":777,"mtime":1614230870692,"results":"47","hashOfConfig":"43"},{"size":14439,"mtime":1615420841852,"results":"48","hashOfConfig":"43"},{"size":13683,"mtime":1615420841855,"results":"49","hashOfConfig":"43"},{"size":5307,"mtime":1615420841835,"results":"50","hashOfConfig":"43"},{"size":9734,"mtime":1615420841841,"results":"51","hashOfConfig":"43"},{"size":9818,"mtime":1615420841848,"results":"52","hashOfConfig":"43"},{"size":18124,"mtime":1615420841778,"results":"53","hashOfConfig":"43"},{"size":309,"mtime":1613542707375,"results":"54","hashOfConfig":"43"},{"size":3101,"mtime":1615420841784,"results":"55","hashOfConfig":"43"},{"size":3146,"mtime":1615420841782,"results":"56","hashOfConfig":"43"},{"size":6358,"mtime":1615420841790,"results":"57","hashOfConfig":"43"},{"size":21450,"mtime":1615420841772,"results":"58","hashOfConfig":"43"},{"size":3784,"mtime":1614230870693,"results":"59","hashOfConfig":"43"},{"size":9702,"mtime":1615420841804,"results":"60","hashOfConfig":"43"},{"size":6799,"mtime":1615420841801,"results":"61","hashOfConfig":"43"},{"size":1204,"mtime":1615420841806,"results":"62","hashOfConfig":"43"},{"size":471,"mtime":1615420841774,"results":"63","hashOfConfig":"43"},{"size":1724,"mtime":1615420841858,"results":"64","hashOfConfig":"43"},{"size":5469,"mtime":1615177051375,"results":"65","hashOfConfig":"43"},{"size":4537,"mtime":1615420841798,"results":"66","hashOfConfig":"43"},{"size":4409,"mtime":1615177051337,"results":"67","hashOfConfig":"43"},{"size":13935,"mtime":1615177051352,"results":"68","hashOfConfig":"43"},{"size":2006,"mtime":1615177051346,"results":"69","hashOfConfig":"43"},{"size":6735,"mtime":1615177051342,"results":"70","hashOfConfig":"43"},{"size":26086,"mtime":1615420841787,"results":"71","hashOfConfig":"43"},{"size":25652,"mtime":1615420841770,"results":"72","hashOfConfig":"43"},{"size":5512,"mtime":1615177051341,"results":"73","hashOfConfig":"43"},{"size":7605,"mtime":1615177051344,"results":"74","hashOfConfig":"43"},{"size":887,"mtime":1615420841793,"results":"75","hashOfConfig":"43"},{"size":946,"mtime":1613890037054,"results":"76","hashOfConfig":"43"},{"size":5217,"mtime":1615177051355,"results":"77","hashOfConfig":"43"},{"size":1061,"mtime":1613890037046,"results":"78","hashOfConfig":"43"},{"size":3871,"mtime":1615177051357,"results":"79","hashOfConfig":"43"},{"size":3307,"mtime":1615177051350,"results":"80","hashOfConfig":"43"},{"size":6597,"mtime":1615177051378,"results":"81","hashOfConfig":"43"},{"size":1005,"mtime":1615420841795,"results":"82","hashOfConfig":"43"},{"size":1435,"mtime":1615420841837,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"1wzwk4m",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"86"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"86"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"86"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"86"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"86"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"86"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"86"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"86"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"86"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"86"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"86"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"86"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"86"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"86"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"86"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"86"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"86"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"86"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"86"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"86"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"86"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"188"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\index.js",[],["191","192"],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\App.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\About.js",["193"],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Contact.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Register.js",["194"],"/**\r\n * The file is responsible for the display and functionality of admin account registration, allowing \r\n * a non-registered user to make an admin account for themselves provided they have the necessary clearance. \r\n * Account registration is constrained to unique email addresses (i.e., each email address can have at most one\r\n * admin account associated with it), and knowledge of the secret key. Secret key has been pre-decided by the \r\n * cliet, and is confident to them. \r\n * \r\n * Successful registration attempts will give the user a special admin JWT so they do not need to re-sign in,\r\n * and redirect them to the admin page. Unsuccessful registration attempts will spew error messages. \r\n * \r\n * Once registration is successful, any subsequent attempts to access the site as an admin must be done\r\n * using the login page. \r\n * \r\n * Note: A logged in user will not have access to the registeration page, as they are assumed to already have a account.\r\n * \r\n * @summary     Displays registeration page and allows new user to register as a site admin. \r\n * @author      Amrit Kaur Singh\r\n */\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { Link, Redirect, useHistory } from 'react-router-dom';\r\nimport { \r\n  TextField, Button, Grid, \r\n  Snackbar, Typography \r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { isAuthenticated, setJWT } from '../util/Auth';\r\nimport Navbar from '../components/NavBar';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport DOMPurify from 'dompurify';\r\n\r\n\r\nimport \"../css/AccountsPages.css\";\r\n\r\nconst config = require('../config');\r\n\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n  centered: {\r\n    textAlign: 'center'\r\n  },\r\n  form: {\r\n    // input field - general layout\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(1),\r\n      width: '95%'\r\n    },\r\n    \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n      borderColor: \"black\"\r\n    },\r\n    \"& .MuiInputLabel-outlined.Mui-focused\": {\r\n      color: \"black\"\r\n    },\r\n    '& .MuiTypography-root': {\r\n      margin: theme.spacing(1),\r\n      width: '100%'\r\n    },\r\n\r\n    '& .MuiButton-root': {\r\n      margin: theme.spacing(3),\r\n      color: 'black',\r\n      background: '#F9CE1D',\r\n      width:'30%'\r\n    }\r\n  },\r\n  title: {\r\n    margin: theme.spacing(2),\r\n    textAlign: 'center',\r\n    fontWeight: 'bolder',\r\n    textTransform: 'uppercase'\r\n  }\r\n}));\r\n\r\nexport default function Register() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [state, setState] = React.useState({\r\n    isAuthenticatingUser: true,\r\n    isUserAuthenticated: false,\r\n    email: '',\r\n    password: '',\r\n    passwordConfirmation: '',\r\n    secret: '',\r\n    showPassword: {\r\n      password: false,\r\n      passwordConfirmation: false,\r\n      secret: false\r\n    },\r\n    snack: {\r\n      message: '',\r\n      open: false\r\n    },\r\n    errors: {\r\n      email: false,\r\n      password: false,\r\n      passwordConfirmation: false,\r\n      secret: false\r\n    },\r\n    form_disabled: false\r\n  });\r\n\r\n  // checks if user is already authenticated (logged in)\r\n  useEffect(() => {\r\n    isAuthenticated().then(async result => {\r\n\r\n      setState({...state, isAuthenticatingUser: false, isUserAuthenticated: result});\r\n    })\r\n  }, []);\r\n\r\n  // updates given state with given value \r\n  const handleChange = (prop) => (event) => {\r\n    setState({ ...state, [prop]: event.target.value });\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setState({ ...state, showPassword: {...state.showPassword, password: !state.showPassword.password } });\r\n  };\r\n\r\n  const handleClickShowPasswordConfirmation = () => {\r\n    setState({ ...state, showPassword: { ...state.showPassword, passwordConfirmation: !state.showPassword.passwordConfirmation } });\r\n  };\r\n\r\n  const handleClickShowSecret = () => {\r\n    setState({ ...state, showPassword: {...state.showPassword, secret: !state.showPassword.secret } });\r\n  };\r\n\r\n  /**\r\n   * Handles submission of the form (button click). Validates form data for completion/length, making a backend request to Users DB for secret key autentication + \r\n   * email uniqueness. If registeration succeeds, user is redirected to admin page and added to user collection. Otherwise, an error message appears. \r\n   * \r\n   * @param {*} event - Reason for function call \r\n   * @returns {void} \r\n   */\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    setState({ ...state, form_disabled: true });\r\n\r\n    // display loading cursor \r\n    document.body.style.cursor= 'wait';\r\n\r\n    // sanitize input - XSS attack protection \r\n    state.email =  DOMPurify.sanitize(state.email);\r\n    state.password =  DOMPurify.sanitize(state.password);\r\n    state.passwordConfirmation =  DOMPurify.sanitize(state.passwordConfirmation);\r\n    state.secret =  DOMPurify.sanitize(state.secret);\r\n\r\n    const submission = {\r\n      email: state.email,\r\n      password: state.password,\r\n      secret: state.secret\r\n    };\r\n\r\n    let email = false;\r\n    let password = false; \r\n    let passwordConfirmation = false;\r\n    let secret = false; \r\n\r\n    // check if either field is empty\r\n    if (state.email === ''){\r\n        email = true;\r\n    }\r\n    if (state.password === ''){\r\n        password = true;\r\n    }\r\n    if (state.passwordConfirmation === ''){\r\n      passwordConfirmation = true;\r\n    }\r\n    if (state.secret === ''){\r\n      secret = true;\r\n    }\r\n    if(email + password + passwordConfirmation + secret > 0){\r\n        document.body.style.cursor= null;\r\n        setState({...state, errors: {email: email, password: password, passwordConfirmation: passwordConfirmation, secret: secret}, form_disabled: false, snack: {message: 'Please fill out all required fields.', open: true}});\r\n        return;\r\n    }\r\n    // check password length\r\n    if (submission.password.length < 6) {\r\n      document.body.style.cursor= null;\r\n      setState({...state, errors: {email: false, password: true, passwordConfirmation: false, secret: false}, form_disabled: false,  snack: {message: 'Password must be at least 6 characters long.', open: true}});\r\n      return;\r\n    }\r\n\r\n    // check passwords match\r\n    if (state.password !== state.passwordConfirmation) {\r\n      document.body.style.cursor= null;\r\n      setState({...state,errors: {email: false, password: true, passwordConfirmation: true, secret: false}, form_disabled: false, snack: {message: 'Passwords Do Not Match.', open: true}});\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // attempt to register with given credentials \r\n      const response = await fetch(`${BACKEND_URL}user/register`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(submission)\r\n      });\r\n\r\n      // successful registration\r\n      if (response.ok) {\r\n        const json = await response.json();\r\n        setJWT(json.token);\r\n        history.push(\"/admin\");\r\n        return;\r\n      }\r\n      // invalid credentials \r\n      else if (response.status === 401) {\r\n        document.body.style.cursor= null;\r\n        setState({...state, errors: {email: false, password: false, passwordConfirmation: false, secret: true}, form_disabled: false, snack: {message: 'Could not register account: Invalid Secret Key!', open: true}});\r\n      }\r\n      // duplicate user \r\n      else if (response.status === 409) {\r\n        document.body.style.cursor= null;\r\n        setState({...state, form_disabled: false, errors: {email: true, password: false, passwordConfirmation: false, secret: false}, snack: {message: 'Could not register account: Email already in use!', open: true}});\r\n      }\r\n      // any other server response\r\n      else {\r\n        document.body.style.cursor= null;\r\n        const text = await response.text();\r\n        setState({...state, errors: {email: false, password: false, passwordConfirmation: false, secret: false}, form_disabled: false, snack: {message: `Could not register account: ${text}`, open: true}});\r\n      }\r\n    } \r\n    // general error\r\n    catch (error) {\r\n      document.body.style.cursor= null;\r\n      setState({...state, errors: {email: false, password: false, passwordConfirmation: false, secret: false}, form_disabled: false, snack: {message: `An error occurred: ${error.message}`, open: true}});\r\n    }\r\n  };\r\n\r\n  const handleSnackClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setState({...state, snack: {...state.snack, open: false}});\r\n  };\r\n\r\n  // loading screen while user is being authenticated (prevent double logins)\r\n  if(state.isAuthenticatingUser){\r\n    return(\r\n      <html className=\"Account-Html\">\r\n        <body className=\"Account-Body\">\r\n          <div className=\"NavBar\">\r\n                <Navbar/>\r\n          </div>\r\n          <div className=\"spinner\">\r\n            <CircularProgress color='inherit' size={40}/>\r\n          </div>\r\n        </body>\r\n    </html>\r\n    )\r\n  // authenticated user, redirect to admin\r\n  } else if(state.isUserAuthenticated){\r\n    return (<Redirect to=\"/admin\"/>)\r\n\r\n  // non-authenticated user, display registeration page\r\n  } else {\r\n    return (\r\n      <html className=\"Account-Html\">\r\n        <body className=\"Account-Body\">\r\n            {/* navbar */}\r\n            <div className=\"NavBar\">\r\n              <Navbar/>\r\n            </div>     \r\n            <Grid\r\n                  container\r\n                  spacing={0}\r\n                  alignItems=\"center\"\r\n                  justify=\"center\"\r\n                  className=\"Account-Box\"\r\n                  >\r\n                  <Grid item md={6} xs={12}>\r\n                  <div className=\"Border\">\r\n                      {/* title + description  */}\r\n                      <Typography variant=\"h4\" className={classes.title}>\r\n                      Register New Account\r\n                      </Typography>\r\n                      <p className={classes.centered} style={{color: \"#8d8d8d\"}}> Fill out the fields below to create a new account </p>\r\n                      {/* form  */}\r\n                      <form className={classes.form} onSubmit={handleSubmit}>\r\n                      {/* email field  */}\r\n                      <TextField label='Email' variant='outlined' type='email' onChange={handleChange('email')} error={state.errors.email}/>\r\n                      {/* password field  */}\r\n                      <TextField \r\n                      label='Password' \r\n                      variant='outlined' \r\n                      type={state.showPassword.password ? 'text' : 'password'} \r\n                      onChange={handleChange('password')} \r\n                      error={state.errors.password}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              aria-label=\"toggle password visibility\"\r\n                              onClick={handleClickShowPassword}\r\n                            >\r\n                              {state.showPassword.password ? <Visibility /> : <VisibilityOff />}\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        )\r\n                      }\r\n                    }\r\n                      />\r\n                      {/* confirm password field  */}\r\n                      <TextField \r\n                      label='Confirm Password' \r\n                      variant='outlined' \r\n                      type={state.showPassword.passwordConfirmation ? 'text' : 'password'}\r\n                      onChange={handleChange('passwordConfirmation')} \r\n                      error={state.errors.passwordConfirmation}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              aria-label=\"toggle password visibility\"\r\n                              onClick={handleClickShowPasswordConfirmation}\r\n                            >\r\n                              {state.showPassword.passwordConfirmation ? <Visibility /> : <VisibilityOff />}\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        )\r\n                      }\r\n                    }\r\n                      />\r\n                      {/* secret key field  */}\r\n                      <TextField \r\n                      label='Secret Key' \r\n                      variant='outlined' \r\n                      type={state.showPassword.secret ? 'text' : 'password'}\r\n                      onChange={handleChange('secret')} \r\n                      error={state.errors.secret}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              aria-label=\"toggle password visibility\"\r\n                              onClick={handleClickShowSecret}\r\n                            >\r\n                              {state.showPassword.secret ? <Visibility /> : <VisibilityOff />}\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        )\r\n                      }\r\n                    }\r\n                      />\r\n                      {/* login link  */}\r\n                      <Link to=\"login\"><Typography>Already have an account? Sign-In</Typography></Link>\r\n                      {/* register button  */}\r\n                      <div className={classes.centered}>\r\n                          <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={state.form_disabled}>Register</Button>\r\n                      </div>\r\n                      </form>\r\n                    </div>         \r\n                  </Grid>   \r\n                  \r\n              </Grid> \r\n              {/* error messages displayed at bottom of screen */}\r\n              <Snackbar open={state.snack.open} autoHideDuration={6000} onClose={handleSnackClose} message={state.snack.message}/>\r\n            </body>\r\n      </html>\r\n    )\r\n  }\r\n}","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\ResetPassword.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Admin.js",["195"],"/**\r\n  * This file contains renders the Admin page. It includes a Nav Bar that links\r\n  * to the orders page, menu page, update emails page, and change passwords page.\r\n  *\r\n  * @summary    Renders admin page\r\n  * @author     PatrickBrown1\r\n  */\r\n \r\n import React, { useEffect } from 'react';\r\n import Navbar from '../components/NavBar';\r\n import AdminMenuItems from \"../components/AdminMenuItems\";\r\n import Orders from \"./Orders\";\r\n import Emails from \"./Emails\";\r\n import { isAuthenticated } from '../util/Auth';\r\n import {Redirect} from 'react-router-dom';\r\n import CircularProgress from '@material-ui/core/CircularProgress';\r\n \r\n import '../css/Admin.css';\r\n import \"../css/AccountsPages.css\";\r\n \r\n export default function Admin() {\r\n \r\n     // constructor(props) {\r\n     //     super(props);\r\n     //     this.state = {\r\n     //         currentScreen: \"orders\"\r\n     //     }\r\n \r\n     //     //Admin NavBar binding\r\n     //     this.adminNavBar = this.adminNavBar.bind(this);\r\n     // }\r\n \r\n     const [state, setState] = React.useState({\r\n         isAuthenticatingUser: true,\r\n         isUserAuthenticated: false,\r\n         currentScreen: \"orders\"\r\n       });\r\n \r\n     useEffect(() => {\r\n         isAuthenticated().then(async result => {\r\n           setState({ ...state, isAuthenticatingUser: false, isUserAuthenticated: result});\r\n         })\r\n       }, []);\r\n \r\n     /**\r\n      * Renders the admin page navigation bar between orders, menu, and email screens.\r\n      */\r\n     const adminNavBar = () => {\r\n         var currentScreen = state.currentScreen;\r\n         return(\r\n             <div className=\"adminNavContainer\">\r\n                 { currentScreen === \"orders\" ? \r\n                     <h2 className=\"adminNavSelected\" onClick={() => setState({...state, currentScreen: \"orders\"})}>\r\n                         All Orders\r\n                     </h2> : \r\n                     <h2 className=\"adminNavUnselected\" onClick={() => setState({...state, currentScreen: \"orders\"})}>\r\n                         All Orders\r\n                     </h2>\r\n                 }\r\n                 { currentScreen === \"menu\" ? \r\n                     <h2 className=\"adminNavSelected\" onClick={() => setState({...state, currentScreen: \"menu\"})}>\r\n                         Edit Menu\r\n                     </h2> : \r\n                     <h2 className=\"adminNavUnselected\" onClick={() => setState({...state, currentScreen: \"menu\"})}>\r\n                         Edit Menu\r\n                     </h2>\r\n                 }\r\n                 { currentScreen === \"email\" ? \r\n                     <h2 className=\"adminNavSelected\" onClick={() => setState({...state, currentScreen: \"email\"})}>\r\n                         Email\r\n                     </h2> : \r\n                     <h2 className=\"adminNavUnselected\" onClick={() => setState({...state, currentScreen: \"email\"})}>\r\n                         Email\r\n                     </h2>\r\n                 }\r\n                  { currentScreen === \"resetPassword\" ? \r\n                     <h2 className=\"adminNavSelected\" onClick={() => setState({...state, currentScreen: \"resetPassword\"})}>\r\n                         Reset Password\r\n                     </h2> : \r\n                     <h2 className=\"adminNavUnselected\" onClick={() => setState({...state, currentScreen: \"resetPassword\"})}>\r\n                         Reset Password\r\n                     </h2>\r\n                 }\r\n             </div>\r\n         );\r\n     }\r\n \r\n         // redirect to login if user is trying to access admin panel without being logged in \r\n         if(state.isAuthenticatingUser){\r\n             return (\r\n                 <html className=\"Account-Html\">\r\n                     <body className=\"Account-Body\">\r\n                         <div className=\"NavBar\">\r\n                                 <Navbar/>\r\n                         </div>\r\n                         <div className=\"spinner\">\r\n                             <CircularProgress color='inherit' size={40}/>\r\n                         </div>\r\n                     </body>\r\n                 </html>\r\n             );\r\n         }\r\n         else if (!state.isUserAuthenticated){\r\n             return (\r\n                 <Redirect to=\"/login\"/> \r\n             );\r\n         } else {\r\n             return (\r\n                 <div>\r\n                 {/* The navbar on top of the page */}\r\n                   <Navbar/>\r\n     \r\n                   {/* This is the contents on the admin page */}\r\n                   <div class=\"admin-section\">\r\n                         {adminNavBar()}\r\n     \r\n                         {/* <div class=\"col-12\">\r\n                             <h2 class=\"admin-title\">Orders</h2>\r\n                             <p>View placed orders and mark them as fulfilled.</p>\r\n                             <a class=\"btn btn-primary\" href=\"/orders\" role=\"button\">Orders</a>\r\n                         </div> */}\r\n                         {state.currentScreen === \"orders\" && <Orders />}\r\n                         {state.currentScreen === \"menu\" && <AdminMenuItems />}\r\n                         {state.currentScreen === \"email\" && <Emails />}\r\n                         {state.currentScreen === \"resetPassword\" && <Redirect to=\"/reset-password\"/>}\r\n                     </div>       \r\n               </div>\r\n             );\r\n         }\r\n   };\r\n ","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Login.js",["196"],"/**\r\n * The file is responsible for the display and functionality of login, allowing a registered user \r\n * to be authenticated provided they give the correct email and password. For all other attempts, \r\n * login is blocked with some error message as indication. Upon successful verification of user, the \r\n * user is given an JWT admin token that will allow them administration functionality on the site, \r\n * namely access to the site's Admin page. \r\n * \r\n * @summary     Displays login page and allows registed user to login as a site admin. \r\n * @author      Amrit Kaur Singh\r\n */\r\n\r\nimport React from 'react';\r\nimport { Link, Redirect, useHistory } from 'react-router-dom';\r\nimport { \r\n  TextField, Button,  \r\n  Snackbar, Typography \r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { isAuthenticated, setJWT} from '../util/Auth';\r\nimport Navbar from '../components/NavBar';\r\nimport { useEffect } from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport DOMPurify from 'dompurify';\r\n\r\n\r\nimport \"../css/AccountsPages.css\";\r\n\r\nconst config = require('../config');\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n  centered: {\r\n    textAlign: 'center'\r\n  },\r\n  form: {\r\n    // input field - general layout\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(1),\r\n      width: '95%'\r\n    },\r\n    \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n      borderColor: \"black\"\r\n    },\r\n    \"& .MuiInputLabel-outlined.Mui-focused\": {\r\n      color: \"black\"\r\n    },\r\n    '& .MuiTypography-root': {\r\n      margin: theme.spacing(1),\r\n      width: '100%'\r\n    },\r\n\r\n    '& .MuiButton-root': {\r\n      margin: theme.spacing(3),\r\n      color: 'black',\r\n      background: '#F9CE1D',\r\n      width:'30%'\r\n    }\r\n  },\r\n  title: {\r\n    margin: theme.spacing(2),\r\n    textAlign: 'center',\r\n    fontWeight: 'bolder',\r\n    textTransform: 'uppercase'\r\n  }\r\n}));\r\n\r\nexport default function Login() {\r\n\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [state, setState] = React.useState({\r\n    isAuthenticatingUser: true,\r\n    isUserAuthenticated: false,\r\n    email: '',\r\n    password: '',\r\n    showPassword: false,\r\n    snack: {\r\n      message: '',\r\n      open: false\r\n    },\r\n    errors: {\r\n      email: false,\r\n      password: false\r\n    },\r\n    form_disabled: false\r\n  });\r\n\r\n\r\n  // checks if user is already authenticated (logged in)\r\n  useEffect(() => {\r\n    isAuthenticated().then(async result => {\r\n      setState({...state, isAuthenticatingUser: false, isUserAuthenticated: result});\r\n    })\r\n  }, []);\r\n\r\n  // updates given state with given value \r\n  const handleChange = (prop) => (event) => {\r\n    setState({ ...state, [prop]: event.target.value });\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setState({ ...state, showPassword: !state.showPassword });\r\n  };\r\n\r\n  \r\n  /**\r\n   * Handles submission of the form (button click). Validates form data for completion/length, making a backend request to Users Collection for user authentication. If\r\n   * user is authenticated, user is redirected to admin page and given a special admin JWT. Otherwise, an error message appears. \r\n   * \r\n   * @param {*} event - Reason for function call \r\n   * @returns {void} \r\n   */\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // temporarily disable form to prevent spam clicks\r\n    setState({ ...state, form_disabled: true });\r\n\r\n    // display loading cursor \r\n    document.body.style.cursor= 'wait';\r\n\r\n    // sanitize input - XSS attack protection \r\n    state.email =  DOMPurify.sanitize(state.email);\r\n    state.password =  DOMPurify.sanitize(state.password);\r\n\r\n    const submission = {\r\n      email: state.email,\r\n      password: state.password\r\n    };\r\n\r\n    // check if either field is empty\r\n    let email = false;\r\n    let password = false; \r\n\r\n    if(state.email === ''){\r\n        email = true;\r\n    }\r\n    if(state.password === ''){\r\n        password = true;\r\n    }\r\n    if(email + password > 0){\r\n        document.body.style.cursor= null;\r\n        setState({...state, errors: {email: email, password: password}, form_disabled: false, snack: {message: 'Please fill out all required fields.', open: true}});\r\n        return;\r\n    }\r\n   \r\n    // check password length\r\n    if (submission.password.length < 6) {\r\n      document.body.style.cursor= null;\r\n      setState({...state, errors: {email: false, password: true}, form_disabled: false, snack: {message: 'Password must be at least 6 characters long.', open: true}});\r\n      return;\r\n    }\r\n    try {\r\n\r\n      // attempt to login with given credentials \r\n      const response = await fetch(`${BACKEND_URL}user/login`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(submission)\r\n      });\r\n\r\n      // successful login\r\n      if (response.ok) {\r\n\r\n        // set admin JWT \r\n        const json = await response.json();\r\n        setJWT(json.token);\r\n        document.body.style.cursor= null;\r\n        // admin redirect\r\n        history.push(\"/admin\");\r\n        return;\r\n      }\r\n      // invalid credentials\r\n      else if (response.status === 401) {\r\n        document.body.style.cursor= null;\r\n        setState({...state, errors: {email: true, password: true}, form_disabled: false, snack: {message: 'Invalid Login: Email or password not recognized.', open: true}});\r\n      }\r\n      // any other server response\r\n      else {\r\n        const text = await response.text();\r\n        document.body.style.cursor= null;\r\n        setState({...state, form_disabled: false, errors: {email: false, password: false}, snack: {message: `Could not log in: ${text}`, open: true}});\r\n      }\r\n    } \r\n    // general error\r\n    catch (error) {\r\n      document.body.style.cursor= null;\r\n      setState({...state, form_disabled: false, errors: {email: false, password: false}, snack: {message: `An error occurred: ${error.message}`, open: true}});\r\n    }\r\n  };\r\n\r\n  const handleSnackClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setState({...state, snack: {...state.snack, open: false}});\r\n  };\r\n\r\n  // loading screen while user is being authenticated (prevent double logins)\r\n  if(state.isAuthenticatingUser){\r\n    return(\r\n      <html className=\"Account-Html\">\r\n        <body className=\"Account-Body\">\r\n          <div className=\"NavBar\">\r\n                <Navbar/>\r\n          </div>\r\n          <div className=\"spinner\">\r\n            <CircularProgress color='inherit' size={40}/>\r\n          </div>\r\n        </body>\r\n    </html>\r\n    )\r\n  \r\n  // authenticated user, redirect to admin\r\n  } else if(state.isUserAuthenticated){\r\n    return(\r\n      <Redirect to=\"/admin\"/>\r\n    )\r\n  // non-authenticated user, display login page\r\n  } else {\r\n    return (\r\n      <html className=\"Account-Html\">\r\n        <body className=\"Account-Body\">\r\n          {/* navbar */}\r\n          <div className=\"NavBar\">\r\n            <Navbar/>\r\n          </div>\r\n          <div className=\"Account-Box\">\r\n            <div className=\"Border\">\r\n              {/* title + description  */}\r\n              <Typography variant=\"h4\" className={classes.title} style={{fontSize: \"2.5rem\"}} > Login </Typography>\r\n              <p className={classes.centered} style={{color: \"#8d8d8d\"}}> Sign-in into an existing account below </p>\r\n              {/* form  */}\r\n              <form className={classes.form} onSubmit={handleSubmit}>\r\n                    {/* email field */}\r\n                    <TextField label='Email' variant='outlined' type='email' onChange={handleChange('email')} error={state.errors.email}/>\r\n                    {/* password field */}\r\n                    <TextField \r\n                    label='Password' \r\n                    variant='outlined' \r\n                    type={state.showPassword ? 'text' : 'password'} \r\n                    onChange={handleChange('password')} \r\n                    error={state.errors.password}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <IconButton\r\n                            aria-label=\"toggle password visibility\"\r\n                            onClick={handleClickShowPassword}\r\n                          >\r\n                            {state.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                          </IconButton>\r\n                        </InputAdornment>\r\n                      )\r\n                    }\r\n                  }\r\n                    />\r\n                    {/* registration link */}\r\n                    <Link to=\"register\"><Typography>Register Account</Typography></Link>\r\n                    {/* reset password link */}\r\n                    <Link to=\"reset-password\"><Typography>Reset Password</Typography></Link>\r\n                    {/* login button */}\r\n                    <div className={classes.centered}>\r\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={state.form_disabled}>Login</Button>\r\n                    </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n        </body>\r\n          {/* error messages displayed at bottom of screen */}\r\n          <Snackbar open={state.snack.open} autoHideDuration={6000} onClose={handleSnackClose} message={state.snack.message}/>\r\n      </html>\r\n    );\r\n  }\r\n}","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Menu.js",["197"],"/**\r\n * Entry point of the Menu page on the website. It renders all components that are part of the menu page,\r\n * including the cart preview, cart summary, menu section, and search section. The search section stores \r\n * the header image and the menu section stores the menu items and item cart. It also contains the\r\n * cart, which is tracked by states, and handles adding and removing items from the cart. This file \r\n * depends on the CartPreview, CartSummary, SearchSection, MenuSection, Navbar, and Banner components.\r\n * \r\n * @summary Renders the menu page and all components that are on this page.\r\n * @author Dhanush Nanjunda Reddy\r\n * @author Navid Boloorian\r\n */\r\nimport React, { Component } from 'react';\r\nimport Navbar from '../components/NavBar';\r\nimport CartPreview from '../components/CartPreview';\r\nimport CartSummary from '../components/CartSummary';\r\nimport SearchSection from '../components/SearchSection';\r\nimport MenuSection from '../components/MenuSection';\r\nimport Banner from '../components/Banner';\r\nimport { instanceOf } from 'prop-types';\r\nimport { withCookies, Cookies } from 'react-cookie';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {Link} from 'react-router-dom';\r\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core';\r\nimport \"../css/Menu.css\";\r\nimport { Button } from 'react-bootstrap';\r\n\r\nclass Menu extends Component {\r\n\r\n    //Cookies object used to access and modify cookies\r\n    static propTypes = {\r\n        cookies: instanceOf(Cookies).isRequired\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //creates cart cookie with default values if it doesn't exist\r\n        if (!this.props.cookies.get(\"cart\")) {\r\n            let newCart = {\r\n                items: [],\r\n                subtotal: \"00.00\",\r\n                tax: \"00.00\",\r\n                total: \"00.00\"\r\n            }\r\n            this.props.cookies.set(\"cart\", newCart, { path: \"/\" });\r\n        }\r\n\r\n        //stores items currently in the cart using local storage\r\n        this.state = {\r\n            //stores items currently in the cart\r\n            cartItems: this.props.cookies.get(\"cart\").items,\r\n\r\n            //stores whether cart sumarry is currently visible or not\r\n            cartPopupVisible: (this.props.location && this.props.location.cartVisible) ? this.props.location.cartVisible : false,\r\n\r\n            //stores subtotal of items in the cart\r\n            subTotal: this.props.cookies.get(\"cart\").subtotal,\r\n\r\n            //stores total tax of items in the cart\r\n            tax: this.props.cookies.get(\"cart\").tax,\r\n\r\n            //stores total price of items in cart\r\n            totalPrice: this.props.cookies.get(\"cart\").total,\r\n\r\n            //key values to update child components when a state changes\r\n            cartKey: false,\r\n            previewKey: true,\r\n\r\n            //stores whether cart limit popup is visible\r\n            limitPopupVisible: false\r\n        }\r\n\r\n        this.toggleCart = this.toggleCart.bind(this);\r\n        this.updateItems = this.updateItems.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Returns the size of the input string in bytes\r\n     * \r\n     * @param {String} string - the string to get byte size of\r\n     * @returns \r\n     */\r\n    byteSize = (string) => {\r\n        return new Blob([string]).size;\r\n    }\r\n    \r\n    /**\r\n     * adds selected item to the cart and updates totals and cookies\r\n     * \r\n     * @param {*} item - item object to add to the cart\r\n     */\r\n    handleAdd = (item) => {\r\n        //gets current cart object from cookies\r\n        const { cookies } = this.props;\r\n        let cart = cookies.get(\"cart\");\r\n\r\n        const popupValues = JSON.parse(item.popupValues);\r\n\r\n        //gets the cart cookie and its value\r\n        let cartIndex = 0;\r\n        const oldCookies = document.cookie;\r\n        const oldCookieFields = oldCookies.split(\";\");\r\n        oldCookieFields.forEach(function (value, index) {\r\n            const cookieNameValue = value.split(\"=\");\r\n            if(cookieNameValue[0] == \" cart\") {\r\n                cartIndex = index;\r\n            }\r\n        });\r\n\r\n        //finds size of initial cart cookie\r\n        const oldSize = this.byteSize(oldCookieFields[cartIndex]);\r\n\r\n        //creates array representation of item object\r\n        let newItem = [];\r\n        newItem.push(popupValues.id, popupValues.title, item.price, item.quantity, item.size, item.instructions);\r\n        if (item.accommodations) {\r\n            newItem.push(item.accommodations);\r\n        }\r\n\r\n        //modifies cart price values and adds new item\r\n        cart.items.push(newItem);\r\n        cart.subtotal = (parseFloat(cart.subtotal) + parseFloat(item.price)).toFixed(2);\r\n        cart.tax = (parseFloat(cart.subtotal) * 0.0775).toFixed(2);\r\n        cart.total = (parseFloat(cart.subtotal) + parseFloat(cart.tax)).toFixed(2);\r\n\r\n        //updates cart cookie and state values to rerender page\r\n        cookies.set(\"cart\", cart, { path: \"/\" });\r\n\r\n        //finds size of cart cookie after adding item\r\n        const newCookies = document.cookie;\r\n        const newCookieFields = newCookies.split(\";\");\r\n        const newSize = this.byteSize(newCookieFields[cartIndex]);\r\n\r\n        //displays error popup if cookie limit is reached\r\n        if(oldSize === newSize) {\r\n            this.setState({limitPopupVisible: true});\r\n        } else {\r\n            this.setState({ cartItems: cart.items, subTotal: cart.subtotal, tax: cart.tax, totalPrice: cart.total, cartKey: !this.state.cartKey, previewKey: !this.state.previewKey });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes the item at index ind from the cart\r\n     * \r\n     * @param {number} ind - index of the item to be removed \r\n     */\r\n    handleRemove = (ind) => {\r\n        //gets current cart object from cookies\r\n        const { cookies } = this.props;\r\n        let cart = cookies.get(\"cart\");\r\n\r\n        //modifies cart price values and removes item at index\r\n        cart.subtotal = (parseFloat(cart.subtotal) - parseFloat(cart.items[ind][2])).toFixed(2);\r\n        cart.tax = (parseFloat(cart.subtotal) * 0.0775).toFixed(2);\r\n        cart.total = (parseFloat(cart.subtotal) + parseFloat(cart.tax)).toFixed(2);\r\n        cart.items.splice(ind, 1);\r\n\r\n        //updates cart cookie and state values to rerender page\r\n        cookies.set(\"cart\", cart, { path: \"/\" });\r\n        this.setState({ cartItems: cart.items, subTotal: cart.subtotal, tax: cart.tax, totalPrice: cart.total, cartKey: !this.state.cartKey, previewKey: !this.state.previewKey });\r\n    }\r\n\r\n    /**\r\n     * Chages state to open or close add item error popup\r\n     */\r\n    handleCloseModal = () => {\r\n        this.setState({limitPopupVisible: !this.state.limitPopupVisible});\r\n    }\r\n\r\n    /**\r\n     * Changes cartPopupVisible state to open or close the cart popup\r\n     */\r\n    toggleCart() {\r\n        this.setState({ cartPopupVisible: !this.state.cartPopupVisible });\r\n        console.log(this.state.cartPopupVisible);\r\n    }\r\n\r\n    /**\r\n     * Updates cart states when an item is edited in the cart\r\n     */\r\n    updateItems() {\r\n        this.setState({ cartItems: this.props.cookies.get(\"cart\").items, subTotal: this.props.cookies.get(\"cart\").subtotal, tax: this.props.cookies.get(\"cart\").tax, totalPrice: this.props.cookies.get(\"cart\").total, previewKey: !this.state.previewKey });\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"navbar-wrapper\">\r\n                    <Navbar toggleCart={this.toggleCart} itemCount={this.state.cartItems.length}/>\r\n                </div>\r\n                <Banner />\r\n                {/* Dialog is displayed if cart item limit is reached */}\r\n                <div>\r\n                <Dialog\r\n                    open={this.state.limitPopupVisible}\r\n                    onClose={this.handleCloseModal}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{\"Cart Item Limit Reached\"}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-description\">\r\n                        Item cannot be added. Cart is already full. If you'd like to make a larger order, we suggest that you <Link to=\"/contact\">contact us</Link> directly so we can better accommodate your needs.\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleCloseModal} color=\"primary\" autoFocus>\r\n                            OK\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                </div>\r\n                {/* cart summary is conditionally rendered based on if it is currently open */}\r\n                {this.state.cartPopupVisible ? <CartSummary key={this.state.cartKey} items={this.state.cartItems} total={this.state.totalPrice} tax={this.state.tax} subtotal={this.state.subTotal} toggleCart={this.toggleCart} removeItem={this.handleRemove} updateItems={this.updateItems} /> : null}\r\n                <div className=\"cart-preview\">\r\n                    {/* cart preview is floated on the bottom right of the screen */}\r\n                    <CartPreview key={this.state.previewKey} items={this.state.cartItems} total={this.state.totalPrice} tax={this.state.tax} subtotal={this.state.subTotal} toggleCart={this.toggleCart} />\r\n                </div>\r\n                {/** search section is the top, non-menu half of the page */}\r\n                <SearchSection />\r\n                <MenuSection onItemAdd={this.handleAdd} />\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(withCookies(Menu));\r\n","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\CartSummary.js",["198","199","200"],"/**\r\n * Cart summary component that contains the entire checkout process. It renders the cart as a popup on\r\n * desktop/tablet and as a separate page on mobile, and includes a date and time picker, a list of the\r\n * items in the cart with the option to edit or remove each item, the total price, and the paypal\r\n * component to pay for the order. This file depends on the Navbar, PayPal, CustomTimePicker, and\r\n * MenuItemPopup components.\r\n * \r\n * @summary Displays the cart and checkout process, with functionality to select pickup date/time and \r\n * edit cart.\r\n * @author Dhanush Nanjunda Reddy\r\n */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport moment from \"moment\";\r\nimport '../css/CartSummary.css';\r\nimport { Button } from 'react-bootstrap';\r\nimport CustomTimePicker from '../components/CustomTimePicker';\r\nimport { useCookies } from 'react-cookie';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport PayPal from '../components/PayPal';\r\nimport Navbar from '../components/NavBar';\r\nimport MenuItemPopup from '../components/MenuItemPopup';\r\n\r\nconst config = require('../config');\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\n/**\r\n * displays items currently in the cart and updates subtotal, tax, and total\r\n * \r\n * @param {*} cart - current cart object\r\n * @param {*} popupFunc - function to call to edit an item\r\n * @param {*} removeItem - function to call to remove an item\r\n * @returns {div} - a div that contains all items, one on each row\r\n */\r\nfunction loadItems(cart, popupFunc, removeItem) {\r\n    return (\r\n        <div>\r\n            {/* iterates through cart items and displays each in a row */}\r\n            {cart.items.map((item, ind) => {\r\n\r\n                //checks if any accommodations were selected and adds them to be displayed\r\n                let accom = \"\";\r\n                if (item[6] && Array.isArray(item[6])) {\r\n                    item[6].forEach((accommodation) => {\r\n                        accom = accom + \", \" + accommodation;\r\n                    })\r\n                } else if (item[6]) {\r\n                    accom = \", \" + item[6];\r\n                }\r\n\r\n                //item size and accommodations that need to be displayed\r\n                let size = item[4];\r\n                let extraInfo = size + accom;\r\n\r\n                return (\r\n                    <div key={ind} className=\"summary-item\">\r\n                        <div className=\"item-wrapper\">\r\n                            <span className=\"thumbnail-background thumb-image\">{ind + 1}</span>\r\n                            <span className=\"item-name\">{item[3]} X {item[1]}<br />\r\n                                <span className=\"item-descript\">{extraInfo}<br />\r\n\r\n                                    {/* Conditonally renders a new line with special instructions if any were added */}\r\n                                    {(item[5] !== \"\") ? <div><br /><span>Special Instr.: {item[5]}</span></div> : null}\r\n                                </span></span>\r\n\r\n                            {/* Opens MenuItemPopup to edit item details */}\r\n                            <button className=\"edit-button\" onClick={() => popupFunc(item, ind)}>Edit</button>\r\n\r\n                            {/* Removes item from the cart */}\r\n                            <button className=\"remove-button\" onClick={() => removeItem(ind)}>Remove</button>\r\n                            <span className=\"thumbnail-background summary-price\">${item[2]}</span>\r\n                        </div>\r\n                        <span className=\"item-divide\"></span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\n/**\r\n * Renders the cart summary popup on deskopt/tablet and page on mobile\r\n * \r\n * @param {*} props - values passed down from parent component\r\n */\r\nconst CartSummary = (props) => {\r\n    let history = useHistory();\r\n\r\n    //stores cookie object and function to update cookie\r\n    const [cookies, setCookie] = useCookies([\"cart\"]);\r\n\r\n    //stores date that is selected\r\n    const [selectedDate, setSelectedDate] = useState(null);\r\n\r\n    //stored time that is selected\r\n    const [selectedTime, setSelectedTime] = useState(null);\r\n\r\n    //stores whether the window size is mobile or not\r\n    const [isMobile, setIsMobile] = useState((window.innerWidth < 768) ? true : false);\r\n\r\n    //stores the error message for time picker\r\n    const [error, setError] = useState(\"\");\r\n\r\n    //stores the cart object\r\n    const [cart, setCart] = useState({\r\n        cart_total: props.total || cookies.cart.total,\r\n        item_total: props.subtotal || cookies.cart.subtotal,\r\n        tax_total: props.tax || cookies.cart.tax,\r\n        items: props.items || cookies.cart.items\r\n    });\r\n\r\n    // stores whether or not the item popup is currently visible\r\n    const [popupVisible, setPopupVisible] = useState(false);\r\n\r\n    // map with all of the data that will be displayed in the item popup\r\n    const [popupValues, setPopupValues] = useState(new Map());\r\n\r\n    /**\r\n     * updates item in cart to reflect changes made in item popup\r\n     * \r\n     * @param {*} item - edited item object to add to cart\r\n     */\r\n    const onItemEdit = (item) => {\r\n        //gets current cart object from cookies\r\n        let cart = cookies.cart;\r\n\r\n        const popupValues = JSON.parse(item.popupValues);\r\n\r\n        //create array representation of item object\r\n        let newItem = [];\r\n        newItem.push(popupValues.id, popupValues.title, item.price, item.quantity, item.size, item.instructions);\r\n        if (item.accommodations) {\r\n            newItem.push(item.accommodations);\r\n        }\r\n\r\n        //updates cart price values\r\n        cart.subtotal = (parseFloat(cart.subtotal) - parseFloat(cart.items[popupValues.fillIns.index][2]) + parseFloat(item.price)).toFixed(2);\r\n        cart.tax = (parseFloat(cart.subtotal) * 0.0775).toFixed(2);\r\n        cart.total = (parseFloat(cart.subtotal) + parseFloat(cart.tax)).toFixed(2);\r\n\r\n        //replaces old item with edited item\r\n        cart.items.splice(popupValues.fillIns.index, 1);\r\n        cart.items.splice(popupValues.fillIns.index, 0, newItem);\r\n\r\n        //updates cart cookie and state values to rerender page\r\n        setCookie(\"cart\", cart, { path: \"/\" });\r\n        const newCart = {\r\n            cart_total: cart.total,\r\n            item_total: cart.subtotal,\r\n            tax_total: cart.tax,\r\n            items: cart.items\r\n        }\r\n        setCart(newCart);\r\n\r\n        //calls parent function to update its states\r\n        if (!isMobile) {\r\n            props.updateItems();\r\n        }\r\n    }\r\n\r\n    const editItem = (item, ind) => {\r\n\r\n        //object to pass into item popup\r\n        const fillIns = {\r\n            quantity: item[3],\r\n            size: item[4],\r\n            instructions: item[5],\r\n            index: ind,\r\n            accommodations: item[6] ? item[6] : []\r\n        }\r\n\r\n        //object to pass into fetch request\r\n        const bodyObj = {\r\n            \"_id\": item[0]\r\n        }\r\n\r\n        //makes post request to get popup values of item\r\n        fetch(`${BACKEND_URL}item/itemInfo`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(bodyObj)\r\n        }).then(async result => {\r\n                if (result.ok) {\r\n                    const json = await result.json();\r\n\r\n                    //displays item popup\r\n                    const popupValues = json.item;\r\n                    togglePopup(popupValues.Name, popupValues.Description, popupValues.Prices, popupValues.pictureURL, popupValues.dietaryInfo, popupValues.Accommodations, popupValues._id, fillIns);\r\n                }\r\n                else {\r\n                    console.log(\"error\");\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * processes the form submitted from the item popup\r\n     * \r\n     * @param {*} e - event object from form submission\r\n     */\r\n    const processForm = e => {\r\n        // prevents page reload\r\n        e.preventDefault();\r\n\r\n        // gets the form data\r\n        var data = new FormData(e.target);\r\n        var object = {};\r\n\r\n        // goes through and makes an object from the FormData\r\n        data.forEach((value, key) => {\r\n            if (!Reflect.has(object, key)) {\r\n                object[key] = value;\r\n                return;\r\n            }\r\n\r\n            if (!Array.isArray(object[key])) {\r\n                object[key] = [object[key]];\r\n            }\r\n            object[key].push(value);\r\n        });\r\n\r\n        // calls function to add item from item popup to cart\r\n        onItemEdit(object);\r\n\r\n        // when submit button is clicked, the popup is closed\r\n        togglePopup();\r\n    }\r\n\r\n    /**\r\n     * closes item popup when open and opens popup when closed\r\n     * \r\n     * @param {*} title - name of the item\r\n     * @param {*} description - item description\r\n     * @param {*} price - item price\r\n     * @param {*} image - item image\r\n     * @param {*} dietaryInfo - dietary info for the item\r\n     * @param {*} accommodations - accommodation options for the item\r\n     * @param {*} fillIns - already selected values for this item\r\n     */\r\n    const togglePopup = (title, description, price, image, dietaryInfo, accommodations, id, fillIns) => {\r\n\r\n        // sets the values of the map based on passed-in information\r\n        popupValues.set(\"title\", title);\r\n        popupValues.set(\"description\", description);\r\n        popupValues.set(\"price\", price);\r\n        popupValues.set(\"image\", image);\r\n        popupValues.set(\"dietary-info\", dietaryInfo);\r\n        popupValues.set(\"accommodations\", accommodations);\r\n        popupValues.set(\"id\", id);\r\n        popupValues.set(\"fillIns\", fillIns);\r\n\r\n        setPopupValues(popupValues);\r\n\r\n        setPopupVisible(!popupVisible);\r\n    }\r\n\r\n    /**\r\n     * updates selectedDate state to chosen date\r\n     * \r\n     * @param {*} date - Date object of chosen date\r\n     */\r\n    const handleDateChange = (date) => {\r\n        setSelectedDate(date);\r\n    }\r\n\r\n    /**\r\n     * disables any invalid dates (less than 3 days from current date)\r\n     * \r\n     * @param {*} date - Date object of some arbitrary date\r\n     */\r\n    const disableDates = (date) => {\r\n        let currDate = new Date();\r\n        const numDays = new Date(currDate.getFullYear(), currDate.getMonth() + 1, 0).getDate();\r\n        return (currDate.getMonth() === date.getMonth() && date.getDate() - 3 < currDate.getDate()) || (currDate.getMonth() + 1 === date.getMonth() && date.getDate() < currDate.getDate() + 3 - numDays);\r\n    }\r\n\r\n    /**\r\n     * Removes the item at index ind from the cart\r\n     * \r\n     * @param {*} ind - index of the item to be removed \r\n     */\r\n    const handleRemove = (ind) => {\r\n        //gets current cart object from cookies\r\n        let cart = cookies.cart;\r\n\r\n        //modifies cart price values and removes item at index\r\n        cart.subtotal = (parseFloat(cart.subtotal) - parseFloat(cart.items[ind][2])).toFixed(2);\r\n        cart.tax = (parseFloat(cart.subtotal) * 0.0775).toFixed(2);\r\n        cart.total = (parseFloat(cart.subtotal) + parseFloat(cart.tax)).toFixed(2);\r\n        cart.items.splice(ind, 1);\r\n\r\n        //updates cart cookie and state values to rerender page\r\n        setCookie(\"cart\", cart, { path: \"/\" });\r\n        const newCart = {\r\n            cart_total: cart.total,\r\n            item_total: cart.subtotal,\r\n            tax_total: cart.tax,\r\n            items: cart.items\r\n        }\r\n        setCart(newCart);\r\n    }\r\n\r\n    /**\r\n     * Loads cart popup or page when window is resized\r\n     */\r\n    const handleResize = () => {\r\n        console.log(\"resize called\");\r\n        if (window.innerWidth >= 768) {\r\n            history.push({\r\n                pathname: \"/\",\r\n                cartVisible: true,\r\n            });\r\n        }\r\n        if (window.innerWidth < 768) {\r\n            history.push(\"/cart\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds event listener to load cart popup or page when window is resized\r\n     */\r\n    useEffect(() => {\r\n        window.addEventListener('resize', handleResize);\r\n\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            {/* Renders item popup if an item is being edited */}\r\n            {popupVisible ? <MenuItemPopup values={popupValues} togglePopup={togglePopup} processForm={processForm} /> : null}\r\n            <div className=\"cart-wrapper\">\r\n                {/* Renders navbar if device is mobile */}\r\n                {(window.innerWidth < 768) ? <div className=\"navbar-wrapper\">\r\n                    <Navbar itemCount={cart.items.length}/>\r\n                </div> : <div className=\"background\" onClick={props.toggleCart}></div>}\r\n                <div className=\"cart-popup\">\r\n                    <span className=\"pickup-title\">Choose Pickup Time</span>\r\n                    <div className=\"date-time\">\r\n                        <div className=\"date-picker\">\r\n                            {/* Date picker to select a pickup date */}\r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                <KeyboardDatePicker\r\n                                    disableToolbar\r\n                                    variant=\"inline\"\r\n                                    format=\"MM/dd/yyyy\"\r\n                                    margin=\"normal\"\r\n                                    id=\"date-picker-inline\"\r\n                                    label=\"Date\"\r\n                                    value={selectedDate}\r\n                                    onChange={handleDateChange}\r\n                                    disablePast={true}\r\n                                    shouldDisableDate={disableDates}\r\n                                    KeyboardButtonProps={{\r\n                                        'aria-label': 'change date',\r\n                                    }}\r\n                                    inputProps={\r\n                                        isMobile ?\r\n                                            {\r\n                                                style: {\r\n                                                    fontSize: \"3vw\"\r\n                                                }\r\n                                            } : {}}\r\n                                    InputLabelProps={\r\n                                        isMobile ?\r\n                                            {\r\n                                                style: {\r\n                                                    fontSize: \"3vw\"\r\n                                                }\r\n                                            } : {}}\r\n                                />\r\n                                {(!selectedDate || !selectedTime) ? <p className=\"select-error\">Please select a date and a time</p> : null}\r\n                            </MuiPickersUtilsProvider>\r\n                        </div>\r\n                        {/* Time picker to select a pickup time */}\r\n                        <CustomTimePicker\r\n                            label=\"Time\"\r\n                            value={selectedTime}\r\n                            setSelectedTime={(time) => {\r\n                                const minTime = moment(\"9:59 AM\", \"HH:mm A\");\r\n                                const maxTime = moment(\"6:01 PM\", \"HH:mm A\");\r\n                                let errorMsg = \"\";\r\n                                if (minTime.isBefore(time) && maxTime.isAfter(time)) {\r\n                                    setSelectedTime(time.format(\"HH:mm A\"));\r\n                                    errorMsg = false;\r\n                                } else {\r\n                                    errorMsg = \"Select between 10:00 AM and 6:00 PM\";\r\n                                    setSelectedTime(null);\r\n                                }\r\n                                setError(errorMsg);\r\n                            }}\r\n                            setSize={isMobile}\r\n                            errorMessage={error}\r\n                        />\r\n                    </div>\r\n                    <p className=\"pickup-date-info\">NOTE: Earliest pickup is 3 days after order has been placed</p>\r\n                    <h1 className=\"summary-title\">Order Summary</h1>\r\n                    <div className=\"cart-items\">\r\n                        {/* loads and displays all items currently in the cart */}\r\n                        {(props.removeItem) ? loadItems(cart, editItem, props.removeItem) : loadItems(cart, editItem, handleRemove)}\r\n                    </div>\r\n                    <div className=\"order-totalprices\">\r\n                        <br />\r\n                        Subtotal: ${cart.item_total}<br />\r\n                        Tax: ${cart.tax_total}<br />\r\n                        Total Price: ${cart.cart_total}\r\n                    </div>\r\n                    {/* Renders an error message if cart total is less than the $20 minimum */}\r\n                    <div className=\"order-minimum\">\r\n                        {(parseFloat(cart.cart_total) < 20) ? <span>Order minimum is $20. Please add ${(20 - parseFloat(cart.cart_total)).toFixed(2)} to your cart to proceed to checkout.</span> : null}\r\n                    </div>\r\n                    {/* Renders PayPal component if all required fields are completed and return to menu button otherwise */}\r\n                    <div className=\"return-button\">\r\n                        {(selectedTime && selectedDate && parseFloat(cart.cart_total) >= 20) ? <PayPal selectedDate={selectedDate} selectedTime={selectedTime} /> : <Button style={{ backgroundColor: \"#f9ce1d\", borderColor: \"#f9ce1d\", color: \"#000000\" }} className=\"return\" onClick={(isMobile) ? () => history.push(\"/\") : () => props.toggleCart()}>Return to Menu</Button>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CartSummary;","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\config.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\ContactMap.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\ContactForm.js",["201","202"],"/**\r\n * Component creating the form on the contact page. Form takes user's \r\n * information and sends an email to UWEAST on their behalf. Error handling \r\n * makes sure that backend response is 200, otherwise notify user.\r\n * \r\n * @summary   Form to contact UWEAST found on contact page.\r\n * @author    Navid Boloorian, Amrit Kaur Singh\r\n */\r\nimport React from 'react';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { Snackbar } from '@material-ui/core';\r\nimport DOMPurify from 'dompurify';\r\n\r\nconst config = require('../config');\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\nconst ContactForm = () => {\r\n\r\n  const [state, setState] = React.useState({\r\n    snack: {\r\n      message: '',\r\n      open: false\r\n    },\r\n  });\r\n\r\n  const sendMessage = async (e) => {\r\n    e.preventDefault();\r\n  \r\n    const formData = new FormData(e.target);\r\n    let data = {};\r\n    \r\n    // make FormData into a js object to pass to route\r\n    for(var [key, value] of formData.entries()) {\r\n      data[key] = DOMPurify.sanitize(value);;\r\n    }\r\n  \r\n    try{\r\n  \r\n      const response = await fetch(`${BACKEND_URL}autoEmails/contact`, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify(data)\r\n      });\r\n      \r\n      // successful response\r\n      if (response.status == 200){\r\n        alert(\"Message sent!\");\r\n        // reload window to clear input boxes \r\n        window.location.reload();\r\n        \r\n        // malformed email\r\n      } else if(response.status == 400) {\r\n        setState({...state, snack: {message: 'Invalid Email Address!', open: true}});\r\n\r\n        // system error\r\n      } else {\r\n        setState({...state, snack: {message: 'System Error: Cannot send email!', open: true}});\r\n      }\r\n      \r\n      // general error\r\n    } catch(error){\r\n      setState({...state, snack: {message: 'System Error: Cannot send email!', open: true}});\r\n    }\r\n  };\r\n  \r\n  // error message display: auto close itself by updating its states\r\n  const handleSnackClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setState({...state, snack: {open: false}});\r\n  };\r\n\r\n  return (\r\n    <div className=\"contact-form\">\r\n      <div className=\"contact-form-text\">\r\n      <h1>CONTACT US</h1>\r\n      <p>Please email us using the form below</p>\r\n      <form onSubmit={sendMessage}>\r\n        <input type=\"text\" name=\"name\" className=\"first-input contact-form-input\" placeholder=\"Your Name\" required/>\r\n        <br />\r\n        <input type=\"text\" name=\"email\" className=\"contact-form-input\" placeholder=\"Your Email\" required />\r\n        <br />\r\n        {/** automatically-resizing textarea component */}\r\n        <TextareaAutosize className=\"contact-form-input\" name=\"message\" placeholder=\"Your message\" maxRows={3} required />\r\n        <br />\r\n        <input type=\"submit\" className=\"contact-form-submit\" value=\"Submit\"  />\r\n      </form>\r\n      </div>\r\n      <Snackbar open={state.snack.open} autoHideDuration={6000} onClose={handleSnackClose} message={state.snack.message}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ContactForm;","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\ForgotPasswordDialogue.js",["203"],"/**\r\n * The file is responsible for the display and functionality of forgot password, allowing users \r\n * who already have admin accounts but have forgotten their account passwords to reset their passwords\r\n * temporarily. \r\n * \r\n * If an email of a registered account is given, that associated account's password is reset to a randomly \r\n * generated password, and an email is sent to that user containing that randomly generated password as well \r\n * as next steps. An alert is also given to the user. If unsuccessful, an error message is displayed. \r\n * \r\n * Note: Unlike login and registeration, this page is accessible to all users regardless of whether they are \r\n * logged in or not. If password is reset while the user is logged in, the change will be effective on the\r\n * next login. \r\n * \r\n * @summary     Displays forgot password dialogue and allows registed user to temporarily reset their password. \r\n * @author      Amrit Kaur Singh\r\n */\r\n\r\nimport React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { Link } from 'react-router-dom';\r\nimport { Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {createMuiTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport DOMPurify from 'dompurify';\r\n\r\nconst config = require('../config');\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\nexport default function FormDialog() {\r\n\r\n  const theme = createMuiTheme({\r\n    overrides: {\r\n      // input field label\r\n      MuiInputLabel: { \r\n        root: {\r\n          \"&$focused\": { \r\n            color: \"black\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  const useStyles = makeStyles({\r\n    // input field underline\r\n    underline: {\r\n      // non-focus & hover\r\n      \"&&&:before\": {\r\n        borderColor: \"#f9ce1d\"\r\n      },\r\n      // focus\r\n      \"&&:after\": {\r\n        borderColor: \"#f9ce1d\"\r\n      }\r\n    }\r\n  });\r\n\r\n  const classes = useStyles();\r\n  \r\n  \r\n  const [state, setState] = React.useState({\r\n    open: false,\r\n    email: '',\r\n    error:{\r\n      display: false,\r\n      message: ''\r\n    }\r\n  });\r\n\r\n\r\n  /**\r\n   * Handles submission of the form (button click). Validates form data for valid email address (must be a user's email address). If valid, \r\n   * it autogenerates a random password and sends it as an email to the user. If invalid, an error is displayed.\r\n   * \r\n   * @param {*} event - Reason for function call \r\n   * @returns {void} \r\n   */\r\n  const handleSend = async() => {\r\n\r\n      // display loading cursor \r\n      document.body.style.cursor= 'wait';\r\n\r\n      // sanitize input - XSS attack protection \r\n      state.email =  DOMPurify.sanitize(state.email);\r\n\r\n      const submission = {\r\n          email: state.email\r\n      };\r\n\r\n    // check if email field is empty\r\n    if (state.email === ''){\r\n        document.body.style.cursor= null;\r\n        setState({...state, error:{display: true, message: \"Field cannot be empty\"}})\r\n        return;\r\n    }\r\n    // backend call\r\n    try{\r\n      const response = await fetch(`${BACKEND_URL}user/forgotPassword`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(submission)\r\n      });\r\n\r\n      // password successfully reset \r\n      if (response.ok) {\r\n        document.body.style.cursor= null;\r\n        alert(\"Email Successfully Sent!\");\r\n        handleClose();\r\n      } \r\n      // invalid email\r\n      else if(response.status == 400){\r\n        document.body.style.cursor= null;\r\n        setState({...state, error:{display: true, message: \"Invalid Email\"}});\r\n      }\r\n      // any other server response\r\n      else {\r\n            document.body.style.cursor= null;\r\n            setState({...state, error:{display: true, message: \"System Error: Try Again Later\"}});\r\n      }\r\n    }\r\n    // general error\r\n    catch(error){\r\n        document.body.style.cursor= null;\r\n        setState({...state, error:{display: true, message: `An error occurred: ${error.message}`}});\r\n    }\r\n\r\n  }\r\n\r\n  // display pop-up\r\n  const handleClickOpen = () => {\r\n    setState({...state, email:'', open: true, error:{display: false}});\r\n  };\r\n\r\n  // close pop-up\r\n  const handleClose = () => {\r\n    setState({...state, open: false, error:{display: false}});\r\n  };\r\n\r\n  // track the email address put in the text field\r\n  const handleEmailChange = (event) => {\r\n    setState({...state, email: event.target.value, open: true});\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* link preview */}\r\n      <Link onClick={handleClickOpen}><Typography>Forgot Password?</Typography></Link>\r\n      {/* dialogue  */}\r\n      <Dialog open={state.open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n        {/* title + description */}\r\n        <DialogTitle id=\"form-dialog-title\"> <b>Forgot Password?</b></DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Please enter the email address of the associated account here. An email will be sent to\r\n            you there containing next steps. \r\n          </DialogContentText>\r\n          {/* email field */}\r\n          <ThemeProvider theme={theme}>\r\n            <TextField\r\n              onChange={handleEmailChange}\r\n              error={state.error.display}\r\n              helperText={state.error.display ? state.error.message: null}\r\n              autoFocus\r\n              margin=\"dense\"\r\n              id=\"name\"\r\n              label=\"Email Address\"\r\n              type=\"email\"\r\n              InputProps={{ classes }}\r\n              // variant=\"Standard\"\r\n              fullWidth\r\n            />\r\n          </ThemeProvider>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          {/* cancel dialogue button */}\r\n          <Button onClick={handleClose} style={{color: \"black\"}} >\r\n            Cancel\r\n          </Button>\r\n          {/* send email button */}\r\n          <Button onClick={handleSend} style={{color: \"black\"}}>\r\n            Send Email\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\AdminMenuItems.js",["204","205"],"/**\r\n * This file renders a table filled with each item in the menu. It includes information\r\n * such as name, icon, price, addons, sizing, etc. This table is searchable based on name,\r\n * and sortable based on item caregory (main dish, appetizer, side, etc.). This table gives\r\n * the user the option to edit and remove existing items, and add new items.\r\n *\r\n * @summary     Renders admin menu items table for the Admin page\r\n * @author      PatrickBrown1\r\n */\r\n\r\nimport React, {useState, useEffect, useReducer} from 'react';\r\nimport {Modal, Button} from 'react-bootstrap';\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport SearchBar from \"material-ui-search-bar\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport '../css/AdminMenuItems.css';\r\nimport AddMenuItemModal from './AddMenuItemModal.js';\r\nimport EditMenuItemModal from './EditMenuItemModal.js';\r\nimport ChangeHeaderModal from './ChangeHeaderModal.js';\r\nconst config = require('../config');\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\n/**\r\n * This function takes in data points from the get item route and formats them into\r\n * an object readable by the table.\r\n *\r\n * @param {string} itemName - name of the item\r\n * @param {string} imgSource - url of image source\r\n * @param {string} categoryName - item's category\r\n * @param {Object[]} options -  array of accommodation objects\r\n * @param {Object} baseprice - object with Individual and Family price properties\r\n * @param {string} description - description of the item\r\n * @param {string} id - item's id in database\r\n * @param {boolean} featured - indicates whether or not the item is featured on the menu\r\n * @param {Object} dietaryInfo - object containing dairyFree, vegan, vegetarian, and gluten-free boolean properties\r\n *\r\n * @return {Object} - Object with above parameters formatted in proper order.\r\n */\r\nfunction createData(itemName, imgSource, categoryName, options, baseprice, description, id, featured, dietaryInfo) {\r\n  return {\r\n        \"itemName\": itemName, \r\n        \"imgSource\": imgSource,\r\n        \"categoryName\": categoryName, \r\n        \"options\": options, \r\n        \"basePrice\": baseprice, \r\n        \"description\": description,\r\n        \"id\": id,\r\n        \"isFeatured\": featured,\r\n        \"dietaryInfo\": dietaryInfo\r\n    };\r\n}\r\n/**\r\n * Renders modal that asks the user if they want to remove the item from the menu.\r\n *\r\n * @param {boolean} deleteConfirmation - indicates whether or not to show the delete confirmation modal\r\n * @param {function} setDeleteConfirmation - sets value of deleteConfirmation\r\n * @param {Object[]} itemList - list of all menu item objects\r\n * @param {function} setItemList -  sets itemList\r\n * @param {Object} displayContent - list of menu item objects currently being displayed\r\n * @param {string} setDisplayContent - sets displayContent\r\n\r\n * @return - modal displaying delete confirmation message\r\n */\r\nconst deleteConfirmationModal = (deleteConfirmation, setDeleteConfirmation, itemList, setItemList, displayContent, setDisplayContent) => {\r\n    return (\r\n        <Modal \r\n            show={deleteConfirmation !== []} \r\n            onHide={() => setDeleteConfirmation([\"\", \"\"])} \r\n            backdrop='static'\r\n            style={{\"marginTop\": \"30vh\"}}\r\n        >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Delete Menu Item</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div>\r\n                        <p>Are you sure you want to remove {deleteConfirmation[0]} from the menu?</p>\r\n                    </div>\r\n                </Modal.Body>\r\n                \r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" className=\"menuAddButton\" onClick={() => {                        \r\n                        // Call database, remove item from menu\r\n                        handleRemoveByID(deleteConfirmation[1], itemList, setItemList, displayContent, setDisplayContent);\r\n                        setDeleteConfirmation([\"\", \"\"]);\r\n                    }}>\r\n                        Remove Item\r\n                    </Button>\r\n                    <Button variant=\"secondary\" onClick={() => {\r\n                        setDeleteConfirmation([\"\", \"\"]);\r\n                    }}>\r\n                        Cancel\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n}\r\n/**\r\n * Renders table of items based on what is passed in through displayContent\r\n *\r\n * @param {Object} display - list of menu item objects currently being displayed\r\n * @param {string} setDisplay - sets display\r\n * @param {function} setDeleteConfirmation - sets value of deleteConfirmation\r\n * @param {function} handleFeatureChange -  function that handles when featured checkbox is toggled\r\n * @param {function} setCurrentEditItem - sets the item being edited if edit button is pressed\r\n\r\n * @return - renders table of menu items\r\n */\r\nfunction menuTable(display, setDisplay, setDeleteConfirmation, handleFeatureChange, setCurrentEditItem) {\r\n    return (\r\n        <TableContainer component={Paper} className=\"menuTableContainer\">\r\n            <Table aria-label=\"simple table\" className=\"menuTable\">\r\n                <TableHead>\r\n                    <TableRow style={{\"overflow\": \"hidden\"}}>\r\n                        <TableCell className=\"menuTableHeaders\" width=\"5%\">Feature</TableCell>\r\n                        <TableCell className=\"menuTableHeaders\" width=\"15%\" align=\"center\">Item Image</TableCell>\r\n                        <TableCell className=\"menuTableHeaders\" width=\"10%\" align=\"left\">Item Name</TableCell>\r\n                        <TableCell className=\"menuTableHeaders\" width=\"10%\" align=\"left\">Category Name</TableCell>\r\n                        <TableCell className=\"menuTableHeaders\" width=\"10%\" align=\"left\">Size</TableCell>\r\n                        <TableCell className=\"menuTableHeaders\" width=\"10%\" align=\"left\">Base Price</TableCell>\r\n                        <TableCell className=\"menuTableHeaders\" width=\"30%\" align=\"left\">Add-ons</TableCell>\r\n                        <TableCell className=\"menuTableHeaders\" width=\"10%\" align=\"left\">Edit</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {display.displayContent.map((row, index) => {\r\n                        const bgColor = index % 2 === 0 ? \"evenrowbg\" : \"oddrowbg\";\r\n                        return (\r\n                            <TableRow key={row._id} className={bgColor}>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"menuRowText\" width=\"5%\">\r\n                                    <Checkbox\r\n                                        id={row._id + \"checkbox\"}\r\n                                        checked={row.isFeatured}\r\n                                        onChange={(e) => {\r\n                                            handleFeatureChange(row);\r\n                                        }}\r\n                                        name={row.itemName}\r\n                                        style ={{\r\n                                            color: \"#747474\",\r\n                                        }}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" className=\"menuRowText\" width=\"15%\">\r\n                                    <img src={row.imgSource} alt={row.itemName} className=\"menuItemImage\"/>\r\n                                </TableCell>\r\n                                <TableCell className=\"menuRowText\" width=\"10%\">{row.itemName}</TableCell>\r\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"10%\">{row.categoryName}</TableCell>\r\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"10%\">\r\n                                {\r\n                                    row.basePrice.map((v) => {return (<>{v[0]}<br /></>)})\r\n                                }\r\n                                </TableCell>\r\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"10%\">\r\n                                {\r\n                                    row.basePrice.map((v) => <>${v[1]}<br /></>)\r\n                                }\r\n                                </TableCell>\r\n                                <TableCell align=\"left\" className=\"menuRowText accommodationCell\" width=\"30%\">\r\n                                {\r\n                                    row.options.map((v) => <p>{v[1].Description}</p>)\r\n                                }\r\n                                </TableCell>\r\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"10%\">\r\n                                    <IconButton onClick={() => setCurrentEditItem(row.id)}>\r\n                                        <EditIcon style={{\"marginRight\": \"5px\"}}/>\r\n                                    </IconButton>\r\n                                    <IconButton aria-label=\"delete item\" onClick={() => setDeleteConfirmation([row.itemName, row.id])}>\r\n                                        <DeleteIcon style={{\"marginLeft\": \"5px\"}}/>\r\n                                    </IconButton>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                    )})}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n/**\r\n * Removed an item from the database and from page state\r\n *\r\n * @param {string} id - id of item being removed\r\n * @param {Object[]} itemList - list of all menu items\r\n * @param {function} setItemList - sets value of itemList\r\n * @param {Object[]} displayContent -  list of all menu items being displayed\r\n * @param {function} setDisplayContent - sets value of displayContent\r\n */\r\nasync function handleRemoveByID(id, itemList, setItemList, displayContent, setDisplayContent){\r\n    // remove from database\r\n    await fetch(`${BACKEND_URL}item/remove`, {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                \"_id\": id\r\n            })\r\n        }).then(res => {\r\n            if(res.ok){\r\n                // remove from rows\r\n                setItemList(itemList.filter(x => x.id !== id));\r\n                // remove from filtered rows\r\n                setDisplayContent({displayContent: displayContent.displayContent.filter(x => x.id !== id)});\r\n            }\r\n        })\r\n    \r\n}\r\nexport default function AdminMenuItems (props) {\r\n    const [deleteConfirmation, setDeleteConfirmation] = useState([\"\", \"\"]);\r\n    \r\n    const [itemList, setItemList] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [checkboxUpdate, setCheckboxUpdate] = useState(\"\");\r\n    const [changeHeaderModal, setChangeHeaderModal] = useState(false);\r\n    const [addItemModal, setAddItemModal] = useState(false);\r\n    const [currentEditItem, setCurrentEditItem] = useState(\"\");\r\n    const [itemAddedSuccess, setItemAddedSuccess] = useState(false)\r\n    const [itemEditedSuccess, setItemEditedSuccess] = useState(false);\r\n\r\n    // const [searchTerm, setSearchTerm] = useState(\"\");\r\n    // const [filter, setFilter] = useState(\"All\");\r\n    // const [displayContent, setDisplayContent] = useState([]);\r\n    const [display, setDisplay] = useReducer(\r\n        (state, newState) => ({...state, ...newState}),\r\n        {searchTerm: \"\", filter: \"All\", displayContent: itemList}\r\n    )\r\n    const [headerImageURL, setHeaderImageURL] = useState(\"\");\r\n\r\n    // fetch all menu items to display in table\r\n    useEffect(() => {\r\n        \r\n        var data = null;\r\n        var imgUrl = null;\r\n        const fetchData = async () => {\r\n            const res = await fetch(`${BACKEND_URL}item/`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    \"content-type\": \"application/json\",\r\n                },\r\n            })\r\n            data = await res.json();\r\n            const rows = [];\r\n            data.items.forEach(element => {\r\n                // log(element);\r\n                rows.push(\r\n                    createData(\r\n                        element.Name,\r\n                        element.pictureURL, \r\n                        element.Category, \r\n                        Object.entries(element.Accommodations),\r\n                        Object.entries(element.Prices), \r\n                        element.Description,\r\n                        element._id,\r\n                        element.isFeatured,\r\n                        element.dietaryInfo\r\n                ));\r\n            });\r\n            const urlFetch = await fetch(`${BACKEND_URL}menuImages/`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    \"content-type\": \"application/json\",\r\n                },\r\n            })\r\n            data = await urlFetch.json();\r\n            setHeaderImageURL(data.imageUrl.imageUrl || '');\r\n            setItemList(rows);\r\n            setDisplay({displayContent: rows});\r\n            setLoaded(true);\r\n        }\r\n        \r\n        fetchData();\r\n    }, [loaded])\r\n\r\n    /**\r\n     * This functions takes in the filter string and the search term, and updates\r\n     * the display state to these new two values, and the items that correspond to\r\n     * these two values\r\n     *\r\n     * @param {String} filter - current filter\r\n     * @param {String} searchTerm - current search term\r\n     */\r\n    const handleDisplayChange = (filter, searchTerm) => {\r\n        // takes item list, filters by category then search term\r\n        let workingItems = [];\r\n        // filter by category\r\n        if(filter === \"All\"){ \r\n            workingItems = itemList;\r\n        }\r\n        else if(filter === \"Featured\"){\r\n            for(var index in itemList) { \r\n                if (itemList[index].isFeatured){\r\n                    workingItems.push(itemList[index]); \r\n                }\r\n            }\r\n        }\r\n        else{\r\n            for(var i in itemList) { \r\n                if (itemList[i][\"categoryName\"] === filter){\r\n                    workingItems.push(itemList[i]); \r\n                }\r\n            }\r\n        }\r\n        // filter by search term\r\n        if(searchTerm !== \"\"){\r\n            workingItems = workingItems.filter(x => x.itemName.toLowerCase().includes(searchTerm.toLowerCase()));\r\n\r\n        }\r\n        setDisplay({filter: filter, searchTerm: searchTerm, displayContent: workingItems});\r\n    }\r\n    /**\r\n    * Updates items and database when a feature checkbox is pressed\r\n    *\r\n    * @param {Object} row - row being updated\r\n    */\r\n    const handleFeatureChange = async (row) => {\r\n        const itemID = row.id;\r\n        const newValue = !row.isFeatured;\r\n        row.isFeatured = newValue;\r\n        // update item's feature property in local (displayContent and itemList)\r\n        var itemListIndex = -1;\r\n        itemList.forEach((x, index) => {\r\n            itemListIndex = x.id === itemID ? index : itemListIndex;\r\n        })\r\n        if(itemListIndex !== -1){\r\n            setItemList(prev => {\r\n                prev[itemListIndex].isFeatured = newValue;\r\n                return prev;\r\n            })\r\n        }\r\n        var displayContentIndex = display.displayContent.findIndex(x => x.id === itemID);\r\n        if(displayContentIndex !== -1){\r\n            display.displayContent[displayContentIndex].isFeatured = newValue;\r\n            setDisplay({displayContent: display.displayContent});\r\n        }\r\n        setCheckboxUpdate(row.itemName + \"\" + newValue);\r\n\r\n        // update item's feature property in database\r\n        await fetch(`${BACKEND_URL}item/feature`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                \"_id\": itemID,\r\n                \"isFeatured\": newValue\r\n            })\r\n        })\r\n    }\r\n    if(loaded){\r\n        return (  \r\n            <div className=\"adminMenuPageContainer\">\r\n                {currentEditItem !== \"\" && <EditMenuItemModal showModal={currentEditItem !== \"\"} setCurrentEditItem={setCurrentEditItem} item={itemList.filter(item => item.id === currentEditItem)[0]} setLoaded={setLoaded} setItemEditedSuccess={setItemEditedSuccess}/>}\r\n                {deleteConfirmation[0] !== \"\" && deleteConfirmationModal(deleteConfirmation, setDeleteConfirmation, itemList, setItemList, display, setDisplay)}\r\n                {addItemModal && <AddMenuItemModal addItemModal={addItemModal} setAddItemModal={setAddItemModal} setLoaded={setLoaded} setItemAddedSuccess={setItemAddedSuccess}/>}\r\n                {changeHeaderModal && <ChangeHeaderModal changeHeaderModal={changeHeaderModal} setChangeHeaderModal={setChangeHeaderModal} setLoaded={setLoaded} headerImageURL={headerImageURL}/>}\r\n                {/* Add/Edit item success snackbars*/}\r\n                <Snackbar\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'center',\r\n                    }}\r\n                    open={itemAddedSuccess}\r\n                    autoHideDuration={5000}\r\n                    onClose={() => setItemAddedSuccess(false)}\r\n                    message={<span id=\"message-id\">Item successfully added!</span>}\r\n                />\r\n                <Snackbar\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'center',\r\n                    }}\r\n                    open={itemEditedSuccess}\r\n                    autoHideDuration={5000}\r\n                    onClose={() => setItemEditedSuccess(false)}\r\n                    message={<span id=\"message-id\">Item successfully edited!</span>}\r\n                />\r\n\r\n                <div className=\"aboveTableContainer\">\r\n                    <div className=\"addUpdateButtonContainer\">\r\n                        <Button className=\"menuAddButton\" onClick={() => {setAddItemModal(true)}}>\r\n                            <AddCircleIcon className=\"menuAddButtonIcon\" />\r\n                            Add Item\r\n                        </Button>\r\n                        <Button className=\"menuChangeHeaderButton\" onClick={() => {setChangeHeaderModal(true)}}>\r\n                            Change Header\r\n                        </Button>\r\n                    </div>\r\n                    <div className=\"searchFilterContainer\">\r\n                        <Select\r\n                            className=\"menuFilterSelect\"\r\n                            id=\"item-filter-select\"\r\n                            defaultValue=\"All\"\r\n                            displayEmpty=\"false\"\r\n                            variant=\"outlined\"\r\n                            value={display.filter}\r\n                            onChange={(v) => {\r\n                                handleDisplayChange(v.target.value, display.searchTerm);\r\n                            }}\r\n                        >\r\n                            <MenuItem value=\"All\">All</MenuItem>\r\n                            <MenuItem value=\"Featured\">Featured</MenuItem>\r\n                            <MenuItem value=\"Appetizers\">Appetizers</MenuItem>\r\n                            <MenuItem value=\"Main Dishes\">Main Dishes</MenuItem>\r\n                            <MenuItem value=\"Sides\">Sides</MenuItem>\r\n                            <MenuItem value=\"Drinks\">Drinks</MenuItem>\r\n                        </Select>\r\n                        <SearchBar\r\n                            className=\"menuSearchBar\"\r\n                            value={display.searchTerm}\r\n                            onChange={(newValue) => {\r\n                                handleDisplayChange(display.filter, newValue);\r\n                            }}\r\n                            onRequestSearch={(newValue) => {\r\n                                handleDisplayChange(display.filter, newValue);\r\n                            }}\r\n                            onCancelSearch={() => {                                \r\n                                handleDisplayChange(display.filter, \"\");\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                {menuTable(display, setDisplay, setDeleteConfirmation, handleFeatureChange, setCurrentEditItem)}\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return (\r\n            <div style={{color: \"#f9ce1d\", display: \"flex\", justifyContent: \"center\"}}>\r\n                <CircularProgress color='inherit' size={40}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Emails.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\PayPal.js",["206","207"],"/**\r\n * This file contains the code for the PayPal Smart Buttons integration.\r\n * It calls the backend once an order is completed to create a new order object.\r\n * The expected form of the props is shown below.\r\n *\r\n * @summary Renders paypal buttons for payment based on cart passed in through props\r\n * @author PatrickBrown1\r\n */\r\nimport React from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useCookies } from 'react-cookie';\r\n\r\nconst config = require('../config');\r\n\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\n// PayPal script is located in public/index.html (contains Client ID)\r\nexport default function PayPal(props) {\r\n    const [cookies, setCookie] = useCookies([\"cart\"]);\r\n    let history = useHistory();\r\n\r\n    const { cart } = cookies.cart;\r\n\r\n    \r\n    //stores cookie object and function to remove cookie\r\n    // I assume the cart object looks like this:\r\n    // {\r\n    //     cart_total: \"\",\r\n    //     item_total: \"\",\r\n    //     tax_total: \"\",\r\n    //     items: [\r\n    //         {\r\n    //             price: \"12.23\"\r\n    //             quantity: \"\",\r\n    //             size: \"\",\r\n    //             accommodations: [\"\", \"\"] (string if only one, prop doesn't exist if none),\r\n    //             instructions: \"\",\r\n    //             \r\n    //             \"popupValues\": \r\n    //                  {\r\n    //                      \"title\":\"Caesar Salad\",\r\n    //                      \"description\":\"Romaine lettuce with argula and spinach, served with a drizzle of olive oil!\",\r\n    //                      \"price\": {\"Individual\":\"8.23\"},\r\n    //                      \"image\":\"https://natashaskitchen.com/wp-content/uploads/2019/01/Caesar-Salad-Recipe-3.jpg\",\r\n    //                      \"dietary-info\":\r\n    //                          {\r\n    //                              \"vegan\":true,\r\n    //                              \"vegetarian\":true,\r\n    //                              \"glutenFree\":true,\r\n    //                              \"containsDairy\":false\r\n    //                          },\r\n    //              \"accommodations\":[\r\n    //                  {\"_id\":\"602cd4994cca295f7648f2e0\",\"Description\":\"Add Chicken Breasts\",\"Price\":\"4.00\"},\r\n    //                  {\"_id\":\"602cd4994cca295f7648f2e1\",\"Description\":\"Subsitute with Ranch dressing\",\"Price\":\"0.00\"},\r\n    //                  {\"_id\":\"602cd4994cca295f7648f2e2\",\"Description\":\"Add Garlic Croutons\",\"Price\":\"0.50\"},\r\n    //                  {\"_id\":\"602cd4994cca295f7648f2e3\",\"Description\":\"Substitute with Greek Dressing\",\"Price\":\"0.75\"}]}\"\r\n    //              ]\r\n    //     }],\r\n    //     pickup_date: \"\",\r\n    //     pickup_time: \"\",\r\n    // }\r\n    const paypalRef = React.useRef();\r\n    const paypalOrderObject = {\r\n        intent: \"CAPTURE\",\r\n        application_context: {\r\n            shipping_preference: 'NO_SHIPPING',\r\n        },\r\n        purchase_units: [{\r\n            description: \"Food order from UWEAST Kitchen\",\r\n            // Deals with pricing of the cart\r\n            amount: {\r\n                currency_code: \"USD\",\r\n                value: cookies.cart.total,\r\n                breakdown: {\r\n                    // includes totals for items and taxes. Shipping and handling can be ignored\r\n                    // because the items are for pickup and handling is included in price\r\n                    item_total: {\r\n                        currency_code: \"USD\",\r\n                        value: cookies.cart.subtotal,\r\n                    },\r\n                    tax_total: {\r\n                        currency_code: \"USD\",\r\n                        value: cookies.cart.tax,\r\n                    },\r\n                }\r\n            },\r\n            // Deals with the individual item entries for the order\r\n            items: \r\n            [...cookies.cart.items.map((item) => {\r\n                // build description\r\n                let desc = [`Size: ${item[4]}`];\r\n                if(item[6] !== undefined){\r\n                    if(Array.isArray(item[6])){\r\n                        desc = [...desc, ...item[6]];\r\n                    }\r\n                    else{\r\n                        desc = [...desc, item[6]];\r\n                    }\r\n                }\r\n                desc = [...desc, item[5]];\r\n                return {\r\n                    name: item[1],\r\n                    // Description follows the format:\r\n                    // Size: {size}, (Gluten Free,) (Other addons,) \r\n                    description: desc.join(\", \"),\r\n                    unit_amount: {\r\n                        currency_code: \"USD\",\r\n                        value: (parseFloat(item[2])/parseFloat(item[3])).toFixed(2),\r\n                    },\r\n                    tax: {\r\n                        currency_code: \"USD\",\r\n                        value: 0,\r\n                    },\r\n                    quantity: item[3],\r\n                    category: \"PHYSICAL_GOODS\"\r\n                }\r\n            }), \r\n                {   name: \"taxes\",\r\n                    description: \"taxes\",\r\n                    unit_amount: {\r\n                        currency_code: \"USD\",\r\n                        value: 0,\r\n                    },\r\n                    tax: {\r\n                        currency_code: \"USD\",\r\n                        value: cookies.cart.tax,\r\n                    },\r\n                    quantity: 1,\r\n                    category: \"PHYSICAL_GOODS\"\r\n                }\r\n            ]\r\n        }],\r\n        shipping_type: 'PICKUP',\r\n    }\r\n    // To show PayPal buttons once the component loads\r\n    React.useEffect(() => {\r\n        window.paypal\r\n        .Buttons({\r\n            createOrder: async(data, actions) => {\r\n                return actions.order.create(paypalOrderObject);\r\n            },\r\n            onApprove: async (data, actions) => {\r\n                return actions.order.capture().then(function(details) {\r\n                    // details here includes payer name, phone number, and email\r\n\r\n                    // create order object\r\n                    let sendDate = new Date(props.selectedDate.getFullYear(),(props.selectedDate.getMonth()), props.selectedDate.getDate(),\r\n                        props.selectedTime.substring(0, 2), props.selectedTime.substring(3, 5));\r\n                    const orderObj = {\r\n                        \"Customer\": {\r\n                            \"Name\": details.payer.name.given_name + \" \" + details.payer.name.surname,\r\n                            \"Email\": details.payer.email_address,\r\n                            \"Phone\": details.payer.phone.phone_number.national_number\r\n                        },\r\n                        \"Pickup\": sendDate,\r\n                        \"PayPal\": {\r\n                            \"Amount\": parseFloat(cookies.cart.total).toFixed(2),\r\n                            \"transactionID\": data.orderID\r\n                        },\r\n                        \"Order\": \r\n                        cookies.cart.items.map((item) => {\r\n                            return {\r\n                                \"item\": item[1],\r\n                                \"quantity\": parseInt(item[3]),\r\n                                \"size\": item[4],\r\n                                \"accommodations\": \r\n                                    item[6] !== undefined\r\n                                        ? (Array.isArray(item[6]) \r\n                                            ? item[6].join(\",\") \r\n                                            : item[6]\r\n                                        )\r\n                                        : \"\",\r\n                                \"specialInstructions\": item[5],\r\n                            }\r\n                        })\r\n                    }\r\n                    // signal email automation by calling the /autoEmails/automate route, \r\n                    // this will automatically add the order to the database \r\n                    return fetch(`${BACKEND_URL}autoEmails/automate`, {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"content-type\": \"application/json\",\r\n                        },\r\n                        body: JSON.stringify(orderObj),\r\n                    }).then((res) => {\r\n                        if(res.ok){\r\n                            alert('Transaction completed! You will receive a confirmation email shortly.');\r\n                        } else {\r\n                            alert('Transaction completed, but email automation failed. You paid for your meal, and should get a confirmation from PayPal. Please contact us to set up your order.');\r\n                        }\r\n                        //clears the cart cookie after order is placed\r\n                        let newCart = {\r\n                            items: [],\r\n                            subtotal: \"00.00\",\r\n                            tax: \"00.00\",\r\n                            total: \"00.00\"\r\n                        }\r\n                        setCookie(\"cart\", newCart, { path: \"/\" });\r\n                        \r\n                        history.push(\"/\");\r\n                        history.go(0);\r\n                    })\r\n                    .catch(() => {\r\n                        alert(\"There was an internal error. Check your email for a recepit from PayPal, and contact us to set up your order.\");\r\n                    });\r\n                });\r\n            },\r\n            onCancel: () => {\r\n            },\r\n            onError: (err) => {\r\n                alert(\"An unexpected error occurred - your payment did not go through. Please try again later.\");\r\n\r\n            },\r\n        })\r\n        .render(paypalRef.current);\r\n    }, [cart]);\r\n\r\n    return (\r\n        <div>\r\n            <div ref={paypalRef}/>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\NavBar.js",["208","209","210","211","212","213","214"]," /**\r\n  * The NavBar component. Renders at the top of the website and is fixed to the top.\r\n  * Cart Icon is used for the mobile/tablet rendering of the webpage. \r\n  * \r\n  * @summary NavBar at the top of each page, used to navigate the website.\r\n  */\r\n\r\nimport React, {useEffect} from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faShoppingCart } from '@fortawesome/free-solid-svg-icons'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Badge from '@material-ui/core/Badge'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Logo from \"../media/UWEAST_Logo_Detail_Transparent.png\";\r\nimport '../css/NavBar.css';\r\nimport { isAuthenticated, logout } from '../util/Auth';\r\nimport { useCookies } from 'react-cookie';\r\n\r\n// styled Badge for the cart icon\r\nconst CartBadge = withStyles(({\r\n    badge: {\r\n      backgroundColor: \"#F9CE1D\",\r\n      color: \"white\"\r\n    }\r\n  }))(Badge);\r\n\r\n/**\r\n * Renders the NavBar used to navigate the website\r\n * \r\n * @param {any} props - props for the NavBar to use\r\n * @returns {HTMLElement} - The NavBar\r\n */\r\nexport default function NavBar(props) {\r\n\r\n    {/* history hook to redirect on logout */ }\r\n    const history = useHistory();\r\n    const [cookies, setCookie] = useCookies([\"cart\"]);\r\n\r\n    const [state, setState] = React.useState({\r\n        isUserAuthenticated: false\r\n    });\r\n\r\n    {/* stores class names to toggle whether content is shown */ }\r\n    var adminContentClass;\r\n    var loginButtonClass;\r\n\r\n    {/* removes login token and redirects to menu page */ }\r\n    function Logout() {\r\n        history.push(\"/login\");\r\n        history.go(0);\r\n    }\r\n\r\n    /**\r\n     * Renders the cart page for mobile navbar\r\n     */\r\n    function OpenCart() {\r\n        if(window.innerWidth < 768) {\r\n            history.push(\"/cart\");\r\n        } else {\r\n            props.toggleCart();\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        isAuthenticated().then(async result => {\r\n            if (!result) {\r\n                logout();\r\n            }\r\n            setState({ ...state, isUserAuthenticated: result });\r\n        })\r\n    }, []);\r\n\r\n    {/* Hides admin content (admin page + logout) or login button depending on whether user is logged in */ }\r\n    if (state.isUserAuthenticated) {\r\n        adminContentClass = \"nav-link\";\r\n        loginButtonClass = \"nav-link d-none\";\r\n    } else {\r\n        adminContentClass = \"nav-link d-none\";\r\n        loginButtonClass = \"nav-link\";\r\n    }\r\n\r\n    {/* Check current page from props to change active nav-link color */ }\r\n    function isPageActive(pageToCheck) {\r\n        return (pageToCheck === window.location.pathname) ? \" active\" : \"\";\r\n    }\r\n\r\n    return (\r\n        <html>\r\n            <head>\r\n                {/* Bootstrap Resources */}\r\n                <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossOrigin=\"anonymous\" />\r\n            </head>\r\n            {/* Left Hand Side of Navbar - Title & Image linked to Menu Page */}\r\n            <Navbar className=\"navbar navbar-bg-color\" collapseOnSelect expand=\"xl\" variant=\"dark\">\r\n                \r\n                {/* Left Hand Side of Navbar - Title & Image linked to Menu Page */}\r\n                <Navbar.Brand href=\"/\">\r\n                    <span>\r\n                        <img src={Logo} className=\"logo-img\" alt=\"UWEAST Logo\" width={'90'} \r\n                            height={'90'} />\r\n                    </span>\r\n\r\n                    {/* Text to complement the logo */}\r\n                    <div className=\"brand-name\" >\r\n                        <p>Community Kitchen</p>\r\n                    </div>\r\n\r\n                </Navbar.Brand>\r\n\r\n                {/* The shopping cart will only render if it is a mobile component */}\r\n                <div className=\"cart-icon-container\">\r\n                    <div className=\"cart-icon\">\r\n                        <IconButton onClick={OpenCart}>\r\n                            <CartBadge badgeContent={(props.itemCount) ? props.itemCount : cookies.cart.items.length}>\r\n                                <FontAwesomeIcon icon={faShoppingCart} style={{ color: 'white' }}/>\r\n                            </CartBadge>\r\n                        </IconButton>\r\n                    </div>\r\n\r\n                    {/* Triggers on Collapse - Hamburger Icon replaces pages */}\r\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" style={{border: '1px solid white', marginLeft: 'calc(7vw)'}}/>\r\n                </div>\r\n\r\n                {/* Right Hand Side of Navbar - Linked Pages (based off of Router paths in App.js) */}\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"ml-auto\">\r\n                        {/* Menu Page */}\r\n                        <Nav.Link className={\"nav-link\" + isPageActive(\"/\")} href=\"/\">Menu</Nav.Link>\r\n\r\n                        {/* Contact Page */}\r\n                        <Nav.Link className={\"nav-link\" + isPageActive(\"/contact\")} href=\"/contact\">Contact</Nav.Link>\r\n\r\n                        {/* About Page */}\r\n                        <Nav.Link className={\"nav-link\" + isPageActive(\"/about\")} href=\"/about\">About</Nav.Link>\r\n\r\n                        {/* Admin Page */}\r\n                        <span className=\"desktop-tabs\">\r\n                            <Nav.Link className={adminContentClass + isPageActive(\"/admin\")} href=\"/admin\">Admin</Nav.Link>\r\n                        </span>\r\n\r\n                        {/* Logout */}\r\n                        <span className=\"desktop-tabs\">\r\n                            <Nav.Link className={adminContentClass} onClick={Logout}>Logout</Nav.Link>\r\n                        </span>\r\n\r\n                        {/* Login */}\r\n                        <span className=\"desktop-tabs\">\r\n                            <Nav.Link className={loginButtonClass + isPageActive(\"/login\")} href=\"/login\">Login</Nav.Link>\r\n                        </span>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n\r\n                {/* The shopping cart will only render for smaller desktop screens/tablets */}\r\n                <div className=\"cart-icon-smaller-desktop\">\r\n                    <IconButton onClick={() => props.toggleCart()}>\r\n                        <CartBadge badgeContent={(props.itemCount) ? props.itemCount : cookies.cart.items.length}>\r\n                            <FontAwesomeIcon icon={faShoppingCart} style={{ color: 'white' }}/>\r\n                        </CartBadge>\r\n                    </IconButton>\r\n                </div>\r\n            </Navbar>\r\n        </html>\r\n    )\r\n}\r\n","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\SearchSection.js",["215","216"],"/**\r\n * Upper portion of menu page. Has formatting for \"jumbotron\" background image.\r\n * \r\n * @summary   Upper portion of menu page with main background image.\r\n * @author    Navid Boloorian\r\n */\r\n\r\nimport React, {useState, useEffect} from 'react';\r\nimport \"../css/SearchSection.css\";\r\nimport Header from \"../media/default_header.jpg\";\r\n\r\nconst config = require('../config');\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\nconst SearchSection = () => {\r\n  // set a default header image here\r\n  var defaultImg = Header\r\n\r\n  const [headerImg, setHeaderImg] = useState(\"\"); \r\n\r\n  /**\r\n   * UseEffect gets the background image for the header.\r\n   */\r\n  useEffect(() => {\r\n    fetch(`${BACKEND_URL}menuImages`)\r\n    .then(async result => {\r\n      if (result.ok) {\r\n        const json = await result.json();\r\n\r\n        if(json.imageUrl != undefined) {\r\n          setHeaderImg(json.imageUrl.imageUrl);\r\n        }\r\n      }\r\n      else {\r\n        console.log(\"error\");\r\n      }\r\n    })\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"search-section\">\r\n      <img alt=\"Menu Image\" src={headerImg} className=\"header-img\" onError={(e)=>{e.target.src=defaultImg}} />\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default SearchSection;","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\Banner.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\util\\Auth.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Orders.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuSection.js",["217","218","219"],"/**\r\n * Hub of menu portion of page. Almost all  states are elevated to this level. \r\n * Defines most of the form processing and renders MenuFilter, MenuItems, and \r\n * MenuCart.\r\n * \r\n * @summary   Hub of menu items, most states are elevated to this level.\r\n * @author    Navid Boloorian\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport MenuFilter from './MenuFilter';\r\nimport MenuItems from './MenuItems';\r\nimport '../css/MenuSection.css';\r\n\r\n/**\r\n * Handle the display of menu categories and sections. Stores states of what is \r\n * currently visible.\r\n * \r\n * @param {function} onItemAdd - Function returning boolean\r\n */\r\nconst MenuSection = ({onItemAdd}) => {\r\n  // filterCategories populates the filter buttons\r\n  const filterCategories = [\"Whole Menu\", \"Featured\", \"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\r\n\r\n  // populates the menu item categories\r\n  const defaultCategories = [\"Featured\", \"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\r\n\r\n  // stores all the categories currently visible\r\n  let displayedCategories = [];\r\n\r\n  // states that are managed and passed down to components\r\n  const [visibleCategories, setVisibleCategories] = useState(defaultCategories);\r\n\r\n  const [toggledFilter, setToggledFilter] = useState(\"none\");\r\n\r\n  // stores whether or not the popup is currently visible\r\n  const [popupVisible, setPopupVisible] = useState(false);\r\n\r\n  // map with all of the data that will be displayed in the popup\r\n  const [popupValues, setPopupValues] = useState(new Map());\r\n\r\n  // changes visible categories when filter button is clicked\r\n  const changeVisibleCategories = categoryName => {\r\n    if(categoryName == \"Whole Menu\") {\r\n      displayedCategories = defaultCategories;\r\n    }\r\n    else {\r\n      // if the option is not \"whole menu\", a new item is added to the \r\n      // displayedCategories array that is then passed to be rendered\r\n      displayedCategories.push(categoryName);\r\n    }\r\n\r\n    if(displayedCategories.length == 0) {\r\n      displayedCategories = defaultCategories;\r\n    }\r\n    \r\n    // responsible for actually rendering/setting what will be visible\r\n    setVisibleCategories(displayedCategories);\r\n  }\r\n\r\n  // processes the form submitted from the popup\r\n  const processForm = e => {\r\n    // prevents page reload\r\n    e.preventDefault();\r\n\r\n    // gets the form data\r\n    var data = new FormData(e.target);\r\n    var object = {};\r\n\r\n    // goes through and makes an object from the FormData\r\n    data.forEach((value, key) => {\r\n        if(!Reflect.has(object, key)){\r\n            object[key] = value;\r\n            return;\r\n        }\r\n\r\n        if(!Array.isArray(object[key])){\r\n            object[key] = [object[key]];    \r\n        }\r\n        object[key].push(value);\r\n    });\r\n\r\n    // converts the FormData to a JSON string, optional\r\n    var json = JSON.stringify(object);\r\n\r\n    // calls parent function to add item from popup to cart\r\n    onItemAdd(object);\r\n    \r\n    // when submit button is clicked, the popup is closed\r\n    togglePopup();\r\n  }\r\n  \r\n  // closes popup when open and opens popup when closed\r\n  const togglePopup = (title, description, price, image, dietaryInfo, accommodations, id, fillIns) => {\r\n    setPopupVisible(!popupVisible);\r\n    \r\n    // sets the values of the map based on passed-in information\r\n    popupValues.set(\"title\", title);\r\n    popupValues.set(\"description\", description);\r\n    popupValues.set(\"price\", price);\r\n    popupValues.set(\"image\", image);\r\n    popupValues.set(\"dietary-info\", dietaryInfo);\r\n    popupValues.set(\"accommodations\", accommodations);\r\n    popupValues.set(\"id\", id);\r\n    popupValues.set(\"fillIns\", fillIns);\r\n\r\n    setPopupValues(popupValues);\r\n  }\r\n\r\n  /**\r\n   * MenuSection is split into three columns:\r\n   * 1. filter column\r\n   * 2. menu column\r\n   * 3. cart column\r\n   */\r\n  return (\r\n    <div className=\"menu-section-wrapper\">\r\n      <div className=\"menu-section\">\r\n        <div className=\"menu-filter-wrapper\">\r\n          <MenuFilter toggledFilter={toggledFilter} setToggledFilter={setToggledFilter} foodCategories={filterCategories} changeVisibleCategories={() => changeVisibleCategories} />\r\n        </div>\r\n        <div className=\"menu-items\">\r\n          {/** parameters are states being passed down */}\r\n          <MenuItems foodCategories={visibleCategories} processForm={processForm} popupVisible={popupVisible} popupValues={popupValues} togglePopup={togglePopup}/>\r\n        </div>\r\n        <div className=\"menu-cart\">\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MenuSection;","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\CartPreview.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuItemPopup.js",["220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235"],"/**\r\n * Popup that displays specified item when MenuItem is clicked. Has form to \r\n * pass data to/add items to cart. Popup gives relevant information such as \r\n * pricing, description, additional accommodations etc.\r\n * \r\n * @summary     Displays item information and allows user to add item to cart.\r\n * @author      Aaron Kirk, Navid Boloorian\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport '../css/MenuItemPopup.css';\r\nimport plus from '../media/plus.svg';\r\nimport minus from '../media/minus.svg';\r\nimport info from '../media/info.svg';\r\n\r\nconst MenuItemPopup = ({ values, togglePopup, processForm }) => {\r\n\r\n    /**\r\n     * Calculates the initial cost to add on from default selected accommodations\r\n     * when editing an item (when auto-selecting fields). Must be used first to\r\n     * set the inital totalPrice state when editing items.\r\n     * \r\n     * @returns {number} - Sum of the price of all auto-selected accommodations\r\n     */\r\n    const getInitialAccommodationsCost = () => {\r\n        var sum = 0;\r\n        if(values.get(\"fillIns\") != undefined) {\r\n            values.get(\"accommodations\").forEach((accommodation) => {\r\n                if(values.get(\"fillIns\").accommodations.includes(accommodation.Description)) {\r\n                    sum += parseFloat(accommodation.Price);\r\n                }\r\n            });\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    // TODO: fix the absurd tertiary statements here...\r\n    const [quantity, setQuantity] = useState((values.get(\"fillIns\") != undefined) ? parseInt(values.get(\"fillIns\").quantity) : 1);\r\n    // if individual price exists, use that as default; otherwise, use family\r\n    const [accommodationCost, setAccommodationCost] = useState(getInitialAccommodationsCost());\r\n    const [currPrice, setCurrPrice] = useState(parseFloat((values.get(\"fillIns\") != undefined) ? ((values.get(\"fillIns\").size == \"Individual\") ? values.get(\"price\").Individual : values.get(\"price\").Family) : ((\"Individual\" in values.get(\"price\")) ? values.get(\"price\").Individual : values.get(\"price\").Family)) + parseFloat(accommodationCost));\r\n    const [totalPrice, setTotalPrice] = useState(parseFloat(currPrice * quantity));\r\n\r\n    /**\r\n     * Updates the quantity and price states accordingly when the user tries to\r\n     * increment or decrement the quantity.\r\n     * \r\n     * @param {*} sign - Symbol (+ or -) indicating whether to increase or decrease quantity\r\n     */\r\n    const changeQuantity = sign => {\r\n        // two scenarios: increments or decrements quantity\r\n        if(sign == \"+\") {\r\n            setQuantity(quantity + 1);\r\n            // calulates on quantity + 1 b/c state hasn't updated yet\r\n            setTotalPrice(currPrice * (quantity + 1));\r\n        }\r\n        else if(sign == \"-\") {\r\n            if(quantity > 1) {\r\n                setQuantity(quantity - 1);\r\n                // calulates on quantity - 1 b/c state hasn't updated yet\r\n                setTotalPrice(currPrice * (quantity - 1));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates price when accommodations are selected or unselected.\r\n     * \r\n     * @param {*} checked - Checked state of the accommodation field \r\n     * @param {*} price - Price of the accommodation to be added or removed\r\n     */\r\n    const handleAccommodation = (checked, price) => {\r\n        // adds price if field is now checked; removes price otherwise\r\n        if(checked) {\r\n            // parseFloat() is necessary because otherwise they get treated like strings for addition\r\n            setAccommodationCost(parseFloat(accommodationCost) + parseFloat(price));\r\n            setCurrPrice(parseFloat(price) + parseFloat(currPrice));\r\n            setTotalPrice(parseFloat((parseFloat(currPrice) + parseFloat(price)) * quantity));\r\n        } else {\r\n            setAccommodationCost((accommodationCost - price));\r\n            setCurrPrice(currPrice - price);\r\n            setTotalPrice((currPrice - price) * quantity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to render a sizing option and determine whether or not\r\n     * it should be checked by default.\r\n     * \r\n     * @param {*} name - Name of Size (Individual or Family)\r\n     * @param {*} price - Price of Size\r\n     * @param {*} hasBothPrices - boolean indicating whether both options are being rendered in order to choose default selection\r\n     */\r\n    const renderSize = (name, price, hasBothPrices) => {\r\n        return(\r\n            // conditionally displays family size as an \"add-on\" if both are possible\r\n            // TODO: fix the absurd nested tertiary statements\r\n            //      (these decide whether the element should be checked by default\r\n            //       depending on which size this is, whether both sizes are \r\n            //       available, and whether an item is passed in to fill populate fields)\r\n            <label className=\"choice-label\">\r\n                <input onClick={() => handleSize(price)} type=\"radio\" name=\"size\" value={name} defaultChecked={(name == \"Individual\" || ((values.get(\"fillIns\") != undefined) && values.get(\"fillIns\").size == name) || !(\"Individual\" in values.get(\"price\")))} required />\r\n                <span onClick={() => handleSize(price)} className=\"label-title\">{name + \" \"}<span title=\"Suited for 5-6 people\"><img src={info} className={(name == \"Family\") ? \"size-info\" : \"hidden size-info\"} alt=\"Size Info\"/></span>{(hasBothPrices) ? \" +($\" + parseFloat(price - values.get(\"price\").Individual).toFixed(2) + \")\": null}</span>\r\n            </label>\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * Changes price depending on the size selected.\r\n     * \r\n     * @param {*} newPrice - Price of the newly selected size\r\n     */\r\n    const handleSize = (newPrice) => {\r\n        setCurrPrice(parseFloat(accommodationCost) + parseFloat(newPrice));\r\n        // currPrice has yet to update, so still using newPrice\r\n        // fix to 2 decimal places\r\n        setTotalPrice((parseFloat(accommodationCost) + parseFloat(newPrice)) * (quantity));\r\n    }\r\n\r\n    /**\r\n     * Helper function to render the entire accommodations section.\r\n     */\r\n    const renderAccommodations = () => {\r\n        // return nothing if there are no accommodations\r\n        if(values.get(\"accommodations\").length == 0) return;\r\n        else {\r\n            return (\r\n                /** Header */\r\n                <div className=\"section accommodations-section\">\r\n                <div className=\"section-title\">\r\n                    <h3>Accommodations</h3>\r\n                    <i>optional</i>\r\n                </div>\r\n                {/* map through and render all accommodations */}\r\n                {values.get(\"accommodations\").map((accommodation) => {\r\n                    return(\r\n                        <label className=\"choice-label\">\r\n\r\n                            <input type=\"checkbox\" name=\"accommodations\" \r\n                                defaultChecked={values.get(\"fillIns\") != undefined && values.get(\"fillIns\").accommodations.includes(accommodation.Description)}\r\n                                value={accommodation.Description} id={accommodation.Description} onChange={(e) => handleAccommodation(e.target.checked, accommodation.Price)} />\r\n\r\n                            <span className=\"label-title\">{accommodation.Description + \" +($\" + parseFloat(accommodation.Price).toFixed(2) + \")\"}</span>\r\n                        </label>\r\n                    );\r\n                })}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to count number of dietary information.\r\n     * \r\n     * @returns {number} - Number of dietary information fields that are true for this item.\r\n     */\r\n    const numDietaryInfo = () => {\r\n        // convert to Object\r\n        const dietaryInfo = Object.entries(values.get(\"dietary-info\"));\r\n        var count = 0;\r\n        // loop through all the dietaryInfo and account for ones that are true\r\n        for (const [key, value] of dietaryInfo) {\r\n            if(value) count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Helper function to render all the dietary information\r\n     */\r\n    const renderDietaryInfo = () => {\r\n        // returns nothing in the trivial case that there is no information to show\r\n        // this is so that the horizontal line (<hr/>) will not render\r\n        if (numDietaryInfo() == 0) return;\r\n        else {\r\n            return (\r\n                <>\r\n                <hr/>\r\n                <p className=\"dietary-info\">\r\n                    {(values.get(\"dietary-info\").vegan) ? \"*Vegan\" : null}\r\n                    {(values.get(\"dietary-info\").vegan) ? <br/> : null}\r\n                    {(values.get(\"dietary-info\").vegetarian) ? \"*Vegetarian\" : null}\r\n                    {(values.get(\"dietary-info\").vegetarian) ? <br/> : null}\r\n                    {(values.get(\"dietary-info\").glutenFree) ? \"*Gluten-free\" : null}\r\n                    {(values.get(\"dietary-info\").glutenFree) ? <br/> : null}\r\n                    {(values.get(\"dietary-info\").containsDairy) ? \"*Contains Dairy\" : null}\r\n                </p>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/** div that fades out the background */}\r\n            <div className=\"greyout\" onClick={togglePopup}></div>\r\n            <div className=\"menu-item-popup\">\r\n                <span className=\"close-button\" onClick={togglePopup}>+</span>\r\n                <div className=\"group-popup\">\r\n\r\n                    {/** Left side with dish details */}\r\n                    <div className=\"left-popup\">\r\n                        <div className=\"popup-image\" style={{backgroundImage: \"url(\" + values.get(\"image\") + \")\", backgroundSize:\"cover\"}}>\r\n                            <div className=\"popup-image-price\"><h3>{\"$\" + parseFloat(currPrice).toFixed(2)}</h3></div>\r\n                        </div>\r\n                        <div className=\"popup-item-info\">\r\n                            <h3 className=\"title-popup\">{values.get(\"title\")}</h3>\r\n                            <p className=\"desc-popup\">{values.get(\"description\")}</p>\r\n                            {renderDietaryInfo()}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/** right side with order options */}\r\n                    <div className=\"right-popup\">\r\n                        <form onSubmit={processForm} id=\"popup-form\">\r\n\r\n                            {/** sizing options */}\r\n                            <div className=\"section size-section\">\r\n                                <div className=\"section-title\">\r\n                                    <h3>Choose Size</h3>\r\n                                    <i>required</i>\r\n                                </div>\r\n                                {/** checks to ensure individual/family sizes exist; conditionally displays family size as an \"add-on\" if both are possible */}\r\n                                {(\"Individual\" in values.get(\"price\")) ? renderSize(\"Individual\", values.get(\"price\").Individual, false) : null}\r\n                                {(\"Family\" in values.get(\"price\")) ? renderSize(\"Family\", values.get(\"price\").Family, (\"Individual\" in values.get(\"price\"))) : null}\r\n                            </div>\r\n\r\n                            {/** accommodations options */}\r\n                            {renderAccommodations()}\r\n\r\n                            {/** custom instructions text area */}\r\n                            <div className=\"section instructions-section\">\r\n                                <div className=\"section-title\">\r\n                                    <h3>Special Instructions</h3>\r\n                                    <i>optional</i>\r\n                                </div>\r\n                                <p className=\"instructions-note\">Special accommodations can be made for orders placed in advanced but are not guaranteed, please <a href=\"/contact\">contact us</a> directly for more info.</p>\r\n                                <textarea name=\"instructions\" maxLength=\"75\" className=\"instructions-textarea\" defaultValue={(values.get(\"fillIns\") != undefined) ? values.get(\"fillIns\").instructions : \"\"}></textarea>\r\n                            </div>\r\n\r\n                            {/** quantity selection */}\r\n                            <div className=\"section quantity-section\">\r\n                                <div className=\"section-title\"><h3>Quantity</h3></div>\r\n                                <div className=\"quantity-buttons\">\r\n                                    <button type=\"button\" className=\"button decrease-button\" onClick={() => {changeQuantity(\"-\");}\r\n                                    }><img src={minus} alt=\"Decrease Quantity\" /></button>\r\n                                    <span className=\"quantity-number\">{quantity}</span>\r\n                                    <button type=\"button\" className=\"button increase-button\" \r\n                                    onClick={() => {changeQuantity(\"+\");}}><img src={plus} alt=\"Increase Quantity\" /></button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/** hidden fields to pass along to the total price and  quantity */}\r\n                            <input name=\"popupValues\" type=\"hidden\" value={JSON.stringify(Object.fromEntries(values))} />\r\n                            <input name=\"price\" type=\"hidden\" value={parseFloat(totalPrice).toFixed(2)} />\r\n                            <input name=\"quantity\" type=\"hidden\" value={quantity} />\r\n                            <input className=\"submit-order-button\" type=\"submit\" value={(values.get(\"fillIns\") != undefined) ? \"Save Changes: $\" + parseFloat(totalPrice).toFixed(2) : \"Add \" + quantity + \" to cart: $\" + parseFloat(totalPrice).toFixed(2)} />\r\n                        </form>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n  \r\n    export default MenuItemPopup;\r\n","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\CustomTimePicker.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\ChangeHeaderModal.js",["236","237"],"/**\r\n * Modal used to change the header image of the Menu page. The modal renders\r\n * whenever the \"Change Header\" button from AdminMenuItems.js is clicked. It\r\n * contains a simple form used to update the URL of the header image of the\r\n * Menu page.\r\n * \r\n * An error is thrown if and only if the \"Image Link\" field is empty.\r\n *\r\n * Note: the backend functionality for this modal, which stores the menu header\r\n * image URL in the database, throws an error in case of inserting a duplicate\r\n * URL or an invalid URL. This case is handled by the backend, and the frontend\r\n * displays an error message to let the user know.\r\n * \r\n * @summary     Modal used to change the header image of the Menu page.\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { Modal, FormControl, OutlinedInput, Snackbar, IconButton } from '@material-ui/core';\r\nimport '../css/ChangeHeaderModal.css';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport {getJWT, logout} from '../util/Auth';\r\nconst config = require('../config');\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\n/**\r\n * Renders a red asterisk that indicates a required field.\r\n * \r\n * @returns {HTMLParagraphElement} - Red asterisk to indicate a required field\r\n */\r\nfunction requiredAsterisk(){\r\n    return (\r\n        <p className=\"requiredAsterisk\">*</p>\r\n    );\r\n}\r\n\r\n/**\r\n * Renders the modal used to change the URL of the Menu page's header image.\r\n * \r\n * @param {boolean} changeHeaderModal - show/hide modal\r\n * @param {function} setChangeHeaderModal - set changeHeaderModal\r\n * @param {function} setLoaded - sets AdminMenuItems.js loaded state\r\n * @param {string} headerImageUrl - current header image URL\r\n * @returns {HTMLElement} - A modal with implemented functionality\r\n */\r\nexport default function ChangeHeaderModal (props){\r\n    // inherit display functions as props\r\n    const showModal = props.changeHeaderModal;\r\n    const setShowModal = props.setChangeHeaderModal;\r\n    const setLoaded = props.setLoaded;\r\n\r\n    // error handling\r\n    const [menuError, setMenuError] = useState(false);\r\n    const [errorSnackbar, setErrorSnackbar] = useState({\r\n        display: false,\r\n        message: ''\r\n    });\r\n    const [failedAdminAuth, setFailedAdminAuth] = useState(false);\r\n\r\n    // form's states\r\n    const [headerImageURL, setHeaderImageURL] = useState(props.headerImageURL);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        // validate input\r\n        if (headerImageURL === \"\")\r\n        {\r\n            setMenuError(true);\r\n            setErrorSnackbar({display: true, message: \"URL cannot be empty\"});\r\n            return;\r\n        }\r\n        // create the object to oush to the database\r\n        const imageURLObject = {\r\n            \"imageUrl\": headerImageURL,\r\n            \"token\": getJWT()\r\n        }\r\n        // push to database\r\n        await fetch(`${BACKEND_URL}menuImages/changeMenuImage`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(imageURLObject)\r\n        }).then(res => {\r\n            // success\r\n            if(res.ok){\r\n                alert(\"The header image was changed!\");\r\n                // refetch\r\n                setLoaded(false);\r\n                setShowModal(false);\r\n            } \r\n            // invalid admin token\r\n            else if(res.status === 401){\r\n                logout();\r\n                // refresh will cause a redirect to login page\r\n                window.location.reload();\r\n                return;\r\n            }\r\n            // system error on backend \r\n            else if (res.status === 500){\r\n                setMenuError(true);\r\n                setErrorSnackbar({display: true, message: \"A system error has occurred - try again later\"});\r\n                return;\r\n            }\r\n            // failure\r\n            else{\r\n                setMenuError(true);\r\n                setErrorSnackbar({display: true, message: \"URL is either already in use or invalid\"});\r\n                return;\r\n            }\r\n        })\r\n\r\n    }\r\n        return(\r\n            <>\r\n                {/* Failure Snackbar */}\r\n                <Snackbar\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'center',\r\n                    }}\r\n                    open={errorSnackbar.display}\r\n                    autoHideDuration={5000}\r\n                    onClose={() => setErrorSnackbar({...errorSnackbar, display: false})}\r\n                    message={<span id=\"message-id\">{errorSnackbar.message}</span>}\r\n                />\r\n                {/* Change header image Modal */}\r\n                <Modal open={showModal} onClose={() => setShowModal(false)} \r\n                    className=\"modalContainer\" style={{display:'flex',alignItems:'center',justifyContent:'center'}}\r\n                >\r\n                    <div className=\"modalBackground\">\r\n                        <div className=\"modalHeader\">\r\n                            {/* Modal close button */}\r\n                            <IconButton className=\"closeModalButton\" \r\n                                onClick={() => setShowModal(false)}\r\n                            >\r\n                                <ClearIcon/>\r\n                            </IconButton>\r\n                        </div>\r\n                        <form autocomplete=\"off\" onSubmit={(e) => handleSubmit(e)}>\r\n                            <div className=\"modalBody\">\r\n                                {/* Header image URL */}\r\n                                <p className=\"formLabelText\">Image Link {requiredAsterisk()}</p>\r\n                                <FormControl fullWidth error={menuError && headerImageURL === \"\"} className=\"formItem\" margin='dense'>\r\n                                    <OutlinedInput name=\"imageUrl\" id=\"imageUrl\" className=\"formTextInput\"\r\n                                        value={headerImageURL}\r\n                                        onChange={(e) => setHeaderImageURL(e.target.value)}\r\n                                        size=\"small\"\r\n                                    />\r\n                                </FormControl>\r\n                            </div>\r\n                            <div className=\"modalFooter\">\r\n                                {/* Change header button */}\r\n                                <Button className=\"changeHeaderButton\" type=\"submit\">\r\n                                    Change Header\r\n                                </Button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </Modal>\r\n            </>\r\n        );\r\n}","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\EditMenuItemModal.js",["238","239"],"/**\r\n * This file contains the modal for editing an item that exists the menu. It's split\r\n * into sections for each of the form items, including name, image url, category,\r\n * prices, accommodations, and description. The fields are automatically filled\r\n * in with the current information from the item for the user to edit.\r\n * \r\n * It uses MaterialUI's form control\r\n * to create the form. \r\n * The required fields are name, image url, category, description, and price.\r\n * Price is considered to be filled out if one of the prices is complete (so\r\n * one of the prices can be empty).\r\n * Also, a given accommodations is considered to be filled out if it has\r\n * 0 or 2 fields completed. If 0, it is removed, if 1, it is considered incomplete.\r\n * \r\n * Errors are thrown under the following cases:\r\n *     1. one of the required fields is empty\r\n *     2. one of the accommodations fields has one of the fields filled out\r\n *     3. none of the prices are filled out\r\n *   \r\n * A new accommodation field can be added if both fields of the previous one\r\n * has values, if not it will not be added.\r\n * Disclaimer: This file seems really long (it is), but it isn't very hard to\r\n * understand. A lot of the bulk comes from Material UI's form control handling\r\n * and general HTML property tags.\r\n *\r\n * @summary     Renders a modal for editing an item existing in the menu.\r\n * @author      PatrickBrown1\r\n */\r\n\r\nimport React, { useState, useReducer } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { Modal, FormControl, Checkbox, FormControlLabel, FormGroup, OutlinedInput, Select, MenuItem, InputAdornment, FormHelperText, Snackbar, IconButton } from '@material-ui/core';\r\nimport '../css/AddMenuItemModal.css';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport {getJWT, logout} from '../util/Auth';\r\n\r\nconst config = require('../config');\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\n// renders a red asterix that indicates a required field\r\nfunction requiredAsterix(){\r\n    return (\r\n        <p className=\"requiredAsterix\">*</p>\r\n    );\r\n}\r\nexport default function EditMenuItemModal (props) {\r\n\r\n    const showModal = props.showModal;\r\n    const setShowModal = props.setCurrentEditItem;\r\n    const setLoaded = props.setLoaded;\r\n    // form states\r\n    const [itemName, setItemName] = useState(props.item.itemName);\r\n    const [itemCategory, setItemCategory] = useState(props.item.categoryName)\r\n\r\n    let [individualItemPrice, setIndividualItemPrice] = useState(props.item.basePrice[0][0] === \"Individual\" ? props.item.basePrice[0][1] : \"\"); \r\n    let [familyItemPrice, setFamilyItemPrice] = useState(props.item.basePrice[0][0] === \"Family\" ? props.item.basePrice[0][1] : props.item.basePrice.length === 2 ? props.item.basePrice[1][1] : \"\" );\r\n    \r\n    const [itemImageURL, setItemImageURL] = useState(props.item.imgSource)\r\n    const [itemDescription, setItemDescription] = useState(props.item.description)\r\n    /*  addOns is an array of objects \r\n    [\r\n        {\r\n            name: \"\",\r\n            price: \"\"\r\n        }\r\n    ]\r\n    */\r\n    let tempaddon = [];\r\n    props.item.options.forEach(item => {\r\n        tempaddon.push({\"name\": item[1].Description, \"price\": item[1].Price});\r\n    })\r\n    const [addOns, setAddOns] = useState(tempaddon);\r\n    \r\n        // dietary info\r\n    const [vegan, setVegan] = useState(props.item.dietaryInfo !== undefined ? props.item.dietaryInfo.vegan : false);\r\n    const [vegetarian, setVegetarian] = useState(props.item.dietaryInfo !== undefined ? props.item.dietaryInfo.vegetarian : false);\r\n    const [glutenFree, setGlutenFree] = useState(props.item.dietaryInfo !== undefined ? props.item.dietaryInfo.glutenFree : false);\r\n    const [containsDairy, setContainsDairy] = useState(props.item.dietaryInfo !== undefined ? props.item.dietaryInfo.containsDairy : false);\r\n\r\n    const [menuError, setMenuError] = useState(false);\r\n    const [errorSnackbar, setErrorSnackbar] = useReducer(\r\n        (state, newState) => ({...state, ...newState}),\r\n        {visible: false, message: \"\"}\r\n    )\r\n    \r\n    const handleSubmit = async () => {\r\n        // validate basic input\r\n        if(itemName === \"\" || \r\n            itemCategory === \"\" || \r\n            (individualItemPrice === \"\" && familyItemPrice === \"\") || \r\n            itemImageURL === \"\" || itemDescription === \"\"\r\n        ){\r\n            setMenuError(true);\r\n            setErrorSnackbar({visible: true, message: \"There was an error in the form\"});\r\n            return;\r\n        }\r\n        // validate addons\r\n        let failAddOn = false;\r\n        addOns.forEach(item => {\r\n            if((item.price === \"\" && item.name !== \"\") || (item.price !== \"\" && item.name === \"\")){\r\n                // error\r\n                failAddOn = true;\r\n                setMenuError(true);\r\n                setErrorSnackbar({visible: true, message: \"One or more addons weren't properly filled in\"});\r\n                return;\r\n            }\r\n            else if(item.name !== \"\" && parseFloat(item.price) < 0){\r\n                //negative number\r\n                failAddOn = true;\r\n                setMenuError(true);\r\n                setErrorSnackbar({visible: true, message: \"Negative prices are not allowed in the menu\"});\r\n                return;\r\n            }\r\n        })\r\n        if(failAddOn){\r\n            setMenuError(true);\r\n            setErrorSnackbar({visible: true, message: \"One or more addons weren't properly filled in\"});\r\n            return;\r\n        }\r\n        // send to db\r\n\r\n        // format data into item object\r\n        let pricesObj = {};\r\n        if(individualItemPrice !== \"\"){\r\n            pricesObj.Individual = individualItemPrice;\r\n        }\r\n        if(familyItemPrice !== \"\"){\r\n            pricesObj.Family = familyItemPrice;\r\n        }\r\n        let accommodations = [];\r\n        addOns.forEach(addon => {\r\n            if(addon.name !== \"\" && addon.price !== \"\"){\r\n                accommodations.push({\"Description\": addon.name, \"Price\": addon.price});\r\n            }\r\n        })\r\n        const dietaryInfo = {\r\n            \"vegan\": vegan,\r\n            \"vegetarian\": vegetarian,\r\n            \"glutenFree\": glutenFree,\r\n            \"containsDairy\": containsDairy,\r\n        };\r\n        const itemObject = {\r\n            \"_id\": props.item.id,\r\n            \"Name\": itemName,\r\n            \"pictureURL\": itemImageURL,\r\n            \"Description\": itemDescription,\r\n            \"Category\": itemCategory,\r\n            \"Prices\": pricesObj,\r\n            \"isFeatured\": false,\r\n            \"isCompleted\": false,\r\n            \"Accommodations\": accommodations,\r\n            \"dietaryInfo\": dietaryInfo,\r\n            \"token\": getJWT()\r\n        }\r\n        // push to database\r\n        await fetch(`${BACKEND_URL}item/edit`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(itemObject)\r\n        }).then(res => {\r\n            if(res.ok){\r\n                props.setItemEditedSuccess(true);\r\n                // refetch\r\n                setLoaded(false);\r\n                setShowModal(\"\");\r\n            }\r\n             // invalid admin token\r\n             else if(res.status === 401){\r\n                logout();\r\n                // refresh will cause a redirect to login page\r\n                window.location.reload();\r\n                return;\r\n            }\r\n            else{\r\n                alert(\"There was an error. Recheck your inputs and try again\");\r\n            }\r\n        })\r\n        \r\n    }\r\n    return (\r\n        <>\r\n            {/* Failure Snackbar */}\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n                open={errorSnackbar.visible}\r\n                autoHideDuration={5000}\r\n                onClose={() => setErrorSnackbar({visible: false, message: \"\"})}\r\n                message={<span id=\"message-id\">{errorSnackbar.message}</span>}\r\n            />\r\n            <Modal open={showModal} onClose={() => setShowModal(\"\")} \r\n                className=\"modalContainer\"\r\n            >\r\n                <div className=\"modalBackground\">\r\n                    <div className=\"headerContainer\">\r\n                    <IconButton\r\n                        className=\"removeAddOnButton\"\r\n                        onClick={() => setShowModal(\"\")}\r\n                    >\r\n                        <ClearIcon/>\r\n                    </IconButton>\r\n                    </div>\r\n                    <form autocomplete=\"off\">\r\n                        <div className=\"modalBody\">\r\n                            {/* Item Name */}\r\n                            <p className=\"formLabelText\">Name {requiredAsterix()}</p>\r\n                            <FormControl fullWidth error={menuError && itemName === \"\"} className=\"formItem\" margin='dense'>\r\n                                <OutlinedInput name=\"name\" id=\"name\" className=\"formTextInput\"\r\n                                    required \r\n                                    value={itemName}\r\n                                    onChange={(e) => setItemName(e.target.value)}\r\n                                    size=\"small\"\r\n                                />\r\n                            </FormControl>\r\n                            {/* Item Image URL */}\r\n                            <p className=\"formLabelText\">Image Link {requiredAsterix()}</p>\r\n                            <FormControl fullWidth error={menuError && (itemImageURL === \"\")} className=\"formItem\" margin='dense'>\r\n                                <OutlinedInput name=\"imageURL\" id=\"imageURL\" className=\"formTextInput\"\r\n                                    required \r\n                                    value={itemImageURL}\r\n                                    onChange={(e) => setItemImageURL(e.target.value)}\r\n                                    size=\"small\"\r\n                                />\r\n                            </FormControl>\r\n\r\n                            {/* Item Category */}\r\n                            <p className=\"formLabelText\">Category Name {requiredAsterix()}</p>\r\n                            <FormControl fullWidth error={menuError && itemCategory === \"\"} className=\"formItem\" margin='dense' variant=\"outlined\">\r\n                                <Select name=\"category\" type=\"text\" id=\"category\" className=\"formSelectInput\" required \r\n                                    placeholder=\"\"\r\n                                    value={itemCategory}\r\n                                    onChange={(e) => setItemCategory(e.target.value)}\r\n                                    size=\"small\"\r\n                                    displayEmpty\r\n                                >\r\n                                    <MenuItem value=\"Appetizers\">Appetizers</MenuItem>\r\n                                    <MenuItem value=\"Main Dishes\">Main Dishes</MenuItem>\r\n                                    <MenuItem value=\"Sides\">Sides</MenuItem>\r\n                                    <MenuItem value=\"Drinks\">Drinks</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                            {/* Item Sizing and Price */}\r\n                            <div className=\"priceSizeContainer\">\r\n                                <div className=\"sizeContainer\">\r\n                                    <p className=\"formLabelText\">Size</p>\r\n                                    <FormControl margin='dense'>\r\n                                        <OutlinedInput name=\"name\" id=\"individuallabel\" className=\"formTextInput\"\r\n                                            required \r\n                                            value={\"Individual\"}\r\n                                            size=\"small\"\r\n                                            disabled\r\n                                        />\r\n                                    </FormControl>\r\n                                    <FormControl margin='dense'>\r\n                                        <OutlinedInput name=\"name\" id=\"familylabel\" className=\"formTextInput\"\r\n                                            required \r\n                                            value={\"Family\"}\r\n                                            size=\"small\"\r\n                                            disabled\r\n                                        />\r\n                                    </FormControl>\r\n                                </div>\r\n                                \r\n                                <div className=\"priceContainer\">\r\n                                    <p className=\"formLabelText\">Price</p>\r\n                                    <FormControl error={menuError && individualItemPrice === \"\" && familyItemPrice === \"\"} margin='dense' variant=\"outlined\">\r\n                                        <OutlinedInput name=\"name\" id=\"individualprice\" className=\"formTextInput\"\r\n                                            type=\"number\"\r\n                                            value={individualItemPrice}\r\n                                            startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\r\n                                            onChange={(e) => {if(e.target.value >= 0) {setIndividualItemPrice(e.target.value)}}}\r\n                                            size=\"small\"\r\n                                        /> \r\n                                    </FormControl>\r\n                                    <FormControl error={menuError && individualItemPrice === \"\" && familyItemPrice === \"\"} margin='dense' variant=\"outlined\">\r\n                                        <OutlinedInput name=\"name\" id=\"familyprice\" className=\"formTextInput\"\r\n                                            type=\"number\"\r\n                                            value={familyItemPrice}\r\n                                            startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\r\n                                            onChange={(e) => {if(e.target.value >= 0) {setFamilyItemPrice(e.target.value)}}}\r\n                                            size=\"small\"\r\n                                        /> \r\n                                    </FormControl>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"priceSizeContainer\">\r\n                                <FormHelperText style={{\"margin\": \"0px 40px 20px 0px\"}}>{requiredAsterix()} At least one size must be given a price. If you do not want a particular size available for the item, please leave its price field blank.</FormHelperText>\r\n                            </div>\r\n                            {/* Item Addons */}\r\n                            <p className=\"formLabelText\" style={{\"marginTop\": \"20px\", \"marginBottom\": \"-10px\"}}>Accommodations</p>\r\n                            <div className=\"priceSizeContainer\">\r\n                                <div className=\"sizeContainer\">\r\n                                    <p className=\"formSubHeading\">Description</p>\r\n                                    {addOns.map((item,index) => {\r\n                                        \r\n                                        return(\r\n                                            <FormControl margin='dense'\r\n                                                error = \r\n                                                {   menuError && \r\n                                                    ((item.name === \"\" && item.price !== \"\") || \r\n                                                    (item.name !== \"\" && item.price === \"\"))\r\n                                                }\r\n                                            >\r\n                                                <OutlinedInput id={item.name + \"nameinput\"} name={item.name + \"nameinput\"} className=\"formTextInput\"\r\n                                                    required \r\n                                                    value={item.name}\r\n                                                    onChange={e => {\r\n                                                            let addontemp = [...addOns];\r\n                                                            addontemp[index].name = e.target.value;\r\n                                                            setAddOns(addontemp);\r\n                                                        }} \r\n                                                    size=\"small\"\r\n                                                />\r\n                                            </FormControl>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                                \r\n                                <div className=\"priceContainer\">\r\n                                    <p className=\"formSubHeading\">Price</p>\r\n                                    {addOns.map((item,index) => {\r\n                                        return(\r\n                                            <FormControl margin='dense'\r\n                                                error = \r\n                                                {   menuError && \r\n                                                    (((item.name === \"\" && item.price !== \"\") || \r\n                                                    (item.name !== \"\" && item.price === \"\")) ||\r\n                                                    (parseInt(item.price) < 0))\r\n                                                }\r\n                                            >\r\n                                                <OutlinedInput id={item.name + \"priceinput\"} name={item.name + \"priceinput\"} className=\"formTextInput\"\r\n                                                    required \r\n                                                    type=\"number\"\r\n                                                    value={item.price}\r\n                                                    startAdornment={<InputAdornment position=\"start\">+$</InputAdornment>}\r\n                                                    onChange={e => {\r\n                                                            const addontemp = [...addOns];\r\n                                                            addontemp[index].price = e.target.value;\r\n                                                            setAddOns(addontemp);\r\n                                                        }} \r\n                                                    size=\"small\"\r\n                                                />\r\n                                            </FormControl>\r\n                                        )\r\n                                    })}\r\n                                    \r\n                                </div>\r\n                                <div className=\"removeAddOnContainer\">\r\n                                    {addOns.map((item,index) => {\r\n                                        return(\r\n                                                <IconButton\r\n                                                    className=\"removeAddOnButton\"\r\n                                                    onClick={() => {\r\n                                                        // remove item from addOns\r\n                                                        const addontemp = [...addOns];\r\n                                                        addontemp.splice(index, 1);\r\n                                                        setAddOns(addontemp);\r\n                                                    }}\r\n                                                >\r\n                                                    <ClearIcon/>\r\n                                                </IconButton> \r\n                                        )\r\n                                    })}\r\n                                   \r\n                                </div>\r\n                                \r\n                            </div>\r\n                            <div className=\"priceSizeContainer\">\r\n                                <div className=\"sizeContainer\">\r\n                                    <Button\r\n                                        className=\"addAddOnButton\"\r\n                                        onClick={() => {\r\n                                            const addontemp = [...addOns];\r\n                                            addontemp.push({name: \"\", price: \"\"});\r\n                                            setAddOns(addontemp);\r\n                                        }}\r\n                                    >\r\n                                        <AddCircleIcon className=\"menuAddButtonIcon\" />\r\n                                        Add Accommodation\r\n                                    </Button>\r\n                                </div>\r\n                                <div className=\"priceContainer\"> </div>\r\n                                <div className=\"removeAddOnContainer\"></div>\r\n                            </div>\r\n                            {/* Item Dietary Information */}\r\n                            <FormControl fullWidth className=\"formItem\" margin='dense' variant=\"outlined\">\r\n                                <p className=\"formLabelText\">Dietary Info</p>\r\n                                <FormGroup row>\r\n                                    <FormControlLabel\r\n                                        control={\r\n                                            <Checkbox \r\n                                                checked={vegan} \r\n                                                style ={{\r\n                                                    color: \"#747474\",\r\n                                                }}\r\n                                                onChange={(e) => setVegan(e.target.checked)} \r\n                                                name=\"vegan\" \r\n                                            />\r\n                                        }\r\n                                        label=\"Vegan\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={\r\n                                            <Checkbox \r\n                                                checked={vegetarian} \r\n                                                style ={{\r\n                                                    color: \"#747474\",\r\n                                                }}\r\n                                                onChange={(e) => setVegetarian(e.target.checked)} \r\n                                                name=\"vegetarian\" \r\n                                            />\r\n                                        }\r\n                                        label=\"Vegetarian\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={\r\n                                            <Checkbox \r\n                                                checked={glutenFree} \r\n                                                style ={{\r\n                                                    color: \"#747474\",\r\n                                                }}\r\n                                                onChange={(e) => setGlutenFree(e.target.checked)} \r\n                                                name=\"glutenFree\" \r\n                                            />\r\n                                        }\r\n                                        label=\"Gluten Free\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={\r\n                                            <Checkbox \r\n                                                checked={containsDairy} \r\n                                                style ={{\r\n                                                    color: \"#747474\",\r\n                                                }}\r\n                                                onChange={(e) => setContainsDairy(e.target.checked)} \r\n                                                name=\"containsDairy\" \r\n                                            />\r\n                                        }\r\n                                        label=\"Contains Dairy\"\r\n                                    />\r\n                                </FormGroup>\r\n                            </FormControl>\r\n                            \r\n                            {/* Item Description */}\r\n                            <p className=\"formLabelText\">Description {requiredAsterix()}</p>\r\n                            <FormControl fullWidth className=\"formLongItem\" margin='dense'\r\n                                error={menuError && itemDescription === \"\"}\r\n                            >\r\n                                <OutlinedInput name=\"description\" id=\"description\" className=\"formLongInput\" \r\n                                    value={itemDescription}\r\n                                    multiline={true}\r\n                                    rows={3}\r\n                                    required\r\n                                    onChange={(e) => setItemDescription(e.target.value)}\r\n                                    size=\"small\"\r\n                                />\r\n                            </FormControl>\r\n                        </div>\r\n                        <div className=\"modalFooter\">\r\n                            <Button className=\"cancelButton\" onClick={() => setShowModal(\"\")}>\r\n                                Close\r\n                            </Button>\r\n                            <Button className=\"menuAddButton\" onClick={() => handleSubmit()}>\r\n                                Save\r\n                            </Button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\AddMenuItemModal.js",["240","241"],"/**\r\n  * This file contains the modal for adding an item into the menu. It's split\r\n  * into sections for each of the form items, including name, image url, category,\r\n  * prices, accommodations, and description. It uses MaterialUI's form control\r\n  * to create the form. \r\n  * The required fields are name, image url, category, description, and price.\r\n  * Price is considered to be filled out if one of the prices is complete (so\r\n  * one of the prices can be empty).\r\n  * Also, a given accommodations is considered to be filled out if it has\r\n  * 0 or 2 fields completed. If 0, it is removed, if 1, it is considered incomplete.\r\n  * Errors are thrown under the following cases:\r\n  *     1. one of the required fields is empty\r\n  *     2. one of the accommodations fields has one of the fields filled out\r\n  *     3. none of the prices are filled out\r\n  * A new accommodation field can be added if both fields of the previous one\r\n  * has values, if not it will not be added.\r\n  * Disclaimer: This file seems really long (it is), but it isn't very hard to\r\n  * understand. A lot of the bulk comes from Material UI's form control handling\r\n  * and general HTML property tags.\r\n  *\r\n  * @summary    Renders modal for adding an item to the menu\r\n  * @author     PatrickBrown1\r\n  */\r\n\r\nimport React, { useState, useReducer } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { Modal, FormControl, Checkbox, FormControlLabel, FormGroup, OutlinedInput, Select, MenuItem, InputAdornment, FormHelperText, Snackbar, IconButton } from '@material-ui/core';\r\nimport '../css/AddMenuItemModal.css';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport {getJWT, logout} from '../util/Auth';\r\n\r\nconst config = require('../config');\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\n\r\n\r\n// renders a red asterix that indicates a required field\r\nfunction requiredAsterix(){\r\n    return (\r\n        <p className=\"requiredAsterix\">*</p>\r\n    );\r\n}\r\n\r\nexport default function AddMenuItemModal (props) {\r\n    const showModal = props.addItemModal;\r\n    const setShowModal = props.setAddItemModal;\r\n    const setLoaded = props.setLoaded;\r\n\r\n    // form states\r\n    const [itemName, setItemName] = useState(\"\")\r\n    const [itemCategory, setItemCategory] = useState(\"\")\r\n    const [individualItemPrice, setIndividualItemPrice] = useState(\"\")\r\n    const [familyItemPrice, setFamilyItemPrice] = useState(\"\")\r\n    const [itemImageURL, setItemImageURL] = useState(\"\")\r\n    const [itemDescription, setItemDescription] = useState(\"\")\r\n    /*  addOns is an array of objects \r\n    [\r\n        {\r\n            name: \"\",\r\n            price: \"\"\r\n        }\r\n    ]\r\n    */\r\n    const [addOns, setAddOns] = useState([]);\r\n    // dietary info\r\n    const [vegan, setVegan] = useState(false);\r\n    const [vegetarian, setVegetarian] = useState(false);\r\n    const [glutenFree, setGlutenFree] = useState(false);\r\n    const [containsDairy, setContainsDairy] = useState(false);\r\n\r\n    const [menuError, setMenuError] = useState(false);\r\n    const [errorSnackbar, setErrorSnackbar] = useReducer(\r\n        (state, newState) => ({...state, ...newState}),\r\n        {visible: false, message: \"\"}\r\n    )  \r\n    \r\n    /**\r\n     * Handles form submit for adding an item. This includes form validation,\r\n     * error handling, and making a call to the /item/insert route.\r\n     */\r\n    const handleSubmit = async () => {\r\n        // validate basic input\r\n        if(itemName === \"\" || \r\n            itemCategory === \"\" || \r\n            (individualItemPrice === \"\" && familyItemPrice === \"\") || \r\n            itemImageURL === \"\" || itemDescription === \"\"\r\n        ){\r\n            setMenuError(true);\r\n            setErrorSnackbar({visible: true, message: \"There was an error in the form\"});\r\n            return;\r\n        }\r\n        // validate addons\r\n        let failAddOn = false;\r\n        addOns.forEach(item => {\r\n            if((item.price === \"\" && item.name !== \"\") || (item.price !== \"\" && item.name === \"\")){\r\n                // error\r\n                failAddOn = true;\r\n                setMenuError(true);\r\n                setErrorSnackbar({visible: true, message: \"One or more addons weren't properly filled in\"});\r\n                return;\r\n            }\r\n            else if(item.name !== \"\" && parseFloat(item.price) < 0){\r\n                //negative number\r\n                failAddOn = true;\r\n                setMenuError(true);\r\n                setErrorSnackbar({visible: true, message: \"Negative prices are not allowed in the menu\"});\r\n                return;\r\n            }\r\n        })\r\n        if(failAddOn){\r\n            setMenuError(true);\r\n            setErrorSnackbar({visible: true, message: \"One or more addons weren't properly filled in\"});\r\n            return;\r\n        }\r\n\r\n        // format data into item object\r\n        let pricesObj = {};\r\n        if(individualItemPrice !== \"\"){\r\n            pricesObj.Individual = individualItemPrice;\r\n        }\r\n        if(familyItemPrice !== \"\"){\r\n            pricesObj.Family = familyItemPrice;\r\n        }\r\n        let accommodations = [];\r\n        addOns.forEach(addon => {\r\n            if(addon.name !== \"\" && addon.price !== \"\"){\r\n                accommodations.push({\"Description\": addon.name, \"Price\": addon.price});\r\n            }\r\n        })\r\n        const dietaryInfo = {\r\n            \"vegan\": vegan,\r\n            \"vegetarian\": vegetarian,\r\n            \"glutenFree\": glutenFree,\r\n            \"containsDairy\": containsDairy,\r\n        };\r\n        const itemObject = {\r\n            \"Name\": itemName,\r\n            \"pictureURL\": itemImageURL,\r\n            \"Description\": itemDescription,\r\n            \"Category\": itemCategory,\r\n            \"Prices\": pricesObj,\r\n            \"isFeatured\": false,\r\n            \"isCompleted\": false,\r\n            \"Accommodations\": accommodations,\r\n            \"dietaryInfo\": dietaryInfo,\r\n            \"token\": getJWT()\r\n        }\r\n        // push to database\r\n        await fetch(`${BACKEND_URL}item/insert`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(itemObject)\r\n        }).then(res => {\r\n            if(res.ok){\r\n                props.setItemAddedSuccess(true);\r\n                //refetch\r\n                setLoaded(false);\r\n                setShowModal(false);\r\n            }\r\n            // invalid admin token\r\n            else if (res.status === 401){\r\n                logout();\r\n                // refresh will cause a redirect to login page\r\n                window.location.reload();\r\n                return;\r\n            }\r\n            else{\r\n                alert(\"There was an error. Recheck your inputs and try again\");\r\n            }\r\n        })\r\n        \r\n    }\r\n    return (\r\n        <>\r\n            {/* Failure Snackbar */}\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n                open={errorSnackbar.visible}\r\n                autoHideDuration={5000}\r\n                onClose={() => setErrorSnackbar({visible: false, message: \"\"})}\r\n                message={<span id=\"message-id\">{errorSnackbar.message}</span>}\r\n            />\r\n\r\n            <Modal open={showModal} onClose={() => setShowModal(false)} \r\n                className=\"modalContainer\"\r\n            >\r\n                <div className=\"modalBackground\">\r\n                    {/* <div className=\"modalHeader\">\r\n                        <Button onClick={() =>setShowModal(false)}>X</Button>\r\n                    </div> */}\r\n                    <div className=\"headerContainer\">\r\n                        <IconButton\r\n                            className=\"closeModalButton\"\r\n                            onClick={() => setShowModal(\"\")}\r\n                        >\r\n                            <ClearIcon/>\r\n                        </IconButton>\r\n                    </div>\r\n                    <form autocomplete=\"off\">\r\n                        <div className=\"modalBody\">\r\n                            {/* Item Name */}\r\n                            <p className=\"formLabelText\">Name {requiredAsterix()}</p>\r\n                            <FormControl fullWidth error={menuError && itemName === \"\"} className=\"formItem\" margin='dense'>\r\n                                <OutlinedInput name=\"name\" id=\"name\" className=\"formTextInput\"\r\n                                    required \r\n                                    value={itemName}\r\n                                    onChange={(e) => setItemName(e.target.value)}\r\n                                    size=\"small\"\r\n                                />\r\n                            </FormControl>\r\n                            {/* Item Image URL */}\r\n                            <p className=\"formLabelText\">Image Link {requiredAsterix()}</p>\r\n                            <FormControl fullWidth error={menuError && itemImageURL === \"\"} className=\"formItem\" margin='dense'>\r\n                                <OutlinedInput name=\"imageURL\" id=\"imageURL\" className=\"formTextInput\"\r\n                                    required \r\n                                    value={itemImageURL}\r\n                                    onChange={(e) => setItemImageURL(e.target.value)}\r\n                                    size=\"small\"\r\n                                />\r\n                            </FormControl>\r\n\r\n                            {/* Item Category */}\r\n                            <p className=\"formLabelText\">Category Name {requiredAsterix()}</p>\r\n                            <FormControl fullWidth error={menuError && itemCategory === \"\"} className=\"formItem\" margin='dense' variant=\"outlined\">\r\n                                <Select name=\"category\" type=\"text\" id=\"category\" className=\"formSelectInput\" required \r\n                                    placeholder=\"\"\r\n                                    value={itemCategory}\r\n                                    onChange={(e) => setItemCategory(e.target.value)}\r\n                                    size=\"small\"\r\n                                    displayEmpty\r\n                                >\r\n                                    <MenuItem value=\"Appetizers\">Appetizers</MenuItem>\r\n                                    <MenuItem value=\"Main Dishes\">Main Dishes</MenuItem>\r\n                                    <MenuItem value=\"Sides\">Sides</MenuItem>\r\n                                    <MenuItem value=\"Drinks\">Drinks</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                            {/* Item Sizing and Price*/}\r\n                            <div className=\"priceSizeContainer\">\r\n                                <div className=\"sizeContainer\">\r\n                                    <p className=\"formLabelText\">Size</p>\r\n                                    <FormControl margin='dense'>\r\n                                        <OutlinedInput name=\"name\" id=\"individuallabel\" className=\"formTextInput\"\r\n                                            required \r\n                                            value={\"Individual\"}\r\n                                            size=\"small\"\r\n                                            disabled\r\n                                        />\r\n                                    </FormControl>\r\n                                    <FormControl margin='dense'>\r\n                                        <OutlinedInput name=\"name\" id=\"familylabel\" className=\"formTextInput\"\r\n                                            required \r\n                                            value={\"Family\"}\r\n                                            size=\"small\"\r\n                                            disabled\r\n                                        />\r\n                                    </FormControl>\r\n                                </div>\r\n                                <div className=\"priceContainer\">\r\n                                    <p className=\"formLabelText\">Price</p>\r\n                                    <FormControl error={menuError && ((individualItemPrice === \"\" && familyItemPrice === \"\") || (parseInt(individualItemPrice) < 0))} margin='dense' variant=\"outlined\">\r\n                                        <OutlinedInput name=\"name\" id=\"individualprice\" className=\"formTextInput\"\r\n                                            type=\"number\"\r\n                                            value={individualItemPrice}\r\n                                            startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\r\n                                            onChange={(e) => {if(e.target.value >= 0) {setIndividualItemPrice(e.target.value)}}}\r\n                                            size=\"small\"\r\n                                        /> \r\n                                    </FormControl>\r\n                                    <FormControl error={menuError && ((individualItemPrice === \"\" && familyItemPrice === \"\") || (parseInt(individualItemPrice) < 0))} margin='dense' variant=\"outlined\">\r\n                                        <OutlinedInput name=\"name\" id=\"familyprice\" className=\"formTextInput\"\r\n                                            type=\"number\"\r\n                                            value={familyItemPrice}\r\n                                            startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\r\n                                            onChange={(e) => {if(e.target.value >= 0) {setFamilyItemPrice(e.target.value)}}}\r\n                                            size=\"small\"\r\n                                        /> \r\n                                    </FormControl>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"priceSizeContainer\">\r\n                                <FormHelperText style={{\"margin\": \"0px 40px 20px 0px\"}}>{requiredAsterix()} At least one size must be given a price. If you do not want a particular size available for the item, please leave its price field blank.</FormHelperText>\r\n                            </div>\r\n                            {/* Item Addons */}\r\n                            <p className=\"formLabelText\" style={{\"marginTop\": \"20px\", \"marginBottom\": \"-10px\"}}>Accommodations</p>\r\n                            <div className=\"priceSizeContainer\">\r\n                                <div className=\"sizeContainer\">\r\n                                    <p className=\"formSubHeading\">Description</p>\r\n                                    {addOns.map((item,index) => {\r\n                                        \r\n                                        return(\r\n                                            <FormControl margin='dense'\r\n                                                error = \r\n                                                {   menuError && \r\n                                                    ((item.name === \"\" && item.price !== \"\") || \r\n                                                    (item.name !== \"\" && item.price === \"\"))\r\n                                                }\r\n                                            >\r\n                                                <OutlinedInput id={item.name + \"nameinput\"} name={item.name + \"nameinput\"} className=\"formTextInput\"\r\n                                                    required \r\n                                                    value={item.name}\r\n                                                    onChange={e => {\r\n                                                            let addontemp = [...addOns];\r\n                                                            addontemp[index].name = e.target.value;\r\n                                                            setAddOns(addontemp);\r\n                                                        }} \r\n                                                    size=\"small\"\r\n                                                />\r\n                                            </FormControl>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                                \r\n                                <div className=\"priceContainer\">\r\n                                    <p className=\"formSubHeading\">Price</p>\r\n                                    {addOns.map((item,index) => {\r\n                                        return(\r\n                                            <FormControl margin='dense'\r\n                                                error = \r\n                                                {   menuError && ( \r\n                                                    ((item.name === \"\" && item.price !== \"\") || \r\n                                                    (item.name !== \"\" && item.price === \"\")) ||\r\n                                                    (parseInt(item.price) < 0))\r\n                                                }\r\n                                            >\r\n                                                <OutlinedInput id={item.name + \"priceinput\"} name={item.name + \"priceinput\"} className=\"formTextInput\"\r\n                                                    required \r\n                                                    type=\"number\"\r\n                                                    value={item.price}\r\n                                                    startAdornment={<InputAdornment position=\"start\">+$</InputAdornment>}\r\n                                                    onChange={e => {\r\n                                                            const addontemp = [...addOns];\r\n                                                            addontemp[index].price = e.target.value;\r\n                                                            setAddOns(addontemp);\r\n                                                        }} \r\n                                                    size=\"small\"\r\n                                                />\r\n                                            </FormControl>\r\n                                        )\r\n                                    })}\r\n                                    \r\n                                </div>\r\n                                <div className=\"removeAddOnContainer\">\r\n                                    {addOns.map((item,index) => {\r\n                                        return(\r\n                                            \r\n                                                <IconButton\r\n                                                    className=\"removeAddOnButton\"\r\n                                                    onClick={() => {\r\n                                                        // remove item from addOns\r\n                                                        const addontemp = [...addOns];\r\n                                                        addontemp.splice(index, 1);\r\n                                                        setAddOns(addontemp);\r\n                                                    }}\r\n                                                >\r\n                                                    <ClearIcon/>\r\n                                                </IconButton> \r\n                                        )\r\n                                    })}\r\n                                   \r\n                                </div>\r\n                                \r\n                            </div>\r\n                            <div className=\"priceSizeContainer\">\r\n                                <div className=\"sizeContainer\">\r\n                                    <Button\r\n                                        className=\"addAddOnButton\"\r\n                                        onClick={() => {\r\n                                            const addontemp = [...addOns];\r\n                                            addontemp.push({name: \"\", price: \"\"});\r\n                                            setAddOns(addontemp);\r\n                                        }}\r\n                                    >\r\n                                        <AddCircleIcon className=\"menuAddButtonIcon\" />\r\n                                        Add Accommodation\r\n                                    </Button>\r\n                                </div>\r\n                                <div className=\"priceContainer\"> </div>\r\n                                <div className=\"removeAddOnContainer\"></div>\r\n                            </div>\r\n                            \r\n                            {/* Item Dietary Information */}\r\n                            <FormControl fullWidth className=\"formItem\" margin='dense' variant=\"outlined\">\r\n                                <p className=\"formLabelText\">Dietary Info</p>\r\n                                <FormGroup row>\r\n                                    <FormControlLabel\r\n                                        control={\r\n                                            <Checkbox \r\n                                                checked={vegan} \r\n                                                style ={{\r\n                                                    color: \"#747474\",\r\n                                                }}\r\n                                                onChange={(e) => setVegan(e.target.checked)} \r\n                                                name=\"vegan\" \r\n                                            />\r\n                                        }\r\n                                        label=\"Vegan\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={\r\n                                            <Checkbox \r\n                                                checked={vegetarian} \r\n                                                style ={{\r\n                                                    color: \"#747474\",\r\n                                                }}\r\n                                                onChange={(e) => setVegetarian(e.target.checked)} \r\n                                                name=\"vegetarian\" \r\n                                            />\r\n                                        }\r\n                                        label=\"Vegetarian\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={\r\n                                            <Checkbox \r\n                                                checked={glutenFree} \r\n                                                style ={{\r\n                                                    color: \"#747474\",\r\n                                                }}\r\n                                                onChange={(e) => setGlutenFree(e.target.checked)} \r\n                                                name=\"glutenFree\" \r\n                                            />\r\n                                        }\r\n                                        label=\"Gluten Free\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={\r\n                                            <Checkbox \r\n                                                checked={containsDairy} \r\n                                                style ={{\r\n                                                    color: \"#747474\",\r\n                                                }}\r\n                                                onChange={(e) => setContainsDairy(e.target.checked)} \r\n                                                name=\"containsDairy\" \r\n                                            />\r\n                                        }\r\n                                        label=\"Contains Dairy\"\r\n                                    />\r\n                                </FormGroup>\r\n                            </FormControl>\r\n                            \r\n                            {/* Item Description */}\r\n                            <p className=\"formLabelText\">Description {requiredAsterix()}</p>\r\n                            <FormControl fullWidth className=\"formLongItem\" margin='dense' error={menuError && itemDescription === \"\"}>\r\n                                <OutlinedInput name=\"description\" id=\"description\" className=\"formLongInput\" \r\n                                    value={itemDescription}\r\n                                    multiline={true}\r\n                                    rows={3}\r\n                                    required\r\n                                    onChange={(e) => setItemDescription(e.target.value)}\r\n                                    size=\"small\"\r\n                                />\r\n                            </FormControl>\r\n                        </div>\r\n                        <div className=\"modalFooter\">\r\n                            <Button className=\"cancelButton\" onClick={() => setShowModal(false)}>\r\n                                Close\r\n                            </Button>\r\n                            <Button className=\"menuAddButton\" onClick={() => handleSubmit()}>\r\n                                <AddCircleIcon className=\"menuAddButtonIcon\" />\r\n                                Add Item\r\n                            </Button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\ChangeEmailScreen.js",["242"],"/**\r\n * This renders the \"change primary email\" portion of\r\n * the \"emails\" tab under the \"Admin\" page.\r\n * \r\n * @summary     Handles changing primary email functionality.\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {getJWT, logout} from '../util/Auth';\r\n\r\nimport '../css/ChangeEmailScreen.css';\r\n\r\nconst config = require('../config');\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    span: {\r\n      \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n        borderColor: \"black\"\r\n      },\r\n      \"& .MuiInputLabel-outlined.Mui-focused\": {\r\n        color: \"black\"\r\n      }\r\n    }\r\n}));\r\n\r\nexport default function ChangeEmailScreen (props) {\r\n    const classes = useStyles();\r\n    const [inputEmail, setPrimaryEmail] = useState(\"\");\r\n    const [secondaryEmails, setSecondaryEmails] = useState([]);\r\n    const [primaryEmail, updateStatePrimaryEmail] = useState(\"\")\r\n    const [inputError, setInputError] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    // catch enter rerendeing entire admin page\r\n    const handleKeyDown = (event) => {\r\n        if (event.key === 'Enter') {\r\n            handleFormSubmit(inputEmail, setInputError, setOpen)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setSecondaryEmails(props.emails);\r\n        updateStatePrimaryEmail(props.primaryEmail);\r\n    }, [props])\r\n\r\n    /**\r\n     * Updates the primary email in the database.\r\n     * \r\n     * @param {string} email - Primary email to update\r\n     * @param {function} setInputError - Error handling \r\n     * @param {function} setOpen - Snackbox rendering \r\n     */\r\n    async function handleFormSubmit(email, setInputError, setOpen) {\r\n        // make sure it is not a secondary email\r\n        if(secondaryEmails.includes(email)) {\r\n            setInputError(true);\r\n            setErrorMessage(\"This email is already listed as a secondary email.\");  \r\n            return;\r\n        }\r\n\r\n        // check for empty string\r\n        if(email.length === 0) {\r\n            setInputError(true);\r\n            setErrorMessage(\"Enter a valid email address.\");    \r\n            return;\r\n        }\r\n        \r\n        // validate to make sure email is an email\r\n        if (email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\r\n            setInputError(true);\r\n            setErrorMessage(\"Enter a valid email address.\");\r\n            return;\r\n        }\r\n\r\n        // change the primary email backend call\r\n        await fetch(`${BACKEND_URL}email/changePrimary`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                email: email,\r\n                \"token\": getJWT()\r\n            })\r\n        }).then(res => {\r\n            if(res.ok){\r\n                setInputError(false);\r\n                setOpen(true);\r\n                setPrimaryEmail(\"\");\r\n                setErrorMessage(\"\");\r\n                props.updatePrimaryEmail(email);\r\n            }\r\n            // invalid admin token\r\n            else if(res.status === 401){\r\n                logout();\r\n                // refresh will cause a redirect to login page\r\n                window.location.reload();\r\n                return;\r\n            }\r\n            else {\r\n                setErrorMessage(\"This is currently your primary email.\");  \r\n                setInputError(true);\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div> \r\n            <br />\r\n            <h1 className=\"emailHeading\">Change Primary Email</h1>\r\n            <p className=\"emailDescription\">Order confirmations and customer inquiries will be sent to this email.</p>\r\n\r\n            <span>\r\n                <TextField id=\"primary-email-disabled\" \r\n                    size=\"small\"\r\n                    value={primaryEmail} \r\n                    type=\"email\" \r\n                    variant=\"outlined\"\r\n                    disabled={true}\r\n                />\r\n            </span>\r\n\r\n            <br />\r\n            <br />\r\n                <span className={classes.span}>\r\n                    <TextField id=\"email-input\" \r\n                        size=\"small\"\r\n                        error={inputError} \r\n                        value={inputEmail} \r\n                        type=\"email\" \r\n                        id=\"emailUpdateInput\" \r\n                        onChange={(e) => setPrimaryEmail(e.target.value)} \r\n                        onKeyDown={(e) => handleKeyDown(e)}\r\n                        label=\"Primary Email\" \r\n                        variant=\"outlined\"\r\n                        helperText={errorMessage}\r\n                        className={classes.form}\r\n                    />\r\n                </span>\r\n            <br />\r\n            <br />\r\n\r\n            <Button id=\"submit\" \r\n                className=\"emailUpdateButton\" \r\n                onClick={() => handleFormSubmit(inputEmail, setInputError, setOpen)}\r\n            >\r\n                Update\r\n            </Button>\r\n\r\n            <Snackbar open={open} autoHideDuration={4000} onClose={(e) => setOpen(false)}\r\n                message=\"Email updated successfully!\">\r\n            </Snackbar>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\ChangeSecondaryEmailScreen.js",["243"],"/**\r\n * This file renders the information related to the secondary emails.\r\n * It displays all the current secondary emails that that admin \r\n * user has authorized.\r\n * It makes two calls to the backend:\r\n * \r\n *  1) POST call to add secondary email\r\n *  2) DELETE call to remove a secondary email\r\n * \r\n * @summary     Handles functionality of secondary emails on Admin page.\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlusCircle, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {getJWT, logout} from '../util/Auth';\r\n\r\nimport '../css/ChangeEmailScreen.css';\r\n\r\nconst config = require('../config');\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\n// styling for the MUI form\r\nconst useStyles = makeStyles((theme) => ({\r\n    span: {\r\n      \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n        borderColor: \"black\"\r\n      },\r\n      \"& .MuiInputLabel-outlined.Mui-focused\": {\r\n        color: \"black\"\r\n      }\r\n    }\r\n}));\r\n\r\n/**\r\n * Renders the node containing the email addresses.\r\n * \r\n * @param {string} email - Secondary email\r\n * @param {array} secondaryEmails - List of all current secondary emails\r\n * @param {function} setSecondaryEmails - Function to update secondary emails list\r\n * @param {function} updateSecondaryEmails - Parent function to update parent state \r\n * @returns {component} - Renders the node with email\r\n */\r\nconst renderNode = (email, secondaryEmails, setSecondaryEmails, updateSecondaryEmails) => {\r\n    // delete the email from the database\r\n    const deleteItem = () => {\r\n        fetch(`${BACKEND_URL}email/removeSecondary`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                email: email,\r\n                \"token\": getJWT()\r\n            })\r\n        })\r\n        .then(res => {\r\n            if(res.ok) {\r\n                // update the array in the current class\r\n                // and in the parent class\r\n                const arr = secondaryEmails.filter(a => a !== email);\r\n                setSecondaryEmails(arr);\r\n                updateSecondaryEmails(arr);\r\n            }\r\n            // invalid admin token\r\n            else if(res.status === 401){\r\n                logout();\r\n                // refresh will cause a redirect to login page\r\n                window.location.reload();\r\n                return;\r\n            }\r\n        })  \r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <p className=\"secondary-email-name\">{email}</p>\r\n            <FontAwesomeIcon icon={faTrash} className=\"trash-icon\" \r\n                onClick={(e) => deleteItem()}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n// styling used for the plus icon\r\nconst plusIcon = {\r\n    color: 'white',\r\n    marginRight: 'calc(0.5vw)'\r\n}\r\n\r\nexport default function ChangeSecondaryEmailScreen (props) {\r\n    const classes = useStyles();\r\n    const updateSecondaryEmails = props.updateSecondaryEmails;\r\n    const [secondaryEmails, setSecondaryEmails] = useState([]);\r\n    const [primaryEmail, setPrimaryEmail] = useState(\"\");\r\n    const [addSecondaryEmail, setAddSecondaryEmail] = useState(\"\");\r\n    const [inputError, setInputError] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    // allows user to press 'enter' to submit\r\n    const handleKeyDown = (event) => {\r\n        if (event.key === 'Enter') {\r\n            addEmail(addSecondaryEmail);    \r\n        }\r\n    }\r\n\r\n    // loads all emails from the parent class\r\n    useEffect(() => {\r\n        setSecondaryEmails(props.emails);\r\n        setPrimaryEmail(props.primaryEmail);\r\n    }, [props])\r\n\r\n    /**\r\n     * Adds the email to the database.\r\n     * \r\n     * @param {string} addSecondaryEmail - Email to add\r\n     */\r\n    const addEmail = (addSecondaryEmail) => {\r\n        // make sure email is not a primary email \r\n        if(addSecondaryEmail === primaryEmail) {\r\n            setErrorMessage(\"This is currently your primary email.\"); \r\n            setInputError(true);\r\n            return;\r\n        }\r\n\r\n        // make sure the email follows proper format\r\n        if ((addSecondaryEmail && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(addSecondaryEmail)) || addSecondaryEmail.length === 0) {\r\n            setErrorMessage(\"Enter a valid email address.\");\r\n            setInputError(true);\r\n            return;\r\n        }\r\n\r\n        fetch(`${BACKEND_URL}email/addSecondary`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                email: addSecondaryEmail,\r\n                \"token\": getJWT()\r\n            })\r\n        })\r\n        .then(res => {\r\n            if(res.ok) {\r\n                // update the parent's array and the child's array\r\n                const getNewEmail = addSecondaryEmail;\r\n                const arr = secondaryEmails.concat(getNewEmail)\r\n                setSecondaryEmails(arr);\r\n                updateSecondaryEmails(arr);\r\n                // clear the textfield\r\n                setAddSecondaryEmail(\"\");\r\n                // clear any error handling\r\n                setInputError(false);\r\n                setErrorMessage(\"\");\r\n            }\r\n            // invalid admin token\r\n            else if(res.status === 401){\r\n                logout();\r\n                // refresh will cause a redirect to login page\r\n                window.location.reload();\r\n                return;\r\n            } else {\r\n                // error handling\r\n                setErrorMessage(\"This email is already listed as a secondary email.\"); \r\n                setInputError(true);\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"secondary-emails-container\"> \r\n            <h1 className=\"emailHeading\">Change Secondary Email</h1>\r\n            <p className=\"emailDescription\">Order confirmations will be sent to this email.</p>\r\n            \r\n            <div className=\"secondary-emails\">\r\n                {secondaryEmails.map((secondary, ind) => (\r\n                    renderNode(secondary, secondaryEmails, setSecondaryEmails, updateSecondaryEmails)\r\n                ))}\r\n            </div>\r\n            \r\n            {/* The textfield */}\r\n            <div className=\"add-secondary-email\">\r\n                <span className={classes.span}>\r\n                    <TextField id=\"email-input\" \r\n                        size=\"small\"\r\n                        error={inputError} \r\n                        value={addSecondaryEmail} \r\n                        type=\"email\" \r\n                        onChange={(e) => setAddSecondaryEmail(e.target.value)} \r\n                        onKeyDown={(e) => handleKeyDown(e)}\r\n                        label=\"Add Secondary Email\" \r\n                        variant=\"outlined\"\r\n                        helperText={errorMessage}\r\n                        id=\"secondaryEmail\"\r\n                    />\r\n                </span>\r\n\r\n                <Button id=\"submit\" className=\"emailAddButton\" \r\n                    onClick={(e) => addEmail(addSecondaryEmail)}\r\n                >   \r\n                    {/* The \"add\" icon */}\r\n                    <FontAwesomeIcon icon={faPlusCircle} style={plusIcon} />\r\n                        Add\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuFilter.js",["244","245"],"/**\r\n * Component that groups all filter buttons together. Responsible for sending \r\n * the relevant props to individual buttons.\r\n * \r\n * @summary   Component that groups all filter buttons.\r\n * @author    Navid Boloorian\r\n */\r\n\r\nimport React, { Component} from 'react';\r\nimport MenuFilterButton from './MenuFilterButton';\r\nimport \"../css/MenuFilter.css\";\r\n\r\nconst MenuFilter = ( {foodCategories, changeVisibleCategories, toggledFilter, setToggledFilter} ) => {\r\n    return (\r\n      <div className=\"menu-filter\">\r\n        {foodCategories.map((categoryName, key) => (\r\n          // generates filter buttons based on categories\r\n          <MenuFilterButton toggledFilter={toggledFilter} setToggledFilter={setToggledFilter} categoryName={categoryName} key={key} changeVisibleCategories={changeVisibleCategories()} />\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  export default MenuFilter;","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuItems.js",["246"],"/**\r\n * Groups MenuItemCategory components for formatting purposes. Renders \r\n * categories based off of what is being displayed with filters/states. \r\n * Simplifies passing of props as it centralizes the components.\r\n * \r\n * @summary   Grouping of MenuItemCategory components.\r\n * @author    Navid Boloorian\r\n */\r\n\r\nimport React from 'react';\r\nimport MenuItemCategory from './MenuItemCategory';\r\nimport '../css/MenuItems.css';\r\n\r\nconst MenuItems = ({ foodCategories, processForm, popupVisible, popupValues, togglePopup }) => {\r\n\r\n  return (\r\n\r\n      <div className=\"menu-items\">\r\n        {/** generates categories in the menu */}\r\n        {foodCategories.map((categoryName, key) => {\r\n          return <MenuItemCategory key={key} categoryName={categoryName} key={key} processForm={processForm} popupVisible={popupVisible} popupValues={popupValues} togglePopup={togglePopup}/>\r\n        })}\r\n      </div>\r\n\r\n  )\r\n}\r\n  \r\n  export default MenuItems;","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\OrdersTable.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuFilterButton.js",["247"],"/**\r\n * Individual buttons that handle toggle the display of sections onclick. \r\n * Toggling is based on props so that they dynamically change.\r\n * \r\n * @summary   Individual buttons that toggle the display of sections.\r\n * @author    Navid Boloorian\r\n */\r\n\r\nimport React from 'react';\r\nimport '../css/MenuFilterButton.css';\r\n\r\nconst MenuFilterButton = ( {categoryName, changeVisibleCategories, toggledFilter, setToggledFilter} ) => {\r\n\r\n    /**\r\n     * Function that groups the filter toggling state calls.\r\n     */\r\n    function updateFilters() {\r\n      changeVisibleCategories(categoryName);\r\n      setToggledFilter(categoryName);\r\n    }\r\n\r\n    // logic to check whether or not the filter button should be highlighted\r\n    let filterMatch = (categoryName === toggledFilter) && (categoryName != \"Whole Menu\");\r\n\r\n    return (\r\n      <button \r\n        className={`menu-filter-button ${filterMatch ? \"toggled-filter\": \"\"}`}\r\n        onClick={() => (updateFilters())}>\r\n        {categoryName} \r\n      </button>\r\n    )\r\n  }\r\n  \r\n  export default MenuFilterButton;","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\OrdersTableColumns.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuItemCategory.js",["248","249"],"/**\r\n * Individual buttons that handle toggle the display of sections onclick. \r\n * Toggling is based on props so that they dynamically change.\r\n * \r\n * @summary   Individual buttons that toggle the display of sections.\r\n * @author    Navid Boloorian\r\n */\r\n\r\nimport React, { useState, useEffect} from 'react';\r\nimport '../css/MenuItemCategory.css';\r\nimport MenuItem from './MenuItem';\r\nimport MenuItemPopup from './MenuItemPopup';\r\n\r\nconst config = require('../config');\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\nconst MenuItemCategory = ({ categoryName, processForm, popupVisible, popupValues, togglePopup }) => {\r\n  // array that stores menu items for the current category\r\n  const [menuItems, setMenuItems] = useState(new Array());\r\n  const menuItemValues = [];\r\n\r\n  /**\r\n   * useEffect() is called to get information from database\r\n   */\r\n  useEffect(() => {\r\n    fetch(`${BACKEND_URL}item/`)\r\n    .then(async result => {\r\n      if (result.ok) {\r\n        const json = await result.json();\r\n\r\n        for(var i = 0; i < json.items.length; i++) {\r\n          // since \"featured\" isn't a category, we need to handle it differently\r\n          let isCategoryEqual = json.items[i].Category === categoryName;\r\n          let isFeatured = (categoryName === \"Featured\") && (json.items[i].isFeatured);\r\n\r\n          // is stored only if the category name is the same as json's category\r\n          if((json.items !== undefined) && (isCategoryEqual || isFeatured)) {\r\n            menuItemValues.push(json.items[i]);\r\n          }\r\n        }\r\n        setMenuItems(menuItemValues);\r\n      }\r\n      else {\r\n        console.log(\"error\");\r\n      }\r\n    })\r\n\r\n  /**\r\n   * sets dependency on categoryName, meaning that whenever categoryName \r\n   * changes, useEffect is called again. This is necessary so that when filters * are clicked data is actually reloaded\r\n   */\r\n  }, [categoryName]);\r\n  \r\n  return (\r\n      <>\r\n        {/** popup is created here, if it is visible it is rendered */}\r\n        {popupVisible ? <MenuItemPopup values={popupValues} togglePopup={togglePopup} processForm={processForm} /> : null}\r\n        <div className=\"menu-item-category\">\r\n          <h2> {categoryName} </h2>\r\n          <div className=\"menu-item-category-grid\">\r\n            {/** generate menu items based off of array */}\r\n            {menuItems.map((menuItem, key) => {\r\n              let title = menuItem.Name;\r\n              let image = menuItem.pictureURL;\r\n              let description = menuItem.Description;\r\n              // since some items will only have a family pricing option, we use individual as the default; if individual doesnt exist, use family instead\r\n              let price = (\"Individual\" in menuItem.Prices) ? menuItem.Prices.Individual : menuItem.Prices.Family\r\n              let accommodations = menuItem.Accommodations;\r\n              let priceOptions = menuItem.Prices;\r\n              let dietaryInfo = menuItem.dietaryInfo;\r\n              let id = menuItem._id;\r\n\r\n              return <MenuItem title={title} image={image} price={price} description={description} togglePopup={togglePopup} key={key} dietaryInfo={dietaryInfo} priceOptions={priceOptions} accommodations={accommodations} id={id}/>\r\n            })}\r\n          </div>\r\n        </div>\r\n      </>\r\n  )\r\n}\r\n\r\nexport default MenuItemCategory;\r\n","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\util\\OrdersTableFunctions.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuItem.js",["250","251"],"/**\r\n * Component responsible for displaying and formatting items on menu. Bases \r\n * information on props and displays them accordingly. \r\n * \r\n * @summary   Component representing items in the menu.\r\n * @author    Navid Boloorian\r\n */\r\n\r\nimport React from 'react';\r\nimport \"../css/MenuItem.css\";\r\n\r\nconst MenuItem = ( {description, image, price, title, togglePopup, dietaryInfo, priceOptions, accommodations, id} ) => {\r\n    return (\r\n      <div className=\"menu-item\" onClick={() => togglePopup(title, description, priceOptions, image, dietaryInfo, accommodations, id)}>\r\n        <div className=\"menu-image\">\r\n          <img src={image} alt=\"Item Image\"></img>\r\n        </div>\r\n        <div className=\"menu-text\">\r\n          <h3 className=\"menu-name\">{title}</h3>\r\n          <p className=\"menu-description\">{description}</p>\r\n        </div>\r\n        <div className=\"menu-absolutes\">\r\n          <p className=\"menu-price\">${price}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n  \r\nexport default MenuItem;",["252","253"],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Custom404.js",[],{"ruleId":"254","replacedBy":"255"},{"ruleId":"256","replacedBy":"257"},{"ruleId":"258","severity":1,"message":"259","line":7,"column":7,"nodeType":"260","messageId":"261","endLine":7,"endColumn":18},{"ruleId":"262","severity":1,"message":"263","line":79,"column":6,"nodeType":"264","endLine":79,"endColumn":8,"suggestions":"265"},{"ruleId":"262","severity":1,"message":"263","line":39,"column":10,"nodeType":"264","endLine":39,"endColumn":12,"suggestions":"266"},{"ruleId":"262","severity":1,"message":"263","line":77,"column":6,"nodeType":"264","endLine":77,"endColumn":8,"suggestions":"267"},{"ruleId":"268","severity":1,"message":"269","line":105,"column":35,"nodeType":"270","messageId":"271","endLine":105,"endColumn":37},{"ruleId":"258","severity":1,"message":"272","line":101,"column":12,"nodeType":"260","messageId":"261","endLine":101,"endColumn":20},{"ruleId":"258","severity":1,"message":"273","line":104,"column":22,"nodeType":"260","messageId":"261","endLine":104,"endColumn":33},{"ruleId":"258","severity":1,"message":"274","line":124,"column":24,"nodeType":"260","messageId":"261","endLine":124,"endColumn":37},{"ruleId":"268","severity":1,"message":"269","line":47,"column":27,"nodeType":"270","messageId":"271","endLine":47,"endColumn":29},{"ruleId":"268","severity":1,"message":"269","line":53,"column":33,"nodeType":"270","messageId":"271","endLine":53,"endColumn":35},{"ruleId":"268","severity":1,"message":"269","line":53,"column":31,"nodeType":"270","messageId":"271","endLine":53,"endColumn":33},{"ruleId":"258","severity":1,"message":"275","line":244,"column":12,"nodeType":"260","messageId":"261","endLine":244,"endColumn":26},{"ruleId":"258","severity":1,"message":"276","line":263,"column":13,"nodeType":"260","messageId":"261","endLine":263,"endColumn":19},{"ruleId":"258","severity":1,"message":"277","line":23,"column":12,"nodeType":"260","messageId":"261","endLine":23,"endColumn":19},{"ruleId":"262","severity":1,"message":"278","line":205,"column":8,"nodeType":"264","endLine":205,"endColumn":14,"suggestions":"279"},{"ruleId":"280","severity":1,"message":"281","line":37,"column":5,"nodeType":"282","messageId":"283","endLine":37,"endColumn":48},{"ruleId":"258","severity":1,"message":"284","line":39,"column":21,"nodeType":"260","messageId":"261","endLine":39,"endColumn":30},{"ruleId":"280","severity":1,"message":"281","line":45,"column":5,"nodeType":"282","messageId":"283","endLine":45,"endColumn":67},{"ruleId":"280","severity":1,"message":"281","line":49,"column":5,"nodeType":"282","messageId":"283","endLine":49,"endColumn":60},{"ruleId":"262","severity":1,"message":"263","line":69,"column":8,"nodeType":"264","endLine":69,"endColumn":10,"suggestions":"285"},{"ruleId":"280","severity":1,"message":"281","line":71,"column":5,"nodeType":"282","messageId":"283","endLine":71,"endColumn":110},{"ruleId":"280","severity":1,"message":"281","line":80,"column":5,"nodeType":"282","messageId":"283","endLine":80,"endColumn":75},{"ruleId":"268","severity":1,"message":"286","line":29,"column":26,"nodeType":"270","messageId":"271","endLine":29,"endColumn":28},{"ruleId":"287","severity":1,"message":"288","line":41,"column":7,"nodeType":"289","endLine":41,"endColumn":111},{"ruleId":"268","severity":1,"message":"269","line":44,"column":21,"nodeType":"270","messageId":"271","endLine":44,"endColumn":23},{"ruleId":"268","severity":1,"message":"269","line":53,"column":35,"nodeType":"270","messageId":"271","endLine":53,"endColumn":37},{"ruleId":"258","severity":1,"message":"290","line":84,"column":9,"nodeType":"260","messageId":"261","endLine":84,"endColumn":13},{"ruleId":"268","severity":1,"message":"286","line":27,"column":34,"nodeType":"270","messageId":"271","endLine":27,"endColumn":36},{"ruleId":"268","severity":1,"message":"286","line":38,"column":69,"nodeType":"270","messageId":"271","endLine":38,"endColumn":71},{"ruleId":"268","severity":1,"message":"286","line":41,"column":82,"nodeType":"270","messageId":"271","endLine":41,"endColumn":84},{"ruleId":"268","severity":1,"message":"269","line":41,"column":127,"nodeType":"270","messageId":"271","endLine":41,"endColumn":129},{"ruleId":"268","severity":1,"message":"269","line":52,"column":17,"nodeType":"270","messageId":"271","endLine":52,"endColumn":19},{"ruleId":"268","severity":1,"message":"269","line":57,"column":22,"nodeType":"270","messageId":"271","endLine":57,"endColumn":24},{"ruleId":"268","severity":1,"message":"269","line":102,"column":118,"nodeType":"270","messageId":"271","endLine":102,"endColumn":120},{"ruleId":"268","severity":1,"message":"286","line":102,"column":161,"nodeType":"270","messageId":"271","endLine":102,"endColumn":163},{"ruleId":"268","severity":1,"message":"269","line":102,"column":205,"nodeType":"270","messageId":"271","endLine":102,"endColumn":207},{"ruleId":"268","severity":1,"message":"269","line":103,"column":162,"nodeType":"270","messageId":"271","endLine":103,"endColumn":164},{"ruleId":"268","severity":1,"message":"269","line":125,"column":48,"nodeType":"270","messageId":"271","endLine":125,"endColumn":50},{"ruleId":"268","severity":1,"message":"286","line":140,"column":71,"nodeType":"270","messageId":"271","endLine":140,"endColumn":73},{"ruleId":"258","severity":1,"message":"291","line":162,"column":21,"nodeType":"260","messageId":"261","endLine":162,"endColumn":24},{"ruleId":"268","severity":1,"message":"269","line":174,"column":30,"nodeType":"270","messageId":"271","endLine":174,"endColumn":32},{"ruleId":"268","severity":1,"message":"286","line":238,"column":149,"nodeType":"270","messageId":"271","endLine":238,"endColumn":151},{"ruleId":"268","severity":1,"message":"286","line":257,"column":112,"nodeType":"270","messageId":"271","endLine":257,"endColumn":114},{"ruleId":"258","severity":1,"message":"292","line":58,"column":12,"nodeType":"260","messageId":"261","endLine":58,"endColumn":27},{"ruleId":"258","severity":1,"message":"293","line":58,"column":29,"nodeType":"260","messageId":"261","endLine":58,"endColumn":47},{"ruleId":"294","severity":1,"message":"295","line":334,"column":63,"nodeType":"296","messageId":"297","endLine":334,"endColumn":65},{"ruleId":"294","severity":1,"message":"295","line":336,"column":94,"nodeType":"296","messageId":"297","endLine":336,"endColumn":96},{"ruleId":"294","severity":1,"message":"295","line":329,"column":63,"nodeType":"296","messageId":"297","endLine":329,"endColumn":65},{"ruleId":"294","severity":1,"message":"295","line":331,"column":94,"nodeType":"296","messageId":"297","endLine":331,"endColumn":96},{"ruleId":"298","severity":1,"message":"299","line":137,"column":25,"nodeType":"300","endLine":137,"endColumn":46},{"ruleId":"298","severity":1,"message":"299","line":197,"column":25,"nodeType":"300","endLine":197,"endColumn":44},{"ruleId":"258","severity":1,"message":"301","line":9,"column":17,"nodeType":"260","messageId":"261","endLine":9,"endColumn":26},{"ruleId":"258","severity":1,"message":"302","line":12,"column":7,"nodeType":"260","messageId":"261","endLine":12,"endColumn":13},{"ruleId":"298","severity":1,"message":"299","line":21,"column":74,"nodeType":"300","endLine":21,"endColumn":83},{"ruleId":"268","severity":1,"message":"286","line":23,"column":73,"nodeType":"270","messageId":"271","endLine":23,"endColumn":75},{"ruleId":"303","severity":1,"message":"304","line":19,"column":46,"nodeType":"305","messageId":"306","endLine":19,"endColumn":57},{"ruleId":"262","severity":1,"message":"307","line":52,"column":6,"nodeType":"264","endLine":52,"endColumn":20,"suggestions":"308"},{"ruleId":"258","severity":1,"message":"302","line":11,"column":7,"nodeType":"260","messageId":"261","endLine":11,"endColumn":13},{"ruleId":"287","severity":1,"message":"288","line":17,"column":11,"nodeType":"289","endLine":17,"endColumn":45},{"ruleId":"254","replacedBy":"309"},{"ruleId":"256","replacedBy":"310"},"no-native-reassign",["311"],"no-negated-in-lhs",["312"],"no-unused-vars","'BACKEND_URL' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.","ArrayExpression",["313"],["314"],["315"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'cartTime' is assigned a value but never used.","'setIsMobile' is assigned a value but never used.","'setPaypalCart' is assigned a value but never used.","'checkboxUpdate' is assigned a value but never used.","'imgUrl' is assigned a value but never used.","'cookies' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'history', 'paypalOrderObject', and 'removeCookie'. Either include them or remove the dependency array.",["316"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'setCookie' is assigned a value but never used.",["317"],"Expected '!==' and instead saw '!='.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'json' is assigned a value but never used.","'key' is assigned a value but never used.","'failedAdminAuth' is assigned a value but never used.","'setFailedAdminAuth' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Component' is defined but never used.","'config' is assigned a value but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","React Hook useEffect has a missing dependency: 'menuItemValues'. Either include it or remove the dependency array.",["318"],["311"],["312"],"no-global-assign","no-unsafe-negation",{"desc":"319","fix":"320"},{"desc":"319","fix":"321"},{"desc":"319","fix":"322"},{"desc":"323","fix":"324"},{"desc":"319","fix":"325"},{"desc":"326","fix":"327"},"Update the dependencies array to be: [state]",{"range":"328","text":"329"},{"range":"330","text":"329"},{"range":"331","text":"329"},"Update the dependencies array to be: [cart, history, paypalOrderObject, removeCookie]",{"range":"332","text":"333"},{"range":"334","text":"329"},"Update the dependencies array to be: [categoryName, menuItemValues]",{"range":"335","text":"336"},[1966,1968],"[state]",[1217,1219],[1871,1873],[8075,8081],"[cart, history, paypalOrderObject, removeCookie]",[2120,2122],[1859,1873],"[categoryName, menuItemValues]"]