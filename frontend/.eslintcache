[{"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\index.js":"1","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\App.js":"3","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\About.js":"4","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Admin.js":"5","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Orders.js":"6","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Login.js":"7","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\ResetPassword.js":"8","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Register.js":"9","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Menu.js":"10","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Contact.js":"11","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\PayPal.js":"12","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\ForgotPasswordDialogue.js":"13","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\ChangeEmailScreen.js":"14","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\AdminMenuItems.js":"15","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\OrdersTable.js":"16","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\config.js":"17","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\util\\auth.js":"18","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\NavBar.js":"19","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\SearchSection.js":"20","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\CartPreview.js":"21","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\Banner.js":"22","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\ContactMap.js":"23","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuSection.js":"24","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\ContactForm.js":"25","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\OrdersTableColumns.js":"26","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\SearchBar.js":"27","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuItems.js":"28","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuFilterButton.js":"29","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuFilter.js":"30","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\util\\OrdersTableFunctions.js":"31","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuItemCategory.js":"32","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuItemPopup.js":"33","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuItem.js":"34","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\AddMenuItemModal.js":"35","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\EditMenuItemModal.js":"36","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\ChangeHeaderModal.js":"37"},{"size":517,"mtime":1610307420384,"results":"38","hashOfConfig":"39"},{"size":375,"mtime":1610307420390,"results":"40","hashOfConfig":"39"},{"size":1410,"mtime":1613079871705,"results":"41","hashOfConfig":"39"},{"size":1561,"mtime":1613079871765,"results":"42","hashOfConfig":"39"},{"size":3852,"mtime":1613079871767,"results":"43","hashOfConfig":"39"},{"size":4673,"mtime":1613079871772,"results":"44","hashOfConfig":"39"},{"size":5987,"mtime":1613079871770,"results":"45","hashOfConfig":"39"},{"size":6382,"mtime":1613079871776,"results":"46","hashOfConfig":"39"},{"size":6456,"mtime":1613079871774,"results":"47","hashOfConfig":"39"},{"size":1632,"mtime":1613542707385,"results":"48","hashOfConfig":"39"},{"size":720,"mtime":1613542707383,"results":"49","hashOfConfig":"39"},{"size":7672,"mtime":1613079871729,"results":"50","hashOfConfig":"39"},{"size":3821,"mtime":1613079871715,"results":"51","hashOfConfig":"39"},{"size":2593,"mtime":1613079871714,"results":"52","hashOfConfig":"39"},{"size":17028,"mtime":1613593159225,"results":"53","hashOfConfig":"39"},{"size":3990,"mtime":1613079871727,"results":"54","hashOfConfig":"39"},{"size":309,"mtime":1613542707375,"results":"55","hashOfConfig":"39"},{"size":1889,"mtime":1613079871779,"results":"56","hashOfConfig":"39"},{"size":4979,"mtime":1613545308806,"results":"57","hashOfConfig":"39"},{"size":335,"mtime":1613079871732,"results":"58","hashOfConfig":"39"},{"size":3199,"mtime":1613079871711,"results":"59","hashOfConfig":"39"},{"size":400,"mtime":1613545308802,"results":"60","hashOfConfig":"39"},{"size":2261,"mtime":1613542707368,"results":"61","hashOfConfig":"39"},{"size":4080,"mtime":1613542707372,"results":"62","hashOfConfig":"39"},{"size":2667,"mtime":1613542707367,"results":"63","hashOfConfig":"39"},{"size":3523,"mtime":1613079871728,"results":"64","hashOfConfig":"39"},{"size":314,"mtime":1613079871730,"results":"65","hashOfConfig":"39"},{"size":710,"mtime":1613079871721,"results":"66","hashOfConfig":"39"},{"size":722,"mtime":1613542707370,"results":"67","hashOfConfig":"39"},{"size":694,"mtime":1613542707369,"results":"68","hashOfConfig":"39"},{"size":5685,"mtime":1613079871777,"results":"69","hashOfConfig":"39"},{"size":2996,"mtime":1613079871719,"results":"70","hashOfConfig":"39"},{"size":9826,"mtime":1613542707371,"results":"71","hashOfConfig":"39"},{"size":778,"mtime":1613079871718,"results":"72","hashOfConfig":"39"},{"size":25705,"mtime":1613593012097,"results":"73","hashOfConfig":"39"},{"size":25757,"mtime":1613591286650,"results":"74","hashOfConfig":"39"},{"size":3976,"mtime":1613595464407,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"1wzwk4m",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"78"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"78"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"78"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"78"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"78"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"78"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"78"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"78"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"78"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"78"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"78"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"78"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"78"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"78"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\index.js",[],["171","172"],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\App.js",["173"],"import './App.css';\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\nimport Menu from './pages/Menu';\r\nimport About from './pages/About';\r\nimport Admin from './pages/Admin';\r\nimport Contact from './pages/Contact';\r\nimport Login from './pages/Login';\r\nimport Register from './pages/Register';\r\nimport ResetPassword from './pages/ResetPassword';\r\nimport Orders from './pages/Orders';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      {/* Switch gurantees that a URL can match to only one route*/}\r\n      <Switch>\r\n        {/* Login Page */}\r\n        <Route exact path=\"/login\">\r\n          <Login/>\r\n        </Route>\r\n        {/* Register Page */}\r\n        <Route exact path=\"/register\">\r\n          <Register/>\r\n        </Route>\r\n        {/* Reset Password Page */}\r\n        <Route exact path=\"/reset-password\">\r\n          <ResetPassword/>\r\n        </Route>\r\n        {/* About Page */}\r\n        <Route exact path=\"/about\">\r\n          <About/>\r\n        </Route>\r\n        {/* Contact Page */}\r\n        <Route exact path=\"/contact\">\r\n          <Contact/>\r\n        </Route>\r\n        {/* Admin Page */}\r\n        <Route exact path=\"/admin\">\r\n          <Admin/>\r\n        </Route>\r\n        {/* Any other URL is automatically matched to Menu Page */}\r\n        <Route path=\"/\">\r\n          <Menu/>\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\About.js",["174"],"import React, { Component} from 'react';\r\nimport Navbar from '../components/NavBar';\r\nimport PayPal from '../components/PayPal';\r\n\r\nconst config = require('../config');\r\n\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\nclass About extends Component {\r\n\r\n    // For paypal payment handling, we assume the cart passed into the PayPal object looks like...\r\n    // {\r\n    //     item_total: \"\",\r\n    //     tax_total: \"\",\r\n    //     items: [\r\n    //         {\r\n    //             name: \"\",\r\n    //             quantity: \"\", \r\n    //             size: \"\", (Individual or Family)\r\n    //             addons: [\"\", \"\"], (Sides, gluten free)\r\n    //             individual_price: \"\", (price per item)\r\n    //             individual_tax: \"\", (tax per item)\r\n    //         },\r\n\r\n    //     ]\r\n    // }\r\n    \r\n    render (){\r\n    const cart = {\r\n        cart_total: \"15.00\",\r\n        item_total: \"12.00\",\r\n        tax_total: \"3.00\",\r\n        items: [\r\n            {\r\n                name: \"Food 1\",\r\n                quantity: \"2\",\r\n                size: \"Individual\",\r\n                addons: [\"Gluten Free\"],\r\n                individual_price: \"6.00\",\r\n                individual_tax: \"1.50\",\r\n            },\r\n        ],\r\n        pickup_date: \"2021-02-04\"\r\n    }\r\n      return (\r\n\r\n          <div>\r\n              <Navbar currentPage=\"about\"/>\r\n              <div style={{marginTop: \"30px\"}}>\r\n                  This is the About Page.\r\n              </div>\r\n              <PayPal cart={cart}/>           \r\n          </div>\r\n\r\n      )\r\n    }\r\n  }\r\n  \r\n  export default About;","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Admin.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Orders.js",["175"],"import React from 'react';\r\nimport NavBar from '../components/NavBar';\r\nimport OrdersTable from '../components/OrdersTable';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport '../css/Orders.css';\r\n\r\nconst config = require('../config');\r\n\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\nexport default class Orders extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            getOrders: [],\r\n            Loading: true,\r\n        }\r\n\r\n        this.formatTime = this.formatTime.bind(this);\r\n        this.formatDate = this.formatDate.bind(this);\r\n        this.formatArray = this.formatArray.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Formats the data from the fetch() call into the array\r\n     * @param {Object} list \r\n     * @param {String} date \r\n     * @param {String} formatCurrTime \r\n     * @param {String} dateSubmission \r\n     * @param {String} formatCurrTimeSubmission \r\n     */\r\n    formatArray(list, date, formatCurrTime, dateSubmission, formatCurrTimeSubmission) {\r\n        let val = formatCurrTime;\r\n        let val2 = formatCurrTimeSubmission;\r\n\r\n        const dateOne = date + `\\n${val}`;\r\n        const dateTwo = dateSubmission + `\\n${val2}`;\r\n        return [dateOne, list.Customer.Name, list.Customer.Email, list.Customer.Phone, \r\n            list.PayPal.Amount, list.Order, dateTwo, list.isCompleted ? \"Completed Orders\" : \"Pending Orders\", \r\n            list._id];\r\n    }\r\n\r\n    /**\r\n     * Formats the time in the HH:MM (P.M. OR A.M.)\r\n     * @param {String} time \r\n     */\r\n    formatTime(time) {\r\n        time = time.split(':'); // convert to array\r\n        \r\n        let hours = Number(time[0]);\r\n        let minutes = Number(time[1]);\r\n        let timeValue;\r\n\r\n        if (hours > 0 && hours <= 12) timeValue = \"\" + hours; \r\n        else if (hours > 12) timeValue = \"\" + (hours - 12);\r\n        else if (hours === 0) timeValue = \"12\";\r\n        \r\n        timeValue += (minutes < 10) ? \":0\" + minutes : \":\" + minutes;  // get minutes\r\n        timeValue += (hours >= 12) ? \" P.M.\" : \" A.M.\";  // get AM/PM\r\n\r\n        return timeValue;\r\n    }\r\n\r\n    /**\r\n     * Formats the date to be in the MM/DD/YYYY format\r\n     * @param {String} getDate \r\n     */\r\n    formatDate(getDate) {\r\n        const monthSubmission = getDate.getMonth()+1 >= 10 ? getDate.getMonth()+1 : (\"0\" + (getDate.getMonth() + 1)).slice(-2);\r\n        const dateSubmission = monthSubmission + \"/\" + getDate.getDate() + \"/\" + getDate.getFullYear();   \r\n        return dateSubmission \r\n    }\r\n\r\n    /**\r\n     * Get all the orders from the database\r\n     */\r\n    componentDidMount() {\r\n        fetch(`${BACKEND_URL}order`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n        .then(data => {\r\n            const getOrdersList = data.orders;\r\n            const length = getOrdersList.length\r\n            let createArr = [];\r\n\r\n            for(let i = 0; i < length; i++) {\r\n                //Get the date from the database\r\n                let getDate = new Date(getOrdersList[i].Pickup);\r\n                const formatCurrtime = this.formatTime(getDate.getHours() + \":\" + getDate.getMinutes() + \":\" + getDate.getSeconds());\r\n                const date = this.formatDate(getDate);\r\n\r\n                //Format for the submission date\r\n                let getDateSubmission = new Date(getOrdersList[i].createdAt);\r\n                const formatCurrtimeSubmission = this.formatTime(getDateSubmission.getHours() + \":\" + getDateSubmission.getMinutes() + \":\" + getDateSubmission.getSeconds());\r\n                const dateSubmission = this.formatDate(getDateSubmission);\r\n\r\n                const formatedArray = this.formatArray(getOrdersList[i], date, formatCurrtime, dateSubmission, formatCurrtimeSubmission)\r\n                createArr.push(formatedArray);\r\n            }\r\n            this.setState({ getOrders: createArr, Loading: false})\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"orders-page-container\">\r\n                {/* Render a progress spinner to show it is loading */}\r\n                {this.state.Loading ? \r\n                <div className=\"spinner-orders-page\">\r\n                    <CircularProgress />\r\n                </div> : \r\n                <div className=\"orders-table\">\r\n                    <div className=\"justify-table-center\">\r\n                        <OrdersTable orders={this.state.getOrders} />\r\n                    </div>\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Login.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\ResetPassword.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Register.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Menu.js",["176"],"import React, { Component} from 'react';\r\nimport Navbar from '../components/NavBar';\r\nimport CartPreview from '../components/CartPreview';\r\nimport SearchSection from '../components/SearchSection';\r\nimport MenuSection from '../components/MenuSection';\r\nimport Banner from '../components/Banner';\r\nimport \"../css/Menu.css\";\r\nconst config = require('../config');\r\n\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\nclass Menu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //stores items currently in the cart using local storage\r\n        this.state = {\r\n            items: JSON.parse(localStorage.getItem('cartItems')) || []\r\n        }\r\n    }\r\n\r\n    //adds item from popup to the cart and updates local storage\r\n    handleAdd = (item) => {\r\n        this.setState({items: [...this.state.items, item]}, () => {\r\n            localStorage.setItem('cartItems', JSON.stringify(this.state.items))\r\n        });\r\n        console.log(this.state.items);\r\n    }\r\n\r\n    render (){\r\n\r\n      return (\r\n          <div>\r\n              <div className=\"navbar-wrapper\">\r\n                <Navbar currentPage=\"menu\"/>\r\n              </div>\r\n              <Banner/>\r\n              <div className=\"cart-preview\">\r\n              {/* cart preview is floated on the bottom right of the screen */}\r\n              <CartPreview key={this.state.items} items={this.state.items}/> \r\n              </div>\r\n              {/** search section is the top, non-menu half of the page */}\r\n              <SearchSection/>\r\n              <MenuSection onItemAdd={this.handleAdd}/> \r\n          </div>\r\n\r\n      )\r\n    }\r\n  }\r\n  \r\n  export default Menu;","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\pages\\Contact.js",["177","178"],"import React, { useState } from 'react';\r\nimport Navbar from '../components/NavBar';\r\nimport ContactMap from '../components/ContactMap';\r\nimport ContactForm from '../components/ContactForm';\r\nimport \"../css/Contact.css\";\r\nconst config = require('../config');\r\n\r\nconst Contact = () => {\r\n    return (\r\n        <div>\r\n            <Navbar currentPage=\"contact\" />\r\n            <div className=\"contact-wrapper\">\r\n                <div className=\"contact-map-section\">\r\n                    <ContactMap />\r\n                </div>\r\n                <div className=\"contact-form-section\">\r\n                    <ContactForm />\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n  }\r\n  \r\n  export default Contact;","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\PayPal.js",["179"],"import React from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n// const paypal = require(\"@paypal/checkout-server-sdk\");\r\n\r\nconst config = require('../config');\r\n\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\n//PayPal script is located in public/index.html (contains Client ID)\r\nexport default function PayPal(props) {\r\n    const { cart } = props;\r\n    let history = useHistory();\r\n    // I assume the cart object looks like this:\r\n    // {\r\n    //     cart_total: \"\",\r\n    //     item_total: \"\",\r\n    //     tax_total: \"\",\r\n    //     items: [\r\n    //         {\r\n    //             name: \"\",\r\n    //             quantity: \"\",\r\n    //             size: \"\",\r\n    //             addons: [\"\", \"\"],\r\n    //             individual_price: \"\",\r\n    //             individual_tax: \"\",\r\n    //         },\r\n    //     ],\r\n    //     pickup_date: \"\"\r\n    // }\r\n    const paypalRef = React.useRef();\r\n    const paypalOrderObject = {\r\n        intent: \"CAPTURE\",\r\n        application_context: {\r\n            shipping_preference: 'NO_SHIPPING',\r\n        },\r\n        purchase_units: [{\r\n            description: \"Food order from UWEAST Kitchen\",\r\n            // Deals with pricing of the cart\r\n            amount: {\r\n                currency_code: \"USD\",\r\n                value: cart.cart_total,\r\n                breakdown: {\r\n                    // includes totals for items and taxes. Shipping and handling can be ignored\r\n                    // because the items are for pickup and handling is included in price\r\n                    item_total: {\r\n                        currency_code: \"USD\",\r\n                        value: cart.item_total,\r\n                    },\r\n                    tax_total: {\r\n                        currency_code: \"USD\",\r\n                        value: cart.tax_total,\r\n                    },\r\n                }\r\n            },\r\n            // Deals with the individual item entries for the order\r\n            items: \r\n            cart.items.map((item) => {\r\n                return {\r\n                    name: item.name,\r\n                    // Description follows the format:\r\n                    // Size: {size}, (Gluten Free,) (Other addons,) \r\n                    description: [`Size: ${item.size}`, ...item.addons].join(\", \"),\r\n                    unit_amount: {\r\n                        currency_code: \"USD\",\r\n                        value: item.individual_price,\r\n                    },\r\n                    tax: {\r\n                        currency_code: \"USD\",\r\n                        value: item.individual_tax,\r\n                    },\r\n                    quantity: item.quantity,\r\n                    category: \"PHYSICAL_GOODS\"\r\n                }\r\n            })\r\n        }],\r\n        shipping_type: 'PICKUP',\r\n    }\r\n    // THE FOLLOWING TWO METHODS ARE NOT USED. THEY WERE CREATED FOR\r\n    // SERVER SIDE PAYMENT INTEGRATION, BUT THIS ISN'T BEST PRACTICE,\r\n    // SO IT WAS NOT PURSUED. THEREFORE THESE METHODS ARE COMMENTED OUT.\r\n    /* const createOrder = async () => {\r\n        console.log(\"Creating order...\");\r\n        return fetch(`${BACKEND_URL}paypal/createPayment`, {\r\n            method: \"POST\",\r\n            body: JSON.stringify(paypalOrderObject),\r\n            headers: {\r\n                \"content-type\": \"application/json\"\r\n            }, \r\n        }).then((res) => {\r\n            if(res.ok) {\r\n                return res.json();\r\n            }\r\n        }).then((data) => {\r\n            console.log(\"finished creating order\")\r\n            return data.orderID; // make sure to use the same key name for order ID on the client and server\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n            alert(\"Create order Error\");\r\n        });\r\n    }\r\n    const onApprove = async (data) => {\r\n        console.log(\"Authorizing order...\");\r\n        return fetch(`${BACKEND_URL}paypal/executePayment`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                orderID: data.orderID,\r\n            }),\r\n        }).then((res) => {\r\n           // handle show completion\r\n           console.log(\"ORDER COMPLETE!\");\r\n           return res.json();\r\n        })\r\n        .catch(() => {\r\n            alert(\"Error\");\r\n        }).then((details) => {\r\n            alert(\"Successful order!\");\r\n            console.log(details);\r\n        });\r\n    } */\r\n\r\n     // To show PayPal buttons once the component loads\r\n    React.useEffect(() => {\r\n        window.paypal\r\n        .Buttons({\r\n            createOrder: async(data, actions) => {\r\n                return actions.order.create(paypalOrderObject);\r\n            },\r\n            onApprove: async (data, actions) => {\r\n                return actions.order.capture().then(function(details) {\r\n                    // Details here includes payer name, phone number, and email.\r\n\r\n                    // create order object\r\n                    const orderObj = {\r\n                        \"Customer\": {\r\n                            \"Name\": details.payer.name.given_name + \" \" + details.payer.name.surname,\r\n                            \"Email\": details.payer.email_address,\r\n                            \"Phone\": details.payer.phone.phone_number.national_number\r\n                        },\r\n                        \"Pickup\": cart.pickup_date,\r\n                        \"PayPal\": {\r\n                            \"Amount\": cart.cart_total,\r\n                            \"transactionID\": details.id\r\n                        },\r\n                        \"Order\": \r\n                        cart.items.map((item) => {\r\n                            return {\r\n                                \"item\": item.name,\r\n                                \"quantity\": item.quantity,\r\n                                \"extra\": [`${item.size} size`, ...item.addons],\r\n                            }\r\n                        })\r\n                    }\r\n                    // signal email automation by calling the /autoEmails/automate route, \r\n                    // this will automatically add the order to the database \r\n                    return fetch(`${BACKEND_URL}autoEmails/automate`, {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"content-type\": \"application/json\",\r\n                        },\r\n                        body: JSON.stringify(orderObj),\r\n                    }).then((res) => {\r\n                        if(res.ok){\r\n                            alert('Transaction completed! You will receive a confirmation email shortly.');\r\n                            history.push(\"/\");\r\n                        } else {\r\n                            alert('Transaction completed, but email automation failed. You paid for your meal, and should get a confirmation from PayPal');\r\n                            history.push(\"/\");\r\n\r\n                        }\r\n                    })\r\n                    .catch(() => {\r\n                        alert(\"Error\");\r\n                    });\r\n                });\r\n            },\r\n            onCancel: () => {\r\n                // If the user cancels their order, send them back to the cart summary\r\n                // The cart summary exists at the menu page\r\n                console.log(\"cancel\");\r\n                history.push(\"/\");\r\n            },\r\n            onError: (err) => {\r\n                alert(\"An error occurred!\");\r\n                console.error(err);\r\n                history.push(\"/\");\r\n\r\n            },\r\n        })\r\n        .render(paypalRef.current);\r\n    }, [cart]);\r\n\r\n    return (\r\n        <div>\r\n            <div ref={paypalRef}/>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\ForgotPasswordDialogue.js",["180"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { Link } from 'react-router-dom';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst config = require('../config');\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\nexport default function FormDialog() {\r\n  \r\n  const [state, setState] = React.useState({\r\n    open: false,\r\n    email: '',\r\n    error:{\r\n      display: false,\r\n      message: ''\r\n    }\r\n  });\r\n\r\n  // Handles submission of the form (button click)\r\n  // Validates form data for valid email address (must be a user's email address). If valid, \r\n  // it autogenerates a random password and sends it as an email to the user. If invalid, an error is displayed. \r\n  const handleSend = async() => {\r\n      const submission = {\r\n          email: state.email\r\n      };\r\n\r\n      //Check if email field is empty\r\n    if (state.email === ''){\r\n        setState({...state, error:{display: true, message: \"Field cannot be empty!\"}})\r\n        return;\r\n    }\r\n    //Backend call\r\n    try{\r\n      const response = await fetch(`${BACKEND_URL}user/forgotPassword`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(submission)\r\n      });\r\n\r\n      //Everything went great\r\n      if (response.ok) {\r\n        alert(\"Email Successfully Sent!\");\r\n        handleClose();\r\n      } \r\n      //Invalid Email\r\n      else if(response.status == 401){\r\n        setState({...state, error:{display: true, message: \"Invalid Email\"}});\r\n      }\r\n      //Any Server Errors\r\n      else {\r\n            setState({...state, error:{display: true, message: \"System Error: Try Again Later\"}});\r\n      }\r\n    }\r\n    //General Errors\r\n    catch(error){\r\n        setState({...state, error:{display: true, message: `An error occurred: ${error.message}`}});\r\n    }\r\n\r\n  }\r\n\r\n  //Display pop-up\r\n  const handleClickOpen = () => {\r\n    setState({...state, email:'', open: true, error:{display: false}});\r\n  };\r\n\r\n  //Close pop-up\r\n  const handleClose = () => {\r\n    setState({...state, open: false, error:{display: false}});\r\n  };\r\n\r\n  //track the email address put in the text field\r\n  const handleEmailChange = (event) => {\r\n    setState({...state, email: event.target.value, open: true});\r\n  }\r\n\r\n  //Render component \r\n  return (\r\n    <div>\r\n      <Link onClick={handleClickOpen}><Typography>Forgot Password?</Typography></Link>\r\n      <Dialog open={state.open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">Forgot Password?</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Please enter the email address of the associated account here. An email will be sent to\r\n            you there containing next steps. \r\n          </DialogContentText>\r\n          <TextField\r\n            onChange={handleEmailChange}\r\n            error={state.error.display}\r\n            helperText={state.error.display ? state.error.message: null}\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label=\"Email Address\"\r\n            type=\"email\"\r\n            fullWidth\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleSend} color=\"primary\">\r\n            Send Email\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\ChangeEmailScreen.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\AdminMenuItems.js",["181"],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\OrdersTable.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\config.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\util\\auth.js",["182"],"const config = require('../config');\r\n\r\nconst ADMIN_TOKEN_ATTRIBUTE = 'uweast-ck:admin-token'; //Genereated from backend using secret-id\r\nconst ADMIN_EMAIL_ATTRIBUTE = 'uweast-ck:admin-email';\r\n\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\n//Returns true if user is logged in, false otherwise\r\nfunction isAuthenticated() {\r\n    // if (!localStorage.hasOwnProperty(ADMIN_TOKEN_ATTRIBUTE)){\r\n    //     return false\r\n    // }\r\n    // const submission = {\r\n    //     jwtToken: localStorage.getItem(ADMIN_TOKEN_ATTRIBUTE)\r\n    // }\r\n    // const response = await fetch(`${BACKEND_URL}jwt/verify`, {\r\n    //     method: 'POST',\r\n    //     headers: { 'Content-Type': 'application/json' },\r\n    //     body: JSON.stringify(submission)\r\n    //   });\r\n\r\n    //   if(response.ok){\r\n    //       return true;\r\n    //   }\r\n    //   return false;\r\n    return localStorage.hasOwnProperty(ADMIN_TOKEN_ATTRIBUTE);\r\n  }\r\n  \r\n  //Retrieves the logged in user's JWT token from local storage\r\n  function getJWT() {\r\n    if (!isAuthenticated()) {\r\n      return null;\r\n    }\r\n    return localStorage.getItem(ADMIN_TOKEN_ATTRIBUTE);\r\n  }\r\n  \r\n  //Sets the user's JWT token in local storage\r\n  function setJWT(token) {\r\n    localStorage.setItem(ADMIN_TOKEN_ATTRIBUTE, token);\r\n  }\r\n  \r\n  //Retrieves the logged in user's email address\r\n  function getUser() {\r\n    if (!isAuthenticated()) {\r\n      return null;\r\n    }\r\n    return JSON.parse(localStorage.getItem(ADMIN_EMAIL_ATTRIBUTE));\r\n  }\r\n  \r\n  //Sets the user's email address\r\n  function setUser(user) {\r\n    localStorage.setItem(ADMIN_EMAIL_ATTRIBUTE, JSON.stringify(user));\r\n  }\r\n  \r\n  //Clears out all attributes in local storage\r\n  function logout() {\r\n    localStorage.removeItem(ADMIN_TOKEN_ATTRIBUTE);\r\n    localStorage.removeItem(ADMIN_EMAIL_ATTRIBUTE);\r\n  }\r\n  \r\n  export {\r\n    isAuthenticated, getJWT, setJWT,\r\n    getUser, setUser, logout\r\n  };\r\n","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\NavBar.js",["183","184","185","186","187"],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\SearchSection.js",["188","189","190"],"import React, { Component } from 'react';\r\nimport SearchBar from \"./SearchBar\";\r\nimport \"../css/SearchSection.css\";\r\nconst config = require('../config');\r\n\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\nconst SearchSection = () => {\r\n    return (\r\n      <div className=\"search-section\"></div>\r\n    );\r\n}\r\n  \r\nexport default SearchSection;","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\CartPreview.js",["191","192","193","194","195","196"],"import React, { Component, useEffect } from 'react';\r\nimport {Button} from 'react-bootstrap';\r\nimport '../css/CartPreview.css';\r\n\r\nclass CartPreview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            items: this.props.items,\r\n            subTotal: \"00.00\",\r\n            tax: \"00.00\",\r\n            totalPrice: \"00.00\"\r\n        }\r\n\r\n        this.loadItems = this.loadItems.bind(this);\r\n    }\r\n    \r\n    //displays items currently in the cart and updates subtotal and total\r\n    loadItems() {\r\n        return(\r\n            <div>\r\n                {this.state.items.map((item, ind) => {\r\n\r\n                    this.state.subTotal = parseFloat(this.state.subTotal) + parseFloat(item.price);\r\n                    this.state.subTotal = parseFloat(this.state.subTotal).toFixed(2);\r\n                    this.state.tax = (parseFloat(this.state.subTotal)*0.0775).toFixed(2);\r\n                    this.state.totalPrice = parseFloat(this.state.subTotal) + parseFloat(this.state.tax);\r\n                    this.state.totalPrice = parseFloat(this.state.totalPrice).toFixed(2);\r\n\r\n                    let specialInstructions = (item.instructions === \"\") ? \"\" : \", \" + item.instructions;\r\n                    let accommodation = (item.accommodations) ? \", \" + item.accommodations : \"\";\r\n\r\n                    let extraInfo = item.size + specialInstructions  + accommodation;\r\n\r\n                        return (\r\n                            <div key={ind} className=\"summary-item row\">\r\n                                <span className=\"thumbnail thumb-img\">{ind+1}</span>\r\n                                <span className=\"item-info\">{item.quantity} X {item.name}<br/>\r\n                                <span className=\"item-description\">{extraInfo}</span></span>\r\n                                <span className=\"thumbnail summary-price\">${item.price}</span>\r\n                                <span className=\"item-divider\"></span>\r\n                            </div>\r\n                        )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"cart-container\">\r\n                <div id=\"order-summary-div\">\r\n                    <div className=\"order-summary\">\r\n                        Order Summary\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"fixed-scroll\">\r\n                            {/* loads and displays all items currently in the cart */}\r\n                            {this.loadItems()}\r\n                        </div>\r\n                        <div className=\"order-totals\">\r\n                            <br/>\r\n                            Subtotal: ${this.state.subTotal}<br/>\r\n                            Tax: ${this.state.tax}\r\n                        </div>\r\n                        <Button>Review Order</Button>\r\n                    </div>\r\n                    <div className=\"order-summary\">\r\n                        <span>Total Price</span><span className=\"add-price\">${this.state.totalPrice}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CartPreview;","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\Banner.js",["197","198"],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\ContactMap.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuSection.js",["199","200","201","202"],"import React, { useState } from 'react';\r\nimport MenuFilter from './MenuFilter';\r\nimport MenuItems from './MenuItems';\r\nimport '../css/MenuSection.css';\r\nconst config = require('../config');\r\n\r\n// MenuSection is responsible for managing states for most of the menu\r\nconst MenuSection = ({onItemAdd}) => {\r\n  // filterCategories populates the filter buttons\r\n  const filterCategories = [\"Whole Menu\", \"Featured\", \"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\r\n\r\n  // populates the menu item categories\r\n  const defaultCategories = [\"Featured\", \"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\r\n\r\n  // stores all the categories currently visible\r\n  let displayedCategories = [];\r\n\r\n  // states that are managed and passed down to components\r\n  const [visibleCategories, setVisibleCategories] = useState(defaultCategories);\r\n\r\n  const [toggledFilter, setToggledFilter] = useState(\"none\");\r\n\r\n  // stores whether or not the popup is currently visible\r\n  const [popupVisible, setPopupVisible] = useState(false);\r\n\r\n  // map with all of the data that will be displayed in the popup\r\n  const [popupValues, setPopupValues] = useState(new Map());\r\n\r\n  // changes visible categories when filter button is clicked\r\n  const changeVisibleCategories = categoryName => {\r\n    if(categoryName == \"Whole Menu\") {\r\n      displayedCategories = defaultCategories;\r\n    }\r\n    else {\r\n      // if the option is not \"whole menu\", a new item is added to the \r\n      // displayedCategories array that is then passed to be rendered\r\n      displayedCategories.push(categoryName);\r\n    }\r\n\r\n    if(displayedCategories.length == 0) {\r\n      displayedCategories = defaultCategories;\r\n    }\r\n    \r\n    // responsible for actually rendering/setting what will be visible\r\n    setVisibleCategories(displayedCategories);\r\n  }\r\n\r\n  // processes the form submitted from the popup\r\n  const processForm = e => {\r\n    // prevents page reload\r\n    e.preventDefault();\r\n\r\n    // gets the form data\r\n    var data = new FormData(e.target);\r\n    var object = {};\r\n\r\n    // goes through and makes an object from the FormData\r\n    data.forEach((value, key) => {\r\n        if(!Reflect.has(object, key)){\r\n            object[key] = value;\r\n            return;\r\n        }\r\n\r\n        if(!Array.isArray(object[key])){\r\n            object[key] = [object[key]];    \r\n        }\r\n        object[key].push(value);\r\n    });\r\n\r\n    // converts the FormData to a JSON string, optional\r\n    var json = JSON.stringify(object);\r\n\r\n    // calls parent function to add item from popup to cart\r\n    onItemAdd(object);\r\n    \r\n    // when submit button is clicked, the popup is closed\r\n    togglePopup();\r\n  }\r\n  \r\n  // closes popup when open and opens popup when closed\r\n  const togglePopup = (title, description, price, image, dietaryInfo, accommodations) => {\r\n    setPopupVisible(!popupVisible);\r\n    \r\n    // sets the values of the map based on passed-in information\r\n    popupValues.set(\"title\", title);\r\n    popupValues.set(\"description\", description);\r\n    popupValues.set(\"price\", price);\r\n    popupValues.set(\"image\", image);\r\n    popupValues.set(\"dietary-info\", dietaryInfo);\r\n    popupValues.set(\"accommodations\", accommodations);\r\n\r\n    setPopupValues(popupValues);\r\n  }\r\n\r\n  /**\r\n   * MenuSection is split into three columns:\r\n   * 1. filter column\r\n   * 2. menu column\r\n   * 3. cart column\r\n   */\r\n  return (\r\n    <div className=\"menu-section-wrapper\">\r\n      <div className=\"menu-section\">\r\n        <div className=\"menu-filter-wrapper\">\r\n          <MenuFilter toggledFilter={toggledFilter} setToggledFilter={setToggledFilter} foodCategories={filterCategories} changeVisibleCategories={() => changeVisibleCategories} />\r\n        </div>\r\n        <div className=\"menu-items\">\r\n          {/** parameters are states being passed down */}\r\n          <MenuItems foodCategories={visibleCategories} processForm={processForm} popupVisible={popupVisible} popupValues={popupValues} togglePopup={togglePopup}/>\r\n        </div>\r\n        <div className=\"menu-cart\">\r\n      </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MenuSection;","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\ContactForm.js",["203","204"],"import React from 'react';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { Snackbar} from '@material-ui/core';\r\n\r\nconst ContactForm = () => {\r\n\r\n  const [state, setState] = React.useState({\r\n    snack: {\r\n      message: '',\r\n      open: false\r\n    },\r\n  });\r\n\r\n  const sendMessage = async (e) => {\r\n    e.preventDefault();\r\n  \r\n    const formData = new FormData(e.target);\r\n    let data = {};\r\n    \r\n    // make FormData into a js object to pass to route\r\n    for(var [key, value] of formData.entries()) {\r\n      data[key] = value;\r\n    }\r\n  \r\n    try{\r\n  \r\n      const response = await fetch(\"http://localhost:9000/autoEmails/contact\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify(data)\r\n      });\r\n      \r\n      //Successful response\r\n      if (response.status == 200){\r\n        alert(\"Message sent!\");\r\n        // reload window to clear input boxes \r\n        window.location.reload();\r\n        \r\n        //Malformed Email\r\n      } else if(response.status == 400) {\r\n        setState({...state, snack: {message: 'Invalid Email Address!', open: true}});\r\n\r\n        //System Error\r\n      } else {\r\n        setState({...state, snack: {message: 'System Error: Cannot send email!', open: true}});\r\n      }\r\n      \r\n      //General Error\r\n    } catch(error){\r\n      setState({...state, snack: {message: 'System Error: Cannot send email!', open: true}});\r\n    }\r\n  };\r\n  \r\n  //Error Message Display: Auto close itself by updating its states\r\n  const handleSnackClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setState({...state, snack: {open: false}});\r\n  };\r\n\r\n  return (\r\n    <div className=\"contact-form\">\r\n      <div className=\"contact-form-text\">\r\n      <h1>CONTACT US</h1>\r\n      <p>Please email us using the form below</p>\r\n      <form onSubmit={sendMessage}>\r\n        <input type=\"text\" name=\"name\" className=\"first-input contact-form-input\" placeholder=\"Your Name\" required/>\r\n        <br />\r\n        <input type=\"text\" name=\"email\" className=\"contact-form-input\" placeholder=\"Your Email\" required />\r\n        <br />\r\n        {/** automatically-resizing textarea component */}\r\n        <TextareaAutosize className=\"contact-form-input\" name=\"message\" placeholder=\"Your message\" maxRows={3} required />\r\n        <br />\r\n        <input type=\"submit\" className=\"contact-form-submit\" value=\"Submit\"  />\r\n      </form>\r\n      </div>\r\n      <Snackbar open={state.snack.open} autoHideDuration={6000} onClose={handleSnackClose} message={state.snack.message}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ContactForm;","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\OrdersTableColumns.js",["205","206"],"import 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap-daterangepicker/daterangepicker.css';\r\nimport '../css/Orders.css';\r\n\r\n// Import helper functions from utils\r\nimport {\r\n    renderStatus,\r\n    DisplayDateFilters,\r\n    DisplayStatusFilters,\r\n    updateDateFilters,\r\n    renderDateFilters    \r\n} from '../util/OrdersTableFunctions';\r\n\r\n//The column headers for the table\r\nconst columns = [\r\n    {\r\n      name: \"Pick up Details\",\r\n      options: {\r\n        filter: true,\r\n        filterType: 'custom',\r\n        customFilterListOptions: {\r\n          render: renderDateFilters,\r\n          update: updateDateFilters\r\n        },\r\n        filterOptions: {\r\n          names: [],\r\n          logic(date, filters) {\r\n            const getDate = date.split(\"\\n\")[0];\r\n            if (filters[0] && filters[1]) {\r\n              return getDate < filters[0] || getDate > filters[1];\r\n            } else if (filters[0]) {\r\n              return getDate < filters[0];\r\n            } else if (filters[1]) {\r\n              return getDate > filters[1];\r\n            }\r\n            return false;\r\n          },\r\n          display: DisplayDateFilters\r\n        }\r\n      }  \r\n    },\r\n    {\r\n      name: \"Name\",\r\n      options: {\r\n        filter: true,\r\n        filterType: 'textField'\r\n      }  \r\n    },\r\n    {\r\n      name: \"Email\",\r\n      options: {\r\n        filter: true,\r\n        filterType: 'textField'\r\n      }    \r\n    },\r\n    {\r\n      name: \"Phone Number\",\r\n      options: {\r\n        filter: true,\r\n        filterType: 'textField'\r\n      }  \r\n    },\r\n    {\r\n      name: \"Amount Paid\",\r\n      options: {\r\n        filter: false\r\n      }  \r\n    },\r\n    {\r\n      name: \"Order Description\",\r\n      options: {\r\n        display: false, \r\n        viewColumns: false, \r\n        filter: false\r\n      }\r\n    },\r\n    {\r\n      name: \"Submission Details\",\r\n      options: {\r\n        filter: true,\r\n        filterType: 'custom',\r\n        customFilterListOptions: {\r\n          render: renderDateFilters,\r\n          update: updateDateFilters\r\n        },\r\n        filterOptions: {\r\n          names: [],\r\n          logic(date, filters) {\r\n            const getDate = date.split(\"\\n\")[0];\r\n            if (filters[0] && filters[1]) {\r\n              return getDate < filters[0] || getDate > filters[1];\r\n            } else if (filters[0]) {\r\n              return getDate < filters[0];\r\n            } else if (filters[1]) {\r\n              return getDate > filters[1];\r\n            }\r\n            return false;\r\n          },\r\n          display: DisplayDateFilters\r\n        }\r\n      }  \r\n    },\r\n    {\r\n      name: \"Order Status\",\r\n      options: {\r\n        filter: true,\r\n        filterType: 'custom',\r\n        customBodyRender: renderStatus,\r\n        customFilterListOptions: {\r\n          render: (options) => {\r\n            if(options[0] === \"All Orders\") return [];\r\n            return options;\r\n          },\r\n        },\r\n        filterOptions: {\r\n          names: [\"Pending Orders\", \"Completed Orders\"],\r\n          logic(order, filters) {\r\n            if (filters[0] == \"Completed Orders\") {\r\n              return order === \"Pending Orders\";\r\n            } else if (filters[0] == \"Pending Orders\") {\r\n              return order === \"Completed Orders\";\r\n            }\r\n  \r\n            return false;\r\n          },\r\n          display: DisplayStatusFilters\r\n        }\r\n      }\r\n    },\r\n    {\r\n      name: \"Row ID\",\r\n      options: {\r\n        display: false, \r\n        viewColumns: false, \r\n        filter: false\r\n      }\r\n    }\r\n];\r\n\r\nexport { columns } ;","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\SearchBar.js",["207","208"],"import React, { Component } from 'react';\r\nconst config = require('../config');\r\n\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\nconst SearchBar = ( {keyword, setKeyword} ) => {\r\n    return (\r\n      <input\r\n        key=\"searchkey\"\r\n        placeholder=\"search food\"\r\n      />\r\n    );\r\n}\r\n  \r\nexport default SearchBar;","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuItems.js",["209","210"],"import React from 'react';\r\nimport MenuItemCategory from './MenuItemCategory';\r\nimport '../css/MenuItems.css';\r\nconst config = require('../config');\r\n\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\nconst MenuItems = ({ foodCategories, processForm, popupVisible, popupValues, togglePopup }) => {\r\n\r\n  return (\r\n\r\n      <div className=\"menu-items\">\r\n        {/** generates categories in the menu */}\r\n        {foodCategories.map((categoryName, key) => {\r\n          return <MenuItemCategory key={key} categoryName={categoryName} key={key} processForm={processForm} popupVisible={popupVisible} popupValues={popupValues} togglePopup={togglePopup}/>\r\n        })}\r\n      </div>\r\n\r\n  )\r\n}\r\n  \r\n  export default MenuItems;","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuFilterButton.js",["211"],"import React from 'react';\r\nimport '../css/MenuFilterButton.css';\r\n\r\nconst MenuFilterButton = ( {categoryName, changeVisibleCategories, toggledFilter, setToggledFilter} ) => {\r\n\r\n    function updateFilters() {\r\n      changeVisibleCategories(categoryName);\r\n      setToggledFilter(categoryName);\r\n    }\r\n\r\n    // logic to check whether or not the filter button should be highlighted\r\n    let filterMatch = (categoryName === toggledFilter) && (categoryName != \"Whole Menu\");\r\n\r\n    return (\r\n      <button \r\n        className={`menu-filter-button ${filterMatch ? \"toggled-filter\": \"\"}`}\r\n        onClick={() => (updateFilters())}>\r\n        {categoryName} \r\n      </button>\r\n    )\r\n  }\r\n  \r\n  export default MenuFilterButton;","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuFilter.js",["212","213"],"import React, { Component} from 'react';\r\nimport MenuFilterButton from './MenuFilterButton';\r\nimport \"../css/MenuFilter.css\";\r\nconst config = require('../config');\r\n\r\nconst MenuFilter = ( {foodCategories, changeVisibleCategories, toggledFilter, setToggledFilter} ) => {\r\n    return (\r\n      <div className=\"menu-filter\">\r\n        {foodCategories.map((categoryName, key) => (\r\n          // generates filter buttons based on categories\r\n          <MenuFilterButton toggledFilter={toggledFilter} setToggledFilter={setToggledFilter} categoryName={categoryName} key={key} changeVisibleCategories={changeVisibleCategories()} />\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  export default MenuFilter;","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\util\\OrdersTableFunctions.js",[],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuItemCategory.js",["214","215","216"],"import React, { useState, useEffect} from 'react';\r\nimport '../css/MenuItemCategory.css';\r\nimport MenuItem from './MenuItem';\r\nimport MenuItemPopup from './MenuItemPopup';\r\nconst config = require('../config');\r\n\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\nconst MenuItemCategory = ({ categoryName, processForm, popupVisible, popupValues, togglePopup }) => {\r\n  // array that stores menu items for the current category\r\n  const [menuItems, setMenuItems] = useState(new Array());\r\n  const menuItemValues = [];\r\n\r\n  // useEffect() is called to get information from database\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:9000/item/\")\r\n    .then(async result => {\r\n      if (result.ok) {\r\n        const json = await result.json();\r\n\r\n        for(var i = 0; i < json.items.length; i++) {\r\n          // since \"featured\" isn't a category, we need to handle it differently\r\n          let isCategoryEqual = json.items[i].Category === categoryName;\r\n          let isFeatured = (categoryName === \"Featured\") && (json.items[i].isFeatured);\r\n\r\n          // is stored only if the category name is the same as json's category\r\n          if((json.items !== undefined) && (isCategoryEqual || isFeatured)) {\r\n            menuItemValues.push(json.items[i]);\r\n          }\r\n        }\r\n        setMenuItems(menuItemValues);\r\n      }\r\n      else {\r\n        console.log(\"error\");\r\n      }\r\n    })\r\n\r\n  /**\r\n   * sets dependency on categoryName, meaning that whenever categoryName \r\n   * changes, useEffect is called again. This is necessary so that when filters * are clicked data is actually reloaded\r\n   */\r\n  }, [categoryName]);\r\n  \r\n  return (\r\n      <>\r\n        {/** popup is created here, if it is visible it is rendered */}\r\n        {popupVisible ? <MenuItemPopup values={popupValues} togglePopup={togglePopup} processForm={processForm} /> : null}\r\n        <div className=\"menu-item-category\">\r\n          <h2> {categoryName} </h2>\r\n          <div className=\"menu-item-category-grid\">\r\n            {/** generate menu items based off of array */}\r\n            {menuItems.map((menuItem, key) => {\r\n              let title = menuItem.Name;\r\n              let image = menuItem.pictureURL;\r\n              let description = menuItem.Description;\r\n              // since some items will only have a family pricing option, we use individual as the default; if individual doesnt exist, use family instead\r\n              let price = (\"Individual\" in menuItem.Prices) ? menuItem.Prices.Individual : menuItem.Prices.Family\r\n              let accommodations = menuItem.Accomodations;\r\n              let priceOptions = menuItem.Prices;\r\n              let dietaryInfo = menuItem.dietaryInfo;\r\n\r\n              return <MenuItem title={title} image={image} price={price} description={description} togglePopup={togglePopup} key={key} dietaryInfo={dietaryInfo} priceOptions={priceOptions} accommodations={accommodations} />\r\n            })}\r\n          </div>\r\n        </div>\r\n      </>\r\n  )\r\n}\r\n\r\nexport default MenuItemCategory;\r\n","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuItemPopup.js",["217","218","219","220","221","222"],"import React, { useState } from 'react';\r\nimport '../css/MenuItemPopup.css';\r\nimport plus from '../media/plus.svg';\r\nimport minus from '../media/minus.svg';\r\n\r\nconst MenuItemPopup = ({ values, togglePopup, processForm }) => {\r\n    const [quantity, setQuantity] = useState(1);\r\n    // if individual price exists, use that as default; otherwise, use family\r\n    const [currPrice, setCurrPrice] = useState((\"Individual\" in values.get(\"price\")) ? values.get(\"price\").Individual : values.get(\"price\").Family);\r\n    const [totalPrice, setTotalPrice] = useState(currPrice);\r\n    const [accommodationCost, setAccommodationCost] = useState(0);\r\n\r\n    // handles changing price and quantity states\r\n    const changeQuantity = sign => {\r\n        // everything is fixed to 2 decimal places\r\n        if(sign == \"+\") {\r\n            setQuantity(quantity + 1);\r\n            // calulates on quantity + 1 b/c state hasn't updated yet\r\n            setTotalPrice((parseFloat(accommodationCost) + currPrice * (quantity + 1)).toFixed(2));\r\n        }\r\n        else if(sign == \"-\") {\r\n            if(quantity > 1) {\r\n                setQuantity(quantity - 1);\r\n                // calulates on quantity - 1 b/c state hasn't updated yet\r\n                setTotalPrice((parseFloat(accommodationCost) + currPrice * (quantity - 1)).toFixed(2));\r\n            }\r\n        }\r\n    }\r\n\r\n    //handles toggling price additions from accommodations\r\n    const handleAccommodation = (event, price) => {\r\n        // everything is fixed to 2 decimal places\r\n        if(event.target.checked) {\r\n            // parseFloat() is necessary because otherwise they get treated like strings for addition\r\n            setAccommodationCost((parseFloat(accommodationCost) + parseFloat(price)).toFixed(2));\r\n            setTotalPrice((parseFloat(totalPrice) + parseFloat(price)).toFixed(2));\r\n        } else {\r\n            setAccommodationCost((accommodationCost - price).toFixed(2));\r\n            setTotalPrice((totalPrice - price).toFixed(2));\r\n        }\r\n    }\r\n\r\n    // helper function to render the \r\n    const renderSize = (name, price, hasBothPrices) => {\r\n        return(\r\n            /** conditionally displays family size as an \"add-on\" if both are possible */\r\n            <label className=\"choice-label\">\r\n                <input onClick={() => handleSize(price)} type=\"radio\" name=\"size\" value={name} defaultChecked={(name == \"Individual\" || !(\"Individual\" in values.get(\"price\")))} required />\r\n                <span onClick={() => handleSize(price)} className=\"label-title\">{(hasBothPrices) ? name + \" +($\" + parseFloat(price - values.get(\"price\").Individual).toFixed(2) + \")\": name}</span>\r\n            </label>\r\n        );\r\n    }\r\n    // will be used when family price is introduced to toggle between\r\n    const handleSize = (newPrice) => {\r\n        setCurrPrice(newPrice);\r\n        // currPrice has yet to update, so still using newPrice\r\n        // fix to 2 decimal places\r\n        setTotalPrice((parseFloat(accommodationCost) + newPrice * (quantity)).toFixed(2));\r\n    }\r\n\r\n    const renderAccommodations = () => {\r\n        // return nothing if there are no accommodations\r\n        if(values.get(\"accommodations\").length == 0) return;\r\n        else {\r\n            return (\r\n                /** Header */\r\n                <div className=\"section accommodations-section\">\r\n                <div className=\"section-title\">\r\n                    <h3>Accommodations</h3>\r\n                    <i>optional</i>\r\n                </div>\r\n                {/* map through and render all accommodations */}\r\n                {values.get(\"accommodations\").map((accommodation) => {\r\n                    return(\r\n                        <label className=\"choice-label\">\r\n                            <input type=\"checkbox\" name=\"accommodations\" value={accommodation.Description} id={accommodation.Description} onChange={(e) => handleAccommodation(e, accommodation.Price)} />\r\n                            <span className=\"label-title\">{accommodation.Description + \" +($\" + parseFloat(accommodation.Price).toFixed(2) + \")\"}</span>\r\n                        </label>\r\n                    );\r\n                })}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    const numDietaryInfo = () => {\r\n        const dietaryInfo = Object.entries(values.get(\"dietary-info\"));\r\n        var count = 0;\r\n        for (const [key, value] of dietaryInfo) {\r\n            if(value) count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    const renderDietaryInfo = () => {\r\n        if (numDietaryInfo() == 0) return;\r\n        else {\r\n            return (\r\n                <>\r\n                <hr/>\r\n                <p className=\"dietary-info\">\r\n                    {(values.get(\"dietary-info\").vegan) ? \"*Vegan\" : null}\r\n                    {(values.get(\"dietary-info\").vegan) ? <br/> : null}\r\n                    {(values.get(\"dietary-info\").vegetarian) ? \"*Vegetarian\" : null}\r\n                    {(values.get(\"dietary-info\").vegetarian) ? <br/> : null}\r\n                    {(values.get(\"dietary-info\").glutenFree) ? \"*Gluten-free\" : null}\r\n                </p>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/** div that fades out the background */}\r\n            <div className=\"greyout\" onClick={togglePopup}></div>\r\n            <div className=\"menu-item-popup\">\r\n                <span className=\"close-button\" onClick={togglePopup}>+</span>\r\n                <div className=\"group-popup\">\r\n\r\n                    {/** Left side with dish details */}\r\n                    <div className=\"left-popup\">\r\n                        <div className=\"popup-image\" style={{backgroundImage: \"url(\" + values.get(\"image\") + \")\", backgroundSize:\"cover\"}}>\r\n                            <div className=\"popup-image-price\"><h3>{\"$\" + parseFloat(currPrice).toFixed(2)}</h3></div>\r\n                        </div>\r\n                        <div className=\"popup-item-info\">\r\n                            <h3 className=\"title-popup\">{values.get(\"title\")}</h3>\r\n                            <p className=\"desc-popup\">{values.get(\"description\")}</p>\r\n                            {renderDietaryInfo()}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/** right side with order options */}\r\n                    <div className=\"right-popup\">\r\n                        <form onSubmit={processForm} id=\"popup-form\">\r\n\r\n                            {/** sizing options */}\r\n                            <div className=\"section size-section\">\r\n                                <div className=\"section-title\">\r\n                                    <h3>Choose Size</h3>\r\n                                    <i>required</i>\r\n                                </div>\r\n                                {/** checks to ensure individual/family sizes exist; conditionally displays family size as an \"add-on\" if both are possible */}\r\n                                {(\"Individual\" in values.get(\"price\")) ? renderSize(\"Individual\", values.get(\"price\").Individual, false) : null}\r\n                                {(\"Family\" in values.get(\"price\")) ? renderSize(\"Family\", values.get(\"price\").Family, (\"Individual\" in values.get(\"price\"))) : null}\r\n                            </div>\r\n\r\n                            {/** accommodations options */}\r\n                            {renderAccommodations()}\r\n\r\n                            {/** custom instructions text area */}\r\n                            <div className=\"section instructions-section\">\r\n                                <div className=\"section-title\">\r\n                                    <h3>Special Instructions</h3>\r\n                                    <i>optional</i>\r\n                                </div>\r\n                                <p className=\"instructions-note\">Special accommodations can be made for orders placed in advanced but are not guaranteed, please <a href=\"/contact\">contact us</a> directly for more info.</p>\r\n                                <textarea name=\"instructions\" maxLength=\"75\" className=\"instructions-textarea\" />\r\n                            </div>\r\n\r\n                            {/** quantity selection */}\r\n                            <div className=\"section quantity-section\">\r\n                                <div className=\"section-title\"><h3>Quantity</h3></div>\r\n                                <div className=\"quantity-buttons\">\r\n                                    <button type=\"button\" className=\"button decrease-button\" onClick={() => {changeQuantity(\"-\");}\r\n                                    }><img src={minus} alt=\"Decrease Quantity\" /></button>\r\n                                    <span className=\"quantity-number\">{quantity}</span>\r\n                                    <button type=\"button\" className=\"button increase-button\" \r\n                                    onClick={() => {changeQuantity(\"+\");}}><img src={plus} alt=\"Increase Quantity\" /></button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/** hidden fields to pass along to the total price and  quantity */}\r\n                            <input name=\"name\" type=\"hidden\" value={values.get(\"title\")} />\r\n                            <input name=\"price\" type=\"hidden\" value={parseFloat(totalPrice).toFixed(2)} />\r\n                            <input name=\"quantity\" type=\"hidden\" value={quantity} />\r\n                            <input name=\"description\" type=\"hidden\" value={values.get(\"description\")} />\r\n                            <input className=\"submit-order-button\" type=\"submit\" value={\"Add \" + quantity + \" to cart: $\" + totalPrice} />\r\n                        </form>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n  \r\n    export default MenuItemPopup;\r\n","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\MenuItem.js",["223","224"],"import React from 'react';\r\nimport \"../css/MenuItem.css\";\r\nconst config = require('../config');\r\n\r\nconst MenuItem = ( {description, image, price, title, togglePopup, dietaryInfo, priceOptions, accommodations} ) => {\r\n    return (\r\n      <div className=\"menu-item\" onClick={() => togglePopup(title, description, priceOptions, image, dietaryInfo, accommodations)}>\r\n        <div className=\"menu-image\">\r\n          <img src={image}></img>\r\n        </div>\r\n        <div className=\"menu-text\">\r\n          <h3 className=\"menu-name\">{title}</h3>\r\n          <p className=\"menu-description\">{description}</p>\r\n        </div>\r\n        <div className=\"menu-absolutes\">\r\n          <p className=\"menu-price\">${price}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n  \r\nexport default MenuItem;","C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\AddMenuItemModal.js",["225","226"],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\EditMenuItemModal.js",["227","228"],"C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\UWEAST-Community-Kitchen\\frontend\\src\\components\\ChangeHeaderModal.js",["229"],{"ruleId":"230","replacedBy":"231"},{"ruleId":"232","replacedBy":"233"},{"ruleId":"234","severity":1,"message":"235","line":16,"column":8,"nodeType":"236","messageId":"237","endLine":16,"endColumn":14},{"ruleId":"234","severity":1,"message":"238","line":7,"column":7,"nodeType":"236","messageId":"237","endLine":7,"endColumn":18},{"ruleId":"234","severity":1,"message":"239","line":2,"column":8,"nodeType":"236","messageId":"237","endLine":2,"endColumn":14},{"ruleId":"234","severity":1,"message":"238","line":10,"column":7,"nodeType":"236","messageId":"237","endLine":10,"endColumn":18},{"ruleId":"234","severity":1,"message":"240","line":1,"column":17,"nodeType":"236","messageId":"237","endLine":1,"endColumn":25},{"ruleId":"234","severity":1,"message":"241","line":6,"column":7,"nodeType":"236","messageId":"237","endLine":6,"endColumn":13},{"ruleId":"242","severity":1,"message":"243","line":195,"column":8,"nodeType":"244","endLine":195,"endColumn":14,"suggestions":"245"},{"ruleId":"246","severity":1,"message":"247","line":53,"column":31,"nodeType":"248","messageId":"249","endLine":53,"endColumn":33},{"ruleId":"234","severity":1,"message":"250","line":180,"column":12,"nodeType":"236","messageId":"237","endLine":180,"endColumn":26},{"ruleId":"234","severity":1,"message":"238","line":6,"column":7,"nodeType":"236","messageId":"237","endLine":6,"endColumn":18},{"ruleId":"251","severity":1,"message":"252","line":20,"column":5,"nodeType":"253","messageId":"254","endLine":20,"endColumn":47},{"ruleId":"251","severity":1,"message":"252","line":23,"column":5,"nodeType":"253","messageId":"254","endLine":23,"endColumn":66},{"ruleId":"251","severity":1,"message":"252","line":27,"column":5,"nodeType":"253","messageId":"254","endLine":27,"endColumn":59},{"ruleId":"251","severity":1,"message":"252","line":34,"column":5,"nodeType":"253","messageId":"254","endLine":34,"endColumn":109},{"ruleId":"251","severity":1,"message":"252","line":43,"column":5,"nodeType":"253","messageId":"254","endLine":43,"endColumn":74},{"ruleId":"234","severity":1,"message":"255","line":1,"column":17,"nodeType":"236","messageId":"237","endLine":1,"endColumn":26},{"ruleId":"234","severity":1,"message":"256","line":2,"column":8,"nodeType":"236","messageId":"237","endLine":2,"endColumn":17},{"ruleId":"234","severity":1,"message":"238","line":6,"column":7,"nodeType":"236","messageId":"237","endLine":6,"endColumn":18},{"ruleId":"234","severity":1,"message":"257","line":1,"column":28,"nodeType":"236","messageId":"237","endLine":1,"endColumn":37},{"ruleId":"258","severity":1,"message":"259","line":24,"column":21,"nodeType":"260","endLine":24,"endColumn":31},{"ruleId":"258","severity":1,"message":"259","line":25,"column":21,"nodeType":"260","endLine":25,"endColumn":31},{"ruleId":"258","severity":1,"message":"259","line":26,"column":21,"nodeType":"260","endLine":26,"endColumn":31},{"ruleId":"258","severity":1,"message":"259","line":27,"column":21,"nodeType":"260","endLine":27,"endColumn":31},{"ruleId":"258","severity":1,"message":"259","line":28,"column":21,"nodeType":"260","endLine":28,"endColumn":31},{"ruleId":"234","severity":1,"message":"261","line":2,"column":8,"nodeType":"236","messageId":"237","endLine":2,"endColumn":24},{"ruleId":"234","severity":1,"message":"241","line":4,"column":7,"nodeType":"236","messageId":"237","endLine":4,"endColumn":13},{"ruleId":"234","severity":1,"message":"241","line":5,"column":7,"nodeType":"236","messageId":"237","endLine":5,"endColumn":13},{"ruleId":"246","severity":1,"message":"247","line":31,"column":21,"nodeType":"248","messageId":"249","endLine":31,"endColumn":23},{"ruleId":"246","severity":1,"message":"247","line":40,"column":35,"nodeType":"248","messageId":"249","endLine":40,"endColumn":37},{"ruleId":"234","severity":1,"message":"262","line":71,"column":9,"nodeType":"236","messageId":"237","endLine":71,"endColumn":13},{"ruleId":"246","severity":1,"message":"247","line":36,"column":27,"nodeType":"248","messageId":"249","endLine":36,"endColumn":29},{"ruleId":"246","severity":1,"message":"247","line":42,"column":33,"nodeType":"248","messageId":"249","endLine":42,"endColumn":35},{"ruleId":"246","severity":1,"message":"247","line":118,"column":28,"nodeType":"248","messageId":"249","endLine":118,"endColumn":30},{"ruleId":"246","severity":1,"message":"247","line":120,"column":35,"nodeType":"248","messageId":"249","endLine":120,"endColumn":37},{"ruleId":"234","severity":1,"message":"255","line":1,"column":17,"nodeType":"236","messageId":"237","endLine":1,"endColumn":26},{"ruleId":"234","severity":1,"message":"238","line":4,"column":7,"nodeType":"236","messageId":"237","endLine":4,"endColumn":18},{"ruleId":"234","severity":1,"message":"238","line":6,"column":7,"nodeType":"236","messageId":"237","endLine":6,"endColumn":18},{"ruleId":"263","severity":1,"message":"264","line":15,"column":74,"nodeType":"265","endLine":15,"endColumn":83},{"ruleId":"246","severity":1,"message":"266","line":12,"column":73,"nodeType":"248","messageId":"249","endLine":12,"endColumn":75},{"ruleId":"234","severity":1,"message":"255","line":1,"column":17,"nodeType":"236","messageId":"237","endLine":1,"endColumn":26},{"ruleId":"234","severity":1,"message":"241","line":4,"column":7,"nodeType":"236","messageId":"237","endLine":4,"endColumn":13},{"ruleId":"234","severity":1,"message":"238","line":7,"column":7,"nodeType":"236","messageId":"237","endLine":7,"endColumn":18},{"ruleId":"267","severity":1,"message":"268","line":11,"column":46,"nodeType":"269","messageId":"270","endLine":11,"endColumn":57},{"ruleId":"242","severity":1,"message":"271","line":42,"column":6,"nodeType":"244","endLine":42,"endColumn":20,"suggestions":"272"},{"ruleId":"246","severity":1,"message":"247","line":16,"column":17,"nodeType":"248","messageId":"249","endLine":16,"endColumn":19},{"ruleId":"246","severity":1,"message":"247","line":21,"column":22,"nodeType":"248","messageId":"249","endLine":21,"endColumn":24},{"ruleId":"246","severity":1,"message":"247","line":48,"column":118,"nodeType":"248","messageId":"249","endLine":48,"endColumn":120},{"ruleId":"246","severity":1,"message":"247","line":63,"column":48,"nodeType":"248","messageId":"249","endLine":63,"endColumn":50},{"ruleId":"234","severity":1,"message":"273","line":89,"column":21,"nodeType":"236","messageId":"237","endLine":89,"endColumn":24},{"ruleId":"246","severity":1,"message":"247","line":96,"column":30,"nodeType":"248","messageId":"249","endLine":96,"endColumn":32},{"ruleId":"234","severity":1,"message":"241","line":3,"column":7,"nodeType":"236","messageId":"237","endLine":3,"endColumn":13},{"ruleId":"274","severity":1,"message":"275","line":9,"column":11,"nodeType":"276","endLine":9,"endColumn":28},{"ruleId":"277","severity":1,"message":"278","line":320,"column":63,"nodeType":"279","messageId":"280","endLine":320,"endColumn":65},{"ruleId":"277","severity":1,"message":"278","line":322,"column":94,"nodeType":"279","messageId":"280","endLine":322,"endColumn":96},{"ruleId":"277","severity":1,"message":"278","line":326,"column":63,"nodeType":"279","messageId":"280","endLine":326,"endColumn":65},{"ruleId":"277","severity":1,"message":"278","line":328,"column":94,"nodeType":"279","messageId":"280","endLine":328,"endColumn":96},{"ruleId":"234","severity":1,"message":"238","line":7,"column":7,"nodeType":"236","messageId":"237","endLine":7,"endColumn":18},"no-native-reassign",["281"],"no-negated-in-lhs",["282"],"no-unused-vars","'Orders' is defined but never used.","Identifier","unusedVar","'BACKEND_URL' is assigned a value but never used.","'NavBar' is defined but never used.","'useState' is defined but never used.","'config' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'history' and 'paypalOrderObject'. Either include them or remove the dependency array.","ArrayExpression",["283"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'checkboxUpdate' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'Component' is defined but never used.","'SearchBar' is defined but never used.","'useEffect' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'MenuFilterButton' is defined but never used.","'json' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","Expected '!==' and instead saw '!='.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","React Hook useEffect has a missing dependency: 'menuItemValues'. Either include it or remove the dependency array.",["284"],"'key' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","no-global-assign","no-unsafe-negation",{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},"Update the dependencies array to be: [cart, history, paypalOrderObject]",{"range":"289","text":"290"},"Update the dependencies array to be: [categoryName, menuItemValues]",{"range":"291","text":"292"},[7571,7577],"[cart, history, paypalOrderObject]",[1594,1608],"[categoryName, menuItemValues]"]