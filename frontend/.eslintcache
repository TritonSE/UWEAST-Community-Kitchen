[{"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/index.js":"1","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/App.js":"2","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/reportWebVitals.js":"3","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Contact.js":"4","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Admin.js":"5","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Register.js":"6","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Menu.js":"7","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Login.js":"8","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/ResetPassword.js":"9","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/CartSummary.js":"10","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/NavBar.js":"11","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ContactMap.js":"12","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ContactForm.js":"13","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Orders.js":"14","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Emails.js":"15","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/CartPreview.js":"16","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/Banner.js":"17","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/config.js":"18","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/SearchSection.js":"19","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ForgotPasswordDialogue.js":"20","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/util/Auth.js":"21","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuSection.js":"22","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/PayPal.js":"23","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/AdminMenuItems.js":"24","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/CustomTimePicker.js":"25","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItemPopup.js":"26","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ChangeHeaderModal.js":"27","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/EditMenuItemModal.js":"28","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/AddMenuItemModal.js":"29","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/OrdersTable.js":"30","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ChangeSecondaryEmailScreen.js":"31","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ChangeEmailScreen.js":"32","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuFilter.js":"33","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItems.js":"34","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuFilterButton.js":"35","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItemCategory.js":"36","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItem.js":"37","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/OrdersTableColumns.js":"38","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/util/OrdersTableFunctions.js":"39","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/About.js":"40","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Custom404.js":"41"},{"size":500,"mtime":1615153895037,"results":"42","hashOfConfig":"43"},{"size":2228,"mtime":1615426190929,"results":"44","hashOfConfig":"43"},{"size":362,"mtime":1615153895079,"results":"45","hashOfConfig":"43"},{"size":749,"mtime":1615153895052,"results":"46","hashOfConfig":"43"},{"size":5177,"mtime":1615426191078,"results":"47","hashOfConfig":"43"},{"size":14073,"mtime":1615426191111,"results":"48","hashOfConfig":"43"},{"size":9550,"mtime":1615444428721,"results":"49","hashOfConfig":"43"},{"size":9455,"mtime":1615426191097,"results":"50","hashOfConfig":"43"},{"size":13346,"mtime":1615426191118,"results":"51","hashOfConfig":"43"},{"size":17670,"mtime":1615444428275,"results":"52","hashOfConfig":"43"},{"size":5580,"mtime":1615444428642,"results":"53","hashOfConfig":"43"},{"size":2991,"mtime":1615426190978,"results":"54","hashOfConfig":"43"},{"size":3050,"mtime":1615426190972,"results":"55","hashOfConfig":"43"},{"size":5318,"mtime":1615333722587,"results":"56","hashOfConfig":"43"},{"size":3666,"mtime":1615153895053,"results":"57","hashOfConfig":"43"},{"size":4302,"mtime":1615191921200,"results":"58","hashOfConfig":"43"},{"size":453,"mtime":1615426190958,"results":"59","hashOfConfig":"43"},{"size":297,"mtime":1615153895021,"results":"60","hashOfConfig":"43"},{"size":1158,"mtime":1615426191043,"results":"61","hashOfConfig":"43"},{"size":6165,"mtime":1615426190992,"results":"62","hashOfConfig":"43"},{"size":1662,"mtime":1615426191126,"results":"63","hashOfConfig":"43"},{"size":4405,"mtime":1615426191014,"results":"64","hashOfConfig":"43"},{"size":9480,"mtime":1615426191028,"results":"65","hashOfConfig":"43"},{"size":21626,"mtime":1615444428206,"results":"66","hashOfConfig":"43"},{"size":1948,"mtime":1615191921215,"results":"67","hashOfConfig":"43"},{"size":14034,"mtime":1615444428420,"results":"68","hashOfConfig":"43"},{"size":6573,"mtime":1615191921207,"results":"69","hashOfConfig":"43"},{"size":25609,"mtime":1615426190985,"results":"70","hashOfConfig":"43"},{"size":25178,"mtime":1615426190938,"results":"71","hashOfConfig":"43"},{"size":5067,"mtime":1615191926046,"results":"72","hashOfConfig":"43"},{"size":7394,"mtime":1615191926042,"results":"73","hashOfConfig":"43"},{"size":5351,"mtime":1615191921205,"results":"74","hashOfConfig":"43"},{"size":864,"mtime":1615426191000,"results":"75","hashOfConfig":"43"},{"size":919,"mtime":1615153894997,"results":"76","hashOfConfig":"43"},{"size":1028,"mtime":1615153894983,"results":"77","hashOfConfig":"43"},{"size":3307,"mtime":1615191921222,"results":"78","hashOfConfig":"43"},{"size":977,"mtime":1615426191007,"results":"79","hashOfConfig":"43"},{"size":3720,"mtime":1615191926048,"results":"80","hashOfConfig":"43"},{"size":6399,"mtime":1615191926053,"results":"81","hashOfConfig":"43"},{"size":1613,"mtime":1615426191069,"results":"82","hashOfConfig":"43"},{"size":1389,"mtime":1615426191089,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"a4pre7",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"86"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"86"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"86"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"86"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"86"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"86"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"86"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"86"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"86"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"86"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"86"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"86"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"86"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"86"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"86"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"86"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"86"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"86"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/index.js",[],["187","188"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/App.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/reportWebVitals.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Contact.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Admin.js",["189"],"/**\n  * This file contains renders the Admin page. It includes a Nav Bar that links\n  * to the orders page, menu page, update emails page, and change passwords page.\n  *\n  * @summary    Renders admin page\n  * @author     PatrickBrown1\n  */\n \n import React, { useEffect } from 'react';\n import Navbar from '../components/NavBar';\n import AdminMenuItems from \"../components/AdminMenuItems\";\n import Orders from \"./Orders\";\n import Emails from \"./Emails\";\n import { isAuthenticated } from '../util/Auth';\n import {Redirect} from 'react-router-dom';\n import CircularProgress from '@material-ui/core/CircularProgress';\n \n import '../css/Admin.css';\n import \"../css/AccountsPages.css\";\n \n export default function Admin() {\n \n     // constructor(props) {\n     //     super(props);\n     //     this.state = {\n     //         currentScreen: \"orders\"\n     //     }\n \n     //     //Admin NavBar binding\n     //     this.adminNavBar = this.adminNavBar.bind(this);\n     // }\n \n     const [state, setState] = React.useState({\n         isAuthenticatingUser: true,\n         isUserAuthenticated: false,\n         currentScreen: \"orders\"\n       });\n \n     useEffect(() => {\n         isAuthenticated().then(async result => {\n           setState({ ...state, isAuthenticatingUser: false, isUserAuthenticated: result});\n         })\n       }, []);\n \n     /**\n      * Renders the admin page navigation bar between orders, menu, and email screens.\n      */\n     const adminNavBar = () => {\n         var currentScreen = state.currentScreen;\n         return(\n             <div className=\"adminNavContainer\">\n                 { currentScreen === \"orders\" ? \n                     <h2 className=\"adminNavSelected\" onClick={() => setState({...state, currentScreen: \"orders\"})}>\n                         All Orders\n                     </h2> : \n                     <h2 className=\"adminNavUnselected\" onClick={() => setState({...state, currentScreen: \"orders\"})}>\n                         All Orders\n                     </h2>\n                 }\n                 { currentScreen === \"menu\" ? \n                     <h2 className=\"adminNavSelected\" onClick={() => setState({...state, currentScreen: \"menu\"})}>\n                         Edit Menu\n                     </h2> : \n                     <h2 className=\"adminNavUnselected\" onClick={() => setState({...state, currentScreen: \"menu\"})}>\n                         Edit Menu\n                     </h2>\n                 }\n                 { currentScreen === \"email\" ? \n                     <h2 className=\"adminNavSelected\" onClick={() => setState({...state, currentScreen: \"email\"})}>\n                         Email\n                     </h2> : \n                     <h2 className=\"adminNavUnselected\" onClick={() => setState({...state, currentScreen: \"email\"})}>\n                         Email\n                     </h2>\n                 }\n                  { currentScreen === \"resetPassword\" ? \n                     <h2 className=\"adminNavSelected\" onClick={() => setState({...state, currentScreen: \"resetPassword\"})}>\n                         Reset Password\n                     </h2> : \n                     <h2 className=\"adminNavUnselected\" onClick={() => setState({...state, currentScreen: \"resetPassword\"})}>\n                         Reset Password\n                     </h2>\n                 }\n             </div>\n         );\n     }\n \n         // redirect to login if user is trying to access admin panel without being logged in \n         if(state.isAuthenticatingUser){\n             return (\n                 <html className=\"Account-Html\">\n                     <body className=\"Account-Body\">\n                         <div className=\"NavBar\">\n                                 <Navbar/>\n                         </div>\n                         <div className=\"spinner\">\n                             <CircularProgress color='inherit' size={40}/>\n                         </div>\n                     </body>\n                 </html>\n             );\n         }\n         else if (!state.isUserAuthenticated){\n             return (\n                 <Redirect to=\"/login\"/> \n             );\n         } else {\n             return (\n                 <div>\n                 {/* The navbar on top of the page */}\n                   <Navbar/>\n     \n                   {/* This is the contents on the admin page */}\n                   <div class=\"admin-section\">\n                         {adminNavBar()}\n     \n                         {/* <div class=\"col-12\">\n                             <h2 class=\"admin-title\">Orders</h2>\n                             <p>View placed orders and mark them as fulfilled.</p>\n                             <a class=\"btn btn-primary\" href=\"/orders\" role=\"button\">Orders</a>\n                         </div> */}\n                         {state.currentScreen === \"orders\" && <Orders />}\n                         {state.currentScreen === \"menu\" && <AdminMenuItems />}\n                         {state.currentScreen === \"email\" && <Emails />}\n                         {state.currentScreen === \"resetPassword\" && <Redirect to=\"/reset-password\"/>}\n                     </div>       \n               </div>\n             );\n         }\n   };\n ","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Register.js",["190"],"/**\n * The file is responsible for the display and functionality of admin account registration, allowing \n * a non-registered user to make an admin account for themselves provided they have the necessary clearance. \n * Account registration is constrained to unique email addresses (i.e., each email address can have at most one\n * admin account associated with it), and knowledge of the secret key. Secret key has been pre-decided by the \n * cliet, and is confident to them. \n * \n * Successful registration attempts will give the user a special admin JWT so they do not need to re-sign in,\n * and redirect them to the admin page. Unsuccessful registration attempts will spew error messages. \n * \n * Once registration is successful, any subsequent attempts to access the site as an admin must be done\n * using the login page. \n * \n * Note: A logged in user will not have access to the registeration page, as they are assumed to already have a account.\n * \n * @summary     Displays registeration page and allows new user to register as a site admin. \n * @author      Amrit Kaur Singh\n */\n\nimport React, { useEffect } from 'react';\nimport { Link, Redirect, useHistory } from 'react-router-dom';\nimport { \n  TextField, Button, Grid, \n  Snackbar, Typography \n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { isAuthenticated, setJWT } from '../util/Auth';\nimport Navbar from '../components/NavBar';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport DOMPurify from 'dompurify';\n\n\nimport \"../css/AccountsPages.css\";\n\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\nconst useStyles = makeStyles((theme) => ({\n\n  centered: {\n    textAlign: 'center'\n  },\n  form: {\n    // input field - general layout\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '95%'\n    },\n    \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"black\"\n    },\n    \"& .MuiInputLabel-outlined.Mui-focused\": {\n      color: \"black\"\n    },\n    '& .MuiTypography-root': {\n      margin: theme.spacing(1),\n      width: '100%'\n    },\n\n    '& .MuiButton-root': {\n      margin: theme.spacing(3),\n      color: 'black',\n      background: '#F9CE1D',\n      width:'30%'\n    }\n  },\n  title: {\n    margin: theme.spacing(2),\n    textAlign: 'center',\n    fontWeight: 'bolder',\n    textTransform: 'uppercase'\n  }\n}));\n\nexport default function Register() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [state, setState] = React.useState({\n    isAuthenticatingUser: true,\n    isUserAuthenticated: false,\n    email: '',\n    password: '',\n    passwordConfirmation: '',\n    secret: '',\n    showPassword: {\n      password: false,\n      passwordConfirmation: false,\n      secret: false\n    },\n    snack: {\n      message: '',\n      open: false\n    },\n    errors: {\n      email: false,\n      password: false,\n      passwordConfirmation: false,\n      secret: false\n    },\n    form_disabled: false\n  });\n\n  // checks if user is already authenticated (logged in)\n  useEffect(() => {\n    isAuthenticated().then(async result => {\n\n      setState({...state, isAuthenticatingUser: false, isUserAuthenticated: result});\n    })\n  }, []);\n\n  // updates given state with given value \n  const handleChange = (prop) => (event) => {\n    setState({ ...state, [prop]: event.target.value });\n  };\n\n  const handleClickShowPassword = () => {\n    setState({ ...state, showPassword: {...state.showPassword, password: !state.showPassword.password } });\n  };\n\n  const handleClickShowPasswordConfirmation = () => {\n    setState({ ...state, showPassword: { ...state.showPassword, passwordConfirmation: !state.showPassword.passwordConfirmation } });\n  };\n\n  const handleClickShowSecret = () => {\n    setState({ ...state, showPassword: {...state.showPassword, secret: !state.showPassword.secret } });\n  };\n\n  /**\n   * Handles submission of the form (button click). Validates form data for completion/length, making a backend request to Users DB for secret key autentication + \n   * email uniqueness. If registeration succeeds, user is redirected to admin page and added to user collection. Otherwise, an error message appears. \n   * \n   * @param {*} event - Reason for function call \n   * @returns {void} \n   */\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setState({ ...state, form_disabled: true });\n\n    // display loading cursor \n    document.body.style.cursor= 'wait';\n\n    // sanitize input - XSS attack protection \n    state.email =  DOMPurify.sanitize(state.email);\n    state.password =  DOMPurify.sanitize(state.password);\n    state.passwordConfirmation =  DOMPurify.sanitize(state.passwordConfirmation);\n    state.secret =  DOMPurify.sanitize(state.secret);\n\n    const submission = {\n      email: state.email,\n      password: state.password,\n      secret: state.secret\n    };\n\n    let email = false;\n    let password = false; \n    let passwordConfirmation = false;\n    let secret = false; \n\n    // check if either field is empty\n    if (state.email === ''){\n        email = true;\n    }\n    if (state.password === ''){\n        password = true;\n    }\n    if (state.passwordConfirmation === ''){\n      passwordConfirmation = true;\n    }\n    if (state.secret === ''){\n      secret = true;\n    }\n    if(email + password + passwordConfirmation + secret > 0){\n        document.body.style.cursor= null;\n        setState({...state, errors: {email: email, password: password, passwordConfirmation: passwordConfirmation, secret: secret}, form_disabled: false, snack: {message: 'Please fill out all required fields.', open: true}});\n        return;\n    }\n    // check password length\n    if (submission.password.length < 6) {\n      document.body.style.cursor= null;\n      setState({...state, errors: {email: false, password: true, passwordConfirmation: false, secret: false}, form_disabled: false,  snack: {message: 'Password must be at least 6 characters long.', open: true}});\n      return;\n    }\n\n    // check passwords match\n    if (state.password !== state.passwordConfirmation) {\n      document.body.style.cursor= null;\n      setState({...state,errors: {email: false, password: true, passwordConfirmation: true, secret: false}, form_disabled: false, snack: {message: 'Passwords Do Not Match.', open: true}});\n      return;\n    }\n\n    try {\n      // attempt to register with given credentials \n      const response = await fetch(`${BACKEND_URL}user/register`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(submission)\n      });\n\n      // successful registration\n      if (response.ok) {\n        const json = await response.json();\n        setJWT(json.token);\n        history.push(\"/admin\");\n        return;\n      }\n      // invalid credentials \n      else if (response.status === 401) {\n        document.body.style.cursor= null;\n        setState({...state, errors: {email: false, password: false, passwordConfirmation: false, secret: true}, form_disabled: false, snack: {message: 'Could not register account: Invalid Secret Key!', open: true}});\n      }\n      // duplicate user \n      else if (response.status === 409) {\n        document.body.style.cursor= null;\n        setState({...state, form_disabled: false, errors: {email: true, password: false, passwordConfirmation: false, secret: false}, snack: {message: 'Could not register account: Email already in use!', open: true}});\n      }\n      // any other server response\n      else {\n        document.body.style.cursor= null;\n        const text = await response.text();\n        setState({...state, errors: {email: false, password: false, passwordConfirmation: false, secret: false}, form_disabled: false, snack: {message: `Could not register account: ${text}`, open: true}});\n      }\n    } \n    // general error\n    catch (error) {\n      document.body.style.cursor= null;\n      setState({...state, errors: {email: false, password: false, passwordConfirmation: false, secret: false}, form_disabled: false, snack: {message: `An error occurred: ${error.message}`, open: true}});\n    }\n  };\n\n  const handleSnackClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setState({...state, snack: {...state.snack, open: false}});\n  };\n\n  // loading screen while user is being authenticated (prevent double logins)\n  if(state.isAuthenticatingUser){\n    return(\n      <html className=\"Account-Html\">\n        <body className=\"Account-Body\">\n          <div className=\"NavBar\">\n                <Navbar/>\n          </div>\n          <div className=\"spinner\">\n            <CircularProgress color='inherit' size={40}/>\n          </div>\n        </body>\n    </html>\n    )\n  // authenticated user, redirect to admin\n  } else if(state.isUserAuthenticated){\n    return (<Redirect to=\"/admin\"/>)\n\n  // non-authenticated user, display registeration page\n  } else {\n    return (\n      <html className=\"Account-Html\">\n        <body className=\"Account-Body\">\n            {/* navbar */}\n            <div className=\"NavBar\">\n              <Navbar/>\n            </div>     \n            <Grid\n                  container\n                  spacing={0}\n                  alignItems=\"center\"\n                  justify=\"center\"\n                  className=\"Account-Box\"\n                  >\n                  <Grid item md={6} xs={12}>\n                  <div className=\"Border\">\n                      {/* title + description  */}\n                      <Typography variant=\"h4\" className={classes.title}>\n                      Register New Account\n                      </Typography>\n                      <p className={classes.centered} style={{color: \"#8d8d8d\"}}> Fill out the fields below to create a new account </p>\n                      {/* form  */}\n                      <form className={classes.form} onSubmit={handleSubmit}>\n                      {/* email field  */}\n                      <TextField label='Email' variant='outlined' type='email' onChange={handleChange('email')} error={state.errors.email}/>\n                      {/* password field  */}\n                      <TextField \n                      label='Password' \n                      variant='outlined' \n                      type={state.showPassword.password ? 'text' : 'password'} \n                      onChange={handleChange('password')} \n                      error={state.errors.password}\n                      InputProps={{\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <IconButton\n                              aria-label=\"toggle password visibility\"\n                              onClick={handleClickShowPassword}\n                            >\n                              {state.showPassword.password ? <Visibility /> : <VisibilityOff />}\n                            </IconButton>\n                          </InputAdornment>\n                        )\n                      }\n                    }\n                      />\n                      {/* confirm password field  */}\n                      <TextField \n                      label='Confirm Password' \n                      variant='outlined' \n                      type={state.showPassword.passwordConfirmation ? 'text' : 'password'}\n                      onChange={handleChange('passwordConfirmation')} \n                      error={state.errors.passwordConfirmation}\n                      InputProps={{\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <IconButton\n                              aria-label=\"toggle password visibility\"\n                              onClick={handleClickShowPasswordConfirmation}\n                            >\n                              {state.showPassword.passwordConfirmation ? <Visibility /> : <VisibilityOff />}\n                            </IconButton>\n                          </InputAdornment>\n                        )\n                      }\n                    }\n                      />\n                      {/* secret key field  */}\n                      <TextField \n                      label='Secret Key' \n                      variant='outlined' \n                      type={state.showPassword.secret ? 'text' : 'password'}\n                      onChange={handleChange('secret')} \n                      error={state.errors.secret}\n                      InputProps={{\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <IconButton\n                              aria-label=\"toggle password visibility\"\n                              onClick={handleClickShowSecret}\n                            >\n                              {state.showPassword.secret ? <Visibility /> : <VisibilityOff />}\n                            </IconButton>\n                          </InputAdornment>\n                        )\n                      }\n                    }\n                      />\n                      {/* login link  */}\n                      <Link to=\"login\"><Typography>Already have an account? Sign-In</Typography></Link>\n                      {/* register button  */}\n                      <div className={classes.centered}>\n                          <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={state.form_disabled}>Register</Button>\n                      </div>\n                      </form>\n                    </div>         \n                  </Grid>   \n                  \n              </Grid> \n              {/* error messages displayed at bottom of screen */}\n              <Snackbar open={state.snack.open} autoHideDuration={6000} onClose={handleSnackClose} message={state.snack.message}/>\n            </body>\n      </html>\n    )\n  }\n}","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Menu.js",["191"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Login.js",["192"],"/**\n * The file is responsible for the display and functionality of login, allowing a registered user \n * to be authenticated provided they give the correct email and password. For all other attempts, \n * login is blocked with some error message as indication. Upon successful verification of user, the \n * user is given an JWT admin token that will allow them administration functionality on the site, \n * namely access to the site's Admin page. \n * \n * @summary     Displays login page and allows registed user to login as a site admin. \n * @author      Amrit Kaur Singh\n */\n\nimport React from 'react';\nimport { Link, Redirect, useHistory } from 'react-router-dom';\nimport { \n  TextField, Button,  \n  Snackbar, Typography \n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { isAuthenticated, setJWT} from '../util/Auth';\nimport Navbar from '../components/NavBar';\nimport { useEffect } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport DOMPurify from 'dompurify';\n\n\nimport \"../css/AccountsPages.css\";\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\nconst useStyles = makeStyles((theme) => ({\n\n  centered: {\n    textAlign: 'center'\n  },\n  form: {\n    // input field - general layout\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '95%'\n    },\n    \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"black\"\n    },\n    \"& .MuiInputLabel-outlined.Mui-focused\": {\n      color: \"black\"\n    },\n    '& .MuiTypography-root': {\n      margin: theme.spacing(1),\n      width: '100%'\n    },\n\n    '& .MuiButton-root': {\n      margin: theme.spacing(3),\n      color: 'black',\n      background: '#F9CE1D',\n      width:'30%'\n    }\n  },\n  title: {\n    margin: theme.spacing(2),\n    textAlign: 'center',\n    fontWeight: 'bolder',\n    textTransform: 'uppercase'\n  }\n}));\n\nexport default function Login() {\n\n  const classes = useStyles();\n  const history = useHistory();\n  const [state, setState] = React.useState({\n    isAuthenticatingUser: true,\n    isUserAuthenticated: false,\n    email: '',\n    password: '',\n    showPassword: false,\n    snack: {\n      message: '',\n      open: false\n    },\n    errors: {\n      email: false,\n      password: false\n    },\n    form_disabled: false\n  });\n\n\n  // checks if user is already authenticated (logged in)\n  useEffect(() => {\n    isAuthenticated().then(async result => {\n      setState({...state, isAuthenticatingUser: false, isUserAuthenticated: result});\n    })\n  }, []);\n\n  // updates given state with given value \n  const handleChange = (prop) => (event) => {\n    setState({ ...state, [prop]: event.target.value });\n  };\n\n  const handleClickShowPassword = () => {\n    setState({ ...state, showPassword: !state.showPassword });\n  };\n\n  \n  /**\n   * Handles submission of the form (button click). Validates form data for completion/length, making a backend request to Users Collection for user authentication. If\n   * user is authenticated, user is redirected to admin page and given a special admin JWT. Otherwise, an error message appears. \n   * \n   * @param {*} event - Reason for function call \n   * @returns {void} \n   */\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    // temporarily disable form to prevent spam clicks\n    setState({ ...state, form_disabled: true });\n\n    // display loading cursor \n    document.body.style.cursor= 'wait';\n\n    // sanitize input - XSS attack protection \n    state.email =  DOMPurify.sanitize(state.email);\n    state.password =  DOMPurify.sanitize(state.password);\n\n    const submission = {\n      email: state.email,\n      password: state.password\n    };\n\n    // check if either field is empty\n    let email = false;\n    let password = false; \n\n    if(state.email === ''){\n        email = true;\n    }\n    if(state.password === ''){\n        password = true;\n    }\n    if(email + password > 0){\n        document.body.style.cursor= null;\n        setState({...state, errors: {email: email, password: password}, form_disabled: false, snack: {message: 'Please fill out all required fields.', open: true}});\n        return;\n    }\n   \n    // check password length\n    if (submission.password.length < 6) {\n      document.body.style.cursor= null;\n      setState({...state, errors: {email: false, password: true}, form_disabled: false, snack: {message: 'Password must be at least 6 characters long.', open: true}});\n      return;\n    }\n    try {\n\n      // attempt to login with given credentials \n      const response = await fetch(`${BACKEND_URL}user/login`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(submission)\n      });\n\n      // successful login\n      if (response.ok) {\n\n        // set admin JWT \n        const json = await response.json();\n        setJWT(json.token);\n        document.body.style.cursor= null;\n        // admin redirect\n        history.push(\"/admin\");\n        return;\n      }\n      // invalid credentials\n      else if (response.status === 401) {\n        document.body.style.cursor= null;\n        setState({...state, errors: {email: true, password: true}, form_disabled: false, snack: {message: 'Invalid Login: Email or password not recognized.', open: true}});\n      }\n      // any other server response\n      else {\n        const text = await response.text();\n        document.body.style.cursor= null;\n        setState({...state, form_disabled: false, errors: {email: false, password: false}, snack: {message: `Could not log in: ${text}`, open: true}});\n      }\n    } \n    // general error\n    catch (error) {\n      document.body.style.cursor= null;\n      setState({...state, form_disabled: false, errors: {email: false, password: false}, snack: {message: `An error occurred: ${error.message}`, open: true}});\n    }\n  };\n\n  const handleSnackClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setState({...state, snack: {...state.snack, open: false}});\n  };\n\n  // loading screen while user is being authenticated (prevent double logins)\n  if(state.isAuthenticatingUser){\n    return(\n      <html className=\"Account-Html\">\n        <body className=\"Account-Body\">\n          <div className=\"NavBar\">\n                <Navbar/>\n          </div>\n          <div className=\"spinner\">\n            <CircularProgress color='inherit' size={40}/>\n          </div>\n        </body>\n    </html>\n    )\n  \n  // authenticated user, redirect to admin\n  } else if(state.isUserAuthenticated){\n    return(\n      <Redirect to=\"/admin\"/>\n    )\n  // non-authenticated user, display login page\n  } else {\n    return (\n      <html className=\"Account-Html\">\n        <body className=\"Account-Body\">\n          {/* navbar */}\n          <div className=\"NavBar\">\n            <Navbar/>\n          </div>\n          <div className=\"Account-Box\">\n            <div className=\"Border\">\n              {/* title + description  */}\n              <Typography variant=\"h4\" className={classes.title} style={{fontSize: \"2.5rem\"}} > Login </Typography>\n              <p className={classes.centered} style={{color: \"#8d8d8d\"}}> Sign-in into an existing account below </p>\n              {/* form  */}\n              <form className={classes.form} onSubmit={handleSubmit}>\n                    {/* email field */}\n                    <TextField label='Email' variant='outlined' type='email' onChange={handleChange('email')} error={state.errors.email}/>\n                    {/* password field */}\n                    <TextField \n                    label='Password' \n                    variant='outlined' \n                    type={state.showPassword ? 'text' : 'password'} \n                    onChange={handleChange('password')} \n                    error={state.errors.password}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            aria-label=\"toggle password visibility\"\n                            onClick={handleClickShowPassword}\n                          >\n                            {state.showPassword ? <Visibility /> : <VisibilityOff />}\n                          </IconButton>\n                        </InputAdornment>\n                      )\n                    }\n                  }\n                    />\n                    {/* registration link */}\n                    <Link to=\"register\"><Typography>Register Account</Typography></Link>\n                    {/* reset password link */}\n                    <Link to=\"reset-password\"><Typography>Reset Password</Typography></Link>\n                    {/* login button */}\n                    <div className={classes.centered}>\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={state.form_disabled}>Login</Button>\n                    </div>\n                </form>\n              </div>\n            </div>\n        </body>\n          {/* error messages displayed at bottom of screen */}\n          <Snackbar open={state.snack.open} autoHideDuration={6000} onClose={handleSnackClose} message={state.snack.message}/>\n      </html>\n    );\n  }\n}","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/ResetPassword.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/CartSummary.js",["193"],"/**\n * Cart summary component that contains the entire checkout process. It renders the cart as a popup on\n * desktop/tablet and as a separate page on mobile, and includes a date and time picker, a list of the\n * items in the cart with the option to edit or remove each item, the total price, and the paypal\n * component to pay for the order. This file depends on the Navbar, PayPal, CustomTimePicker, and\n * MenuItemPopup components.\n * \n * @summary Displays the cart and checkout process, with functionality to select pickup date/time and \n * edit cart.\n * @author Dhanush Nanjunda Reddy\n */\nimport React, { useState, useEffect } from 'react';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport DateFnsUtils from '@date-io/date-fns';\nimport moment from \"moment\";\nimport '../css/CartSummary.css';\nimport { Button } from 'react-bootstrap';\nimport CustomTimePicker from '../components/CustomTimePicker';\nimport { useCookies } from 'react-cookie';\nimport { useHistory } from \"react-router-dom\";\nimport PayPal from '../components/PayPal';\nimport Navbar from '../components/NavBar';\nimport MenuItemPopup from '../components/MenuItemPopup';\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\n/**\n * displays items currently in the cart and updates subtotal, tax, and total\n * \n * @param {*} cart - current cart object\n * @param {*} popupFunc - function to call to edit an item\n * @param {*} removeItem - function to call to remove an item\n * @returns {div} - a div that contains all items, one on each row\n */\nfunction loadItems(cart, popupFunc, removeItem) {\n    return (\n        <div>\n            {/* iterates through cart items and displays each in a row */}\n            {cart.items.map((item, ind) => {\n\n                //checks if any accommodations were selected and adds them to be displayed\n                let accom = \"\";\n                if (item[6] && Array.isArray(item[6])) {\n                    item[6].forEach((accommodation) => {\n                        accom = accom + \", \" + accommodation;\n                    })\n                } else if (item[6]) {\n                    accom = \", \" + item[6];\n                }\n\n                //item size and accommodations that need to be displayed\n                let size = item[4];\n                let extraInfo = size + accom;\n\n                return (\n                    <div key={ind} className=\"summary-item\">\n                        <div className=\"item-wrapper\">\n                            <span className=\"thumbnail-background thumb-image\">{ind + 1}</span>\n                            <span className=\"item-name\">{item[3]} X {item[1]}<br />\n                                <span className=\"item-descript\">{extraInfo}<br />\n\n                                    {/* Conditonally renders a new line with special instructions if any were added */}\n                                    {(item[5] !== \"\") ? <div><br /><span>Special Instr.: {item[5]}</span></div> : null}\n                                </span></span>\n\n                            {/* Opens MenuItemPopup to edit item details */}\n                            <button className=\"edit-button\" onClick={() => popupFunc(item, ind)}>Edit</button>\n\n                            {/* Removes item from the cart */}\n                            <button className=\"remove-button\" onClick={() => removeItem(ind)}>Remove</button>\n                            <span className=\"thumbnail-background summary-price\">${item[2]}</span>\n                        </div>\n                        <span className=\"item-divide\"></span>\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\n/**\n * Renders the cart summary popup on deskopt/tablet and page on mobile\n * \n * @param {*} props - values passed down from parent component\n */\nconst CartSummary = (props) => {\n    let history = useHistory();\n\n    //stores cookie object and function to update cookie\n    const [cookies, setCookie] = useCookies([\"cart\"]);\n\n    //stores date that is selected\n    const [selectedDate, setSelectedDate] = useState(null);\n\n    //stored time that is selected\n    const [selectedTime, setSelectedTime] = useState(null);\n\n    //stores whether the window size is mobile or not\n    const [isMobile, setIsMobile] = useState((window.innerWidth < 768) ? true : false);\n\n    //stores the error message for time picker\n    const [error, setError] = useState(\"\");\n\n    //stores the cart object\n    const [cart, setCart] = useState({\n        cart_total: props.total || cookies.cart.total,\n        item_total: props.subtotal || cookies.cart.subtotal,\n        tax_total: props.tax || cookies.cart.tax,\n        items: props.items || cookies.cart.items\n    });\n\n    // stores whether or not the item popup is currently visible\n    const [popupVisible, setPopupVisible] = useState(false);\n\n    // map with all of the data that will be displayed in the item popup\n    const [popupValues, setPopupValues] = useState(new Map());\n\n    /**\n     * updates item in cart to reflect changes made in item popup\n     * \n     * @param {*} item - edited item object to add to cart\n     */\n    const onItemEdit = (item) => {\n        //gets current cart object from cookies\n        let cart = cookies.cart;\n\n        const popupValues = JSON.parse(item.popupValues);\n\n        //create array representation of item object\n        let newItem = [];\n        newItem.push(popupValues.id, popupValues.title, item.price, item.quantity, item.size, item.instructions);\n        if (item.accommodations) {\n            newItem.push(item.accommodations);\n        }\n\n        //updates cart price values\n        cart.subtotal = (parseFloat(cart.subtotal) - parseFloat(cart.items[popupValues.fillIns.index][2]) + parseFloat(item.price)).toFixed(2);\n        cart.tax = (parseFloat(cart.subtotal) * 0.0775).toFixed(2);\n        cart.total = (parseFloat(cart.subtotal) + parseFloat(cart.tax)).toFixed(2);\n\n        //replaces old item with edited item\n        cart.items.splice(popupValues.fillIns.index, 1);\n        cart.items.splice(popupValues.fillIns.index, 0, newItem);\n\n        //updates cart cookie and state values to rerender page\n        setCookie(\"cart\", cart, { path: \"/\" });\n        const newCart = {\n            cart_total: cart.total,\n            item_total: cart.subtotal,\n            tax_total: cart.tax,\n            items: cart.items\n        }\n        setCart(newCart);\n\n        //calls parent function to update its states\n        if (!isMobile) {\n            props.updateItems();\n        }\n    }\n\n    const editItem = (item, ind) => {\n\n        //object to pass into item popup\n        const fillIns = {\n            quantity: item[3],\n            size: item[4],\n            instructions: item[5],\n            index: ind,\n            accommodations: item[6] ? item[6] : []\n        }\n\n        //object to pass into fetch request\n        const bodyObj = {\n            \"_id\": item[0]\n        }\n\n        //makes post request to get popup values of item\n        fetch(`${BACKEND_URL}item/itemInfo`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify(bodyObj)\n        }).then(async result => {\n                if (result.ok) {\n                    const json = await result.json();\n\n                    //displays item popup\n                    const popupValues = json.item;\n                    togglePopup(popupValues.Name, popupValues.Description, popupValues.Prices, popupValues.pictureURL, popupValues.dietaryInfo, popupValues.Accommodations, popupValues._id, fillIns);\n                }\n                else {\n                    console.log(\"error\");\n                }\n            });\n    }\n\n    /**\n     * processes the form submitted from the item popup\n     * \n     * @param {*} e - event object from form submission\n     */\n    const processForm = e => {\n        // prevents page reload\n        e.preventDefault();\n\n        // gets the form data\n        var data = new FormData(e.target);\n        var object = {};\n\n        // goes through and makes an object from the FormData\n        data.forEach((value, key) => {\n            if (!Reflect.has(object, key)) {\n                object[key] = value;\n                return;\n            }\n\n            if (!Array.isArray(object[key])) {\n                object[key] = [object[key]];\n            }\n            object[key].push(value);\n        });\n\n        // calls function to add item from item popup to cart\n        onItemEdit(object);\n\n        // when submit button is clicked, the popup is closed\n        togglePopup();\n    }\n\n    /**\n     * closes item popup when open and opens popup when closed\n     * \n     * @param {*} title - name of the item\n     * @param {*} description - item description\n     * @param {*} price - item price\n     * @param {*} image - item image\n     * @param {*} dietaryInfo - dietary info for the item\n     * @param {*} accommodations - accommodation options for the item\n     * @param {*} fillIns - already selected values for this item\n     */\n    const togglePopup = (title, description, price, image, dietaryInfo, accommodations, id, fillIns) => {\n\n        // sets the values of the map based on passed-in information\n        popupValues.set(\"title\", title);\n        popupValues.set(\"description\", description);\n        popupValues.set(\"price\", price);\n        popupValues.set(\"image\", image);\n        popupValues.set(\"dietary-info\", dietaryInfo);\n        popupValues.set(\"accommodations\", accommodations);\n        popupValues.set(\"id\", id);\n        popupValues.set(\"fillIns\", fillIns);\n\n        setPopupValues(popupValues);\n\n        setPopupVisible(!popupVisible);\n    }\n\n    /**\n     * updates selectedDate state to chosen date\n     * \n     * @param {*} date - Date object of chosen date\n     */\n    const handleDateChange = (date) => {\n        setSelectedDate(date);\n    }\n\n    /**\n     * disables any invalid dates (less than 3 days from current date)\n     * \n     * @param {*} date - Date object of some arbitrary date\n     */\n    const disableDates = (date) => {\n        let currDate = new Date();\n        const numDays = new Date(currDate.getFullYear(), currDate.getMonth() + 1, 0).getDate();\n        return (currDate.getMonth() === date.getMonth() && date.getDate() - 3 < currDate.getDate()) || (currDate.getMonth() + 1 === date.getMonth() && date.getDate() < currDate.getDate() + 3 - numDays);\n    }\n\n    /**\n     * Removes the item at index ind from the cart\n     * \n     * @param {*} ind - index of the item to be removed \n     */\n    const handleRemove = (ind) => {\n        //gets current cart object from cookies\n        let cart = cookies.cart;\n\n        //modifies cart price values and removes item at index\n        cart.subtotal = (parseFloat(cart.subtotal) - parseFloat(cart.items[ind][2])).toFixed(2);\n        cart.tax = (parseFloat(cart.subtotal) * 0.0775).toFixed(2);\n        cart.total = (parseFloat(cart.subtotal) + parseFloat(cart.tax)).toFixed(2);\n        cart.items.splice(ind, 1);\n\n        //updates cart cookie and state values to rerender page\n        setCookie(\"cart\", cart, { path: \"/\" });\n        const newCart = {\n            cart_total: cart.total,\n            item_total: cart.subtotal,\n            tax_total: cart.tax,\n            items: cart.items\n        }\n        setCart(newCart);\n    }\n\n    /**\n     * Loads cart popup or page when window is resized\n     */\n    const handleResize = () => {\n        console.log(\"resize called\");\n        if (window.innerWidth >= 768) {\n            history.push({\n                pathname: \"/\",\n                cartVisible: true,\n            });\n        }\n        if (window.innerWidth < 768) {\n            history.push(\"/cart\");\n        }\n    }\n\n    /**\n     * Adds event listener to load cart popup or page when window is resized\n     */\n    useEffect(() => {\n        window.addEventListener('resize', handleResize);\n\n        return () => window.removeEventListener('resize', handleResize);\n    })\n\n    return (\n        <div>\n            {/* Renders item popup if an item is being edited */}\n            {popupVisible ? <MenuItemPopup values={popupValues} togglePopup={togglePopup} processForm={processForm} /> : null}\n            <div className=\"cart-wrapper\">\n                {/* Renders navbar if device is mobile */}\n                {(window.innerWidth < 768) ? <div className=\"navbar-wrapper\">\n                    <Navbar />\n                </div> : <div className=\"background\" onClick={props.toggleCart}></div>}\n                <div className=\"cart-popup\">\n                    <span className=\"pickup-title\">Choose Pickup Time</span>\n                    <div className=\"date-time\">\n                        <div className=\"date-picker\">\n                            {/* Date picker to select a pickup date */}\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                                <KeyboardDatePicker\n                                    disableToolbar\n                                    variant=\"inline\"\n                                    format=\"MM/dd/yyyy\"\n                                    margin=\"normal\"\n                                    id=\"date-picker-inline\"\n                                    label=\"Date\"\n                                    value={selectedDate}\n                                    onChange={handleDateChange}\n                                    disablePast={true}\n                                    shouldDisableDate={disableDates}\n                                    KeyboardButtonProps={{\n                                        'aria-label': 'change date',\n                                    }}\n                                    inputProps={\n                                        isMobile ?\n                                            {\n                                                style: {\n                                                    fontSize: \"3vw\"\n                                                }\n                                            } : {}}\n                                    InputLabelProps={\n                                        isMobile ?\n                                            {\n                                                style: {\n                                                    fontSize: \"3vw\"\n                                                }\n                                            } : {}}\n                                />\n                                {(!selectedDate || !selectedTime) ? <p className=\"select-error\">Please select a date and a time</p> : null}\n                            </MuiPickersUtilsProvider>\n                        </div>\n                        {/* Time picker to select a pickup time */}\n                        <CustomTimePicker\n                            label=\"Time\"\n                            value={selectedTime}\n                            setSelectedTime={(time) => {\n                                const minTime = moment(\"9:59 AM\", \"HH:mm A\");\n                                const maxTime = moment(\"6:01 PM\", \"HH:mm A\");\n                                let errorMsg = \"\";\n                                if (minTime.isBefore(time) && maxTime.isAfter(time)) {\n                                    setSelectedTime(time.format(\"HH:mm A\"));\n                                    errorMsg = false;\n                                } else {\n                                    errorMsg = \"Select between 10:00 AM and 6:00 PM\";\n                                    setSelectedTime(null);\n                                }\n                                setError(errorMsg);\n                            }}\n                            setSize={isMobile}\n                            errorMessage={error}\n                        />\n                    </div>\n                    <p className=\"pickup-date-info\">NOTE: Earliest pickup is 3 days after order has been placed</p>\n                    <h1 className=\"summary-title\">Order Summary</h1>\n                    <div className=\"cart-items\">\n                        {/* loads and displays all items currently in the cart */}\n                        {(props.removeItem) ? loadItems(cart, editItem, props.removeItem) : loadItems(cart, editItem, handleRemove)}\n                    </div>\n                    <div className=\"order-totalprices\">\n                        <br />\n                        Subtotal: ${cart.item_total}<br />\n                        Tax: ${cart.tax_total}<br />\n                        Total Price: ${cart.cart_total}\n                    </div>\n                    {/* Renders an error message if cart total is less than the $20 minimum */}\n                    <div className=\"order-minimum\">\n                        {(parseFloat(cart.cart_total) < 20) ? <span>Order minimum is $20. Please add ${(20 - parseFloat(cart.cart_total)).toFixed(2)} to your cart to proceed to checkout.</span> : null}\n                    </div>\n                    {/* Renders PayPal component if all required fields are completed and return to menu button otherwise */}\n                    <div className=\"return-button\">\n                        {(selectedTime && selectedDate && parseFloat(cart.cart_total) >= 20) ? <PayPal selectedDate={selectedDate} selectedTime={selectedTime} /> : <Button style={{ backgroundColor: \"#f9ce1d\", borderColor: \"#f9ce1d\", color: \"#000000\" }} className=\"return\" onClick={(isMobile) ? () => history.push(\"/\") : () => props.toggleCart()}>Return to Menu</Button>}\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CartSummary;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/NavBar.js",["194","195","196","197","198","199"],"import React, { useEffect } from 'react';\n/**\n * The NavBar component. Renders at the top of the website and is fixed to the top.\n * Contains all the relevant tabs that route the user to the specified page.\n * Cart Icon is used for the mobile/tablet rendering of the webpage. \n * \n */\nimport { useHistory } from \"react-router-dom\";\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faShoppingCart } from '@fortawesome/free-solid-svg-icons'\nimport Logo from \"../media/UWEAST_Logo_Detail_Transparent.png\";\nimport '../css/NavBar.css';\nimport { isAuthenticated, logout } from '../util/Auth';\n\n\nexport default function NavBar(props) {\n\n    {/* history hook to redirect on logout */ }\n    const history = useHistory();\n\n    const [state, setState] = React.useState({\n        isUserAuthenticated: false\n    });\n\n    {/* stores class names to toggle whether content is shown */ }\n    var adminContentClass;\n    var loginButtonClass;\n\n    {/* removes login token and redirects to menu page */ }\n    function Logout() {\n        logout();\n        history.push(\"/login\");\n        history.go(0);\n    }\n\n    /**\n     * Renders the cart page for mobile navbar\n     */\n    function OpenCart() {\n        history.push(\"/cart\");\n    }\n\n    useEffect(() => {\n        isAuthenticated().then(async result => {\n            if (!result) {\n                logout();\n            }\n            setState({ ...state, isUserAuthenticated: result });\n        })\n    }, []);\n\n    {/* Hides admin content (admin page + logout) or login button depending on whether user is logged in */ }\n    if (state.isUserAuthenticated) {\n        adminContentClass = \"nav-link\";\n        loginButtonClass = \"nav-link d-none\";\n    } else {\n        adminContentClass = \"nav-link d-none\";\n        loginButtonClass = \"nav-link\";\n    }\n\n    {/* Check current page from props to change active nav-link color */ }\n    function isPageActive(pageToCheck) {\n        return (pageToCheck === window.location.pathname) ? \" active\" : \"\";\n    }\n\n    return (\n        <html>\n            <head>\n                {/* Bootstrap Resources */}\n                <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossOrigin=\"anonymous\" />\n            </head>\n            {/* Left Hand Side of Navbar - Title & Image linked to Menu Page */}\n            <Navbar className=\"navbar navbar-bg-color\" collapseOnSelect expand=\"xl\" variant=\"dark\">\n                \n                {/* Left Hand Side of Navbar - Title & Image linked to Menu Page */}\n                <Navbar.Brand href=\"/\">\n                    <span>\n                        <img src={Logo} className=\"logo-img\" alt=\"UWEAST Logo\" width={'90'} \n                            height={'90'} />\n                    </span>\n\n                    {/* Text to complement the logo */}\n                    <div className=\"brand-name\" >\n                        <p>Baraka & Bilal Catering</p>\n                    </div>\n\n                </Navbar.Brand>\n\n                {/* The shopping cart will only render if it is a mobile component */}\n                <div className=\"cart-icon-container\">\n                    <div className=\"cart-icon\">\n                        <FontAwesomeIcon icon={faShoppingCart} style={{ color: 'white' }}\n                            onClick={OpenCart} />\n\n                    </div>\n\n                    {/* Triggers on Collapse - Hamburger Icon replaces pages */}\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" style={{border: '1px solid white', marginLeft: 'calc(7vw)'}}/>\n                </div>\n\n                {/* Right Hand Side of Navbar - Linked Pages (based off of Router paths in App.js) */}\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"ml-auto\">\n                        {/* Menu Page */}\n                        <Nav.Link className={\"nav-link\" + isPageActive(\"/\")} href=\"/\">Menu</Nav.Link>\n\n                        {/* Contact Page */}\n                        <Nav.Link className={\"nav-link\" + isPageActive(\"/contact\")} href=\"/contact\">Contact</Nav.Link>\n\n                        {/* About Page */}\n                        <Nav.Link className={\"nav-link\" + isPageActive(\"/about\")} href=\"/about\">About</Nav.Link>\n\n                        {/* Admin Page */}\n                        <span className=\"desktop-tabs\">\n                            <Nav.Link className={adminContentClass + isPageActive(\"/admin\")} href=\"/admin\">Admin</Nav.Link>\n                        </span>\n\n                        {/* Logout */}\n                        <span className=\"desktop-tabs\">\n                            <Nav.Link className={adminContentClass} onClick={Logout}>Logout</Nav.Link>\n                        </span>\n\n                        {/* Login */}\n                        <span className=\"desktop-tabs\">\n                            <Nav.Link className={loginButtonClass + isPageActive(\"/login\")} href=\"/login\">Login</Nav.Link>\n                        </span>\n                    </Nav>\n                </Navbar.Collapse>\n\n                {/* The shopping cart will only render for smaller desktop screens/tablets */}\n                <div className=\"cart-icon-smaller-desktop\">\n                    <FontAwesomeIcon icon={faShoppingCart} style={{ color: 'white' }}\n                        onClick={() => props.toggleCart()} />\n                </div>\n            </Navbar>\n        </html>\n    )\n}\n","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ContactMap.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ContactForm.js",["200","201"],"/**\n * Component creating the form on the contact page. Form takes user's \n * information and sends an email to UWEAST on their behalf. Error handling \n * makes sure that backend response is 200, otherwise notify user.\n * \n * @summary   Form to contact UWEAST found on contact page.\n * @author    Navid Boloorian, Amrit Kaur Singh\n */\nimport React from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { Snackbar } from '@material-ui/core';\nimport DOMPurify from 'dompurify';\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\nconst ContactForm = () => {\n\n  const [state, setState] = React.useState({\n    snack: {\n      message: '',\n      open: false\n    },\n  });\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n  \n    const formData = new FormData(e.target);\n    let data = {};\n    \n    // make FormData into a js object to pass to route\n    for(var [key, value] of formData.entries()) {\n      data[key] = DOMPurify.sanitize(value);;\n    }\n  \n    try{\n  \n      const response = await fetch(`${BACKEND_URL}autoEmails/contact`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(data)\n      });\n      \n      // successful response\n      if (response.status == 200){\n        alert(\"Message sent!\");\n        // reload window to clear input boxes \n        window.location.reload();\n        \n        // malformed email\n      } else if(response.status == 400) {\n        setState({...state, snack: {message: 'Invalid Email Address!', open: true}});\n\n        // system error\n      } else {\n        setState({...state, snack: {message: 'System Error: Cannot send email!', open: true}});\n      }\n      \n      // general error\n    } catch(error){\n      setState({...state, snack: {message: 'System Error: Cannot send email!', open: true}});\n    }\n  };\n  \n  // error message display: auto close itself by updating its states\n  const handleSnackClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setState({...state, snack: {open: false}});\n  };\n\n  return (\n    <div className=\"contact-form\">\n      <div className=\"contact-form-text\">\n      <h1>CONTACT US</h1>\n      <p>Please email us using the form below</p>\n      <form onSubmit={sendMessage}>\n        <input type=\"text\" name=\"name\" className=\"first-input contact-form-input\" placeholder=\"Your Name\" required/>\n        <br />\n        <input type=\"text\" name=\"email\" className=\"contact-form-input\" placeholder=\"Your Email\" required />\n        <br />\n        {/** automatically-resizing textarea component */}\n        <TextareaAutosize className=\"contact-form-input\" name=\"message\" placeholder=\"Your message\" maxRows={3} required />\n        <br />\n        <input type=\"submit\" className=\"contact-form-submit\" value=\"Submit\"  />\n      </form>\n      </div>\n      <Snackbar open={state.snack.open} autoHideDuration={6000} onClose={handleSnackClose} message={state.snack.message}/>\n    </div>\n  )\n}\n\nexport default ContactForm;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Orders.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Emails.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/CartPreview.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/Banner.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/config.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/SearchSection.js",["202","203"],"/**\n * Upper portion of menu page. Has formatting for \"jumbotron\" background image.\n * \n * @summary   Upper portion of menu page with main background image.\n * @author    Navid Boloorian\n */\n\nimport React, {useState, useEffect} from 'react';\nimport \"../css/SearchSection.css\";\nimport Header from \"../media/default_header.jpg\";\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\nconst SearchSection = () => {\n  // set a default header image here\n  var defaultImg = Header\n\n  const [headerImg, setHeaderImg] = useState(\"\"); \n\n  /**\n   * UseEffect gets the background image for the header.\n   */\n  useEffect(() => {\n    fetch(`${BACKEND_URL}menuImages`)\n    .then(async result => {\n      if (result.ok) {\n        const json = await result.json();\n\n        if(json.imageUrl != undefined) {\n          setHeaderImg(json.imageUrl.imageUrl);\n        }\n      }\n      else {\n        console.log(\"error\");\n      }\n    })\n  }, []);\n\n  return (\n    <div className=\"search-section\">\n      <img alt=\"Menu Image\" src={headerImg} className=\"header-img\" onError={(e)=>{e.target.src=defaultImg}} />\n    </div>\n  );\n}\n  \nexport default SearchSection;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ForgotPasswordDialogue.js",["204"],"/**\n * The file is responsible for the display and functionality of forgot password, allowing users \n * who already have admin accounts but have forgotten their account passwords to reset their passwords\n * temporarily. \n * \n * If an email of a registered account is given, that associated account's password is reset to a randomly \n * generated password, and an email is sent to that user containing that randomly generated password as well \n * as next steps. An alert is also given to the user. If unsuccessful, an error message is displayed. \n * \n * Note: Unlike login and registeration, this page is accessible to all users regardless of whether they are \n * logged in or not. If password is reset while the user is logged in, the change will be effective on the\n * next login. \n * \n * @summary     Displays forgot password dialogue and allows registed user to temporarily reset their password. \n * @author      Amrit Kaur Singh\n */\n\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Link } from 'react-router-dom';\nimport { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {createMuiTheme, ThemeProvider } from \"@material-ui/core\";\nimport DOMPurify from 'dompurify';\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\nexport default function FormDialog() {\n\n  const theme = createMuiTheme({\n    overrides: {\n      // input field label\n      MuiInputLabel: { \n        root: {\n          \"&$focused\": { \n            color: \"black\"\n          }\n        }\n      }\n    }\n  });\n\n  const useStyles = makeStyles({\n    // input field underline\n    underline: {\n      // non-focus & hover\n      \"&&&:before\": {\n        borderColor: \"#f9ce1d\"\n      },\n      // focus\n      \"&&:after\": {\n        borderColor: \"#f9ce1d\"\n      }\n    }\n  });\n\n  const classes = useStyles();\n  \n  \n  const [state, setState] = React.useState({\n    open: false,\n    email: '',\n    error:{\n      display: false,\n      message: ''\n    }\n  });\n\n\n  /**\n   * Handles submission of the form (button click). Validates form data for valid email address (must be a user's email address). If valid, \n   * it autogenerates a random password and sends it as an email to the user. If invalid, an error is displayed.\n   * \n   * @param {*} event - Reason for function call \n   * @returns {void} \n   */\n  const handleSend = async() => {\n\n      // display loading cursor \n      document.body.style.cursor= 'wait';\n\n      // sanitize input - XSS attack protection \n      state.email =  DOMPurify.sanitize(state.email);\n\n      const submission = {\n          email: state.email\n      };\n\n    // check if email field is empty\n    if (state.email === ''){\n        document.body.style.cursor= null;\n        setState({...state, error:{display: true, message: \"Field cannot be empty\"}})\n        return;\n    }\n    // backend call\n    try{\n      const response = await fetch(`${BACKEND_URL}user/forgotPassword`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(submission)\n      });\n\n      // password successfully reset \n      if (response.ok) {\n        document.body.style.cursor= null;\n        alert(\"Email Successfully Sent!\");\n        handleClose();\n      } \n      // invalid email\n      else if(response.status == 400){\n        document.body.style.cursor= null;\n        setState({...state, error:{display: true, message: \"Invalid Email\"}});\n      }\n      // any other server response\n      else {\n            document.body.style.cursor= null;\n            setState({...state, error:{display: true, message: \"System Error: Try Again Later\"}});\n      }\n    }\n    // general error\n    catch(error){\n        document.body.style.cursor= null;\n        setState({...state, error:{display: true, message: `An error occurred: ${error.message}`}});\n    }\n\n  }\n\n  // display pop-up\n  const handleClickOpen = () => {\n    setState({...state, email:'', open: true, error:{display: false}});\n  };\n\n  // close pop-up\n  const handleClose = () => {\n    setState({...state, open: false, error:{display: false}});\n  };\n\n  // track the email address put in the text field\n  const handleEmailChange = (event) => {\n    setState({...state, email: event.target.value, open: true});\n  }\n\n  return (\n    <div>\n      {/* link preview */}\n      <Link onClick={handleClickOpen}><Typography>Forgot Password?</Typography></Link>\n      {/* dialogue  */}\n      <Dialog open={state.open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        {/* title + description */}\n        <DialogTitle id=\"form-dialog-title\"> <b>Forgot Password?</b></DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please enter the email address of the associated account here. An email will be sent to\n            you there containing next steps. \n          </DialogContentText>\n          {/* email field */}\n          <ThemeProvider theme={theme}>\n            <TextField\n              onChange={handleEmailChange}\n              error={state.error.display}\n              helperText={state.error.display ? state.error.message: null}\n              autoFocus\n              margin=\"dense\"\n              id=\"name\"\n              label=\"Email Address\"\n              type=\"email\"\n              InputProps={{ classes }}\n              // variant=\"Standard\"\n              fullWidth\n            />\n          </ThemeProvider>\n        </DialogContent>\n        <DialogActions>\n          {/* cancel dialogue button */}\n          <Button onClick={handleClose} style={{color: \"black\"}} >\n            Cancel\n          </Button>\n          {/* send email button */}\n          <Button onClick={handleSend} style={{color: \"black\"}}>\n            Send Email\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/util/Auth.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuSection.js",["205","206","207"],"/**\n * Hub of menu portion of page. Almost all  states are elevated to this level. \n * Defines most of the form processing and renders MenuFilter, MenuItems, and \n * MenuCart.\n * \n * @summary   Hub of menu items, most states are elevated to this level.\n * @author    Navid Boloorian\n */\n\nimport React, { useState } from 'react';\nimport MenuFilter from './MenuFilter';\nimport MenuItems from './MenuItems';\nimport '../css/MenuSection.css';\n\n/**\n * Handle the display of menu categories and sections. Stores states of what is \n * currently visible.\n * \n * @param {function} onItemAdd - Function returning boolean\n */\nconst MenuSection = ({onItemAdd}) => {\n  // filterCategories populates the filter buttons\n  const filterCategories = [\"Whole Menu\", \"Featured\", \"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\n\n  // populates the menu item categories\n  const defaultCategories = [\"Featured\", \"Appetizers\", \"Main Dishes\", \"Sides\", \"Drinks\"];\n\n  // stores all the categories currently visible\n  let displayedCategories = [];\n\n  // states that are managed and passed down to components\n  const [visibleCategories, setVisibleCategories] = useState(defaultCategories);\n\n  const [toggledFilter, setToggledFilter] = useState(\"none\");\n\n  // stores whether or not the popup is currently visible\n  const [popupVisible, setPopupVisible] = useState(false);\n\n  // map with all of the data that will be displayed in the popup\n  const [popupValues, setPopupValues] = useState(new Map());\n\n  // changes visible categories when filter button is clicked\n  const changeVisibleCategories = categoryName => {\n    if(categoryName == \"Whole Menu\") {\n      displayedCategories = defaultCategories;\n    }\n    else {\n      // if the option is not \"whole menu\", a new item is added to the \n      // displayedCategories array that is then passed to be rendered\n      displayedCategories.push(categoryName);\n    }\n\n    if(displayedCategories.length == 0) {\n      displayedCategories = defaultCategories;\n    }\n    \n    // responsible for actually rendering/setting what will be visible\n    setVisibleCategories(displayedCategories);\n  }\n\n  // processes the form submitted from the popup\n  const processForm = e => {\n    // prevents page reload\n    e.preventDefault();\n\n    // gets the form data\n    var data = new FormData(e.target);\n    var object = {};\n\n    // goes through and makes an object from the FormData\n    data.forEach((value, key) => {\n        if(!Reflect.has(object, key)){\n            object[key] = value;\n            return;\n        }\n\n        if(!Array.isArray(object[key])){\n            object[key] = [object[key]];    \n        }\n        object[key].push(value);\n    });\n\n    // converts the FormData to a JSON string, optional\n    var json = JSON.stringify(object);\n\n    // calls parent function to add item from popup to cart\n    onItemAdd(object);\n    \n    // when submit button is clicked, the popup is closed\n    togglePopup();\n  }\n  \n  // closes popup when open and opens popup when closed\n  const togglePopup = (title, description, price, image, dietaryInfo, accommodations, id, fillIns) => {\n    setPopupVisible(!popupVisible);\n    \n    // sets the values of the map based on passed-in information\n    popupValues.set(\"title\", title);\n    popupValues.set(\"description\", description);\n    popupValues.set(\"price\", price);\n    popupValues.set(\"image\", image);\n    popupValues.set(\"dietary-info\", dietaryInfo);\n    popupValues.set(\"accommodations\", accommodations);\n    popupValues.set(\"id\", id);\n    popupValues.set(\"fillIns\", fillIns);\n\n    setPopupValues(popupValues);\n  }\n\n  /**\n   * MenuSection is split into three columns:\n   * 1. filter column\n   * 2. menu column\n   * 3. cart column\n   */\n  return (\n    <div className=\"menu-section-wrapper\">\n      <div className=\"menu-section\">\n        <div className=\"menu-filter-wrapper\">\n          <MenuFilter toggledFilter={toggledFilter} setToggledFilter={setToggledFilter} foodCategories={filterCategories} changeVisibleCategories={() => changeVisibleCategories} />\n        </div>\n        <div className=\"menu-items\">\n          {/** parameters are states being passed down */}\n          <MenuItems foodCategories={visibleCategories} processForm={processForm} popupVisible={popupVisible} popupValues={popupValues} togglePopup={togglePopup}/>\n        </div>\n        <div className=\"menu-cart\">\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default MenuSection;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/PayPal.js",["208"],"/**\n * This file contains the code for the PayPal Smart Buttons integration.\n * It calls the backend once an order is completed to create a new order object.\n * The expected form of the props is shown below.\n *\n * @summary Renders paypal buttons for payment based on cart passed in through props\n * @author PatrickBrown1\n */\nimport React from 'react'\nimport { useHistory } from \"react-router-dom\";\nimport { useCookies } from 'react-cookie';\n\nconst config = require('../config');\n\nconst BACKEND_URL = config.backend.uri;\n\n// PayPal script is located in public/index.html (contains Client ID)\nexport default function PayPal(props) {\n    const [cookies, setCookie] = useCookies([\"cart\"]);\n    let history = useHistory();\n\n    const { cart } = cookies.cart;\n\n    \n    //stores cookie object and function to remove cookie\n    // I assume the cart object looks like this:\n    // {\n    //     cart_total: \"\",\n    //     item_total: \"\",\n    //     tax_total: \"\",\n    //     items: [\n    //         {\n    //             price: \"12.23\"\n    //             quantity: \"\",\n    //             size: \"\",\n    //             accommodations: [\"\", \"\"] (string if only one, prop doesn't exist if none),\n    //             instructions: \"\",\n    //             \n    //             \"popupValues\": \n    //                  {\n    //                      \"title\":\"Caesar Salad\",\n    //                      \"description\":\"Romaine lettuce with argula and spinach, served with a drizzle of olive oil!\",\n    //                      \"price\": {\"Individual\":\"8.23\"},\n    //                      \"image\":\"https://natashaskitchen.com/wp-content/uploads/2019/01/Caesar-Salad-Recipe-3.jpg\",\n    //                      \"dietary-info\":\n    //                          {\n    //                              \"vegan\":true,\n    //                              \"vegetarian\":true,\n    //                              \"glutenFree\":true,\n    //                              \"containsDairy\":false\n    //                          },\n    //              \"accommodations\":[\n    //                  {\"_id\":\"602cd4994cca295f7648f2e0\",\"Description\":\"Add Chicken Breasts\",\"Price\":\"4.00\"},\n    //                  {\"_id\":\"602cd4994cca295f7648f2e1\",\"Description\":\"Subsitute with Ranch dressing\",\"Price\":\"0.00\"},\n    //                  {\"_id\":\"602cd4994cca295f7648f2e2\",\"Description\":\"Add Garlic Croutons\",\"Price\":\"0.50\"},\n    //                  {\"_id\":\"602cd4994cca295f7648f2e3\",\"Description\":\"Substitute with Greek Dressing\",\"Price\":\"0.75\"}]}\"\n    //              ]\n    //     }],\n    //     pickup_date: \"\",\n    //     pickup_time: \"\",\n    // }\n    const paypalRef = React.useRef();\n    const paypalOrderObject = {\n        intent: \"CAPTURE\",\n        application_context: {\n            shipping_preference: 'NO_SHIPPING',\n        },\n        purchase_units: [{\n            description: \"Food order from UWEAST Kitchen\",\n            // Deals with pricing of the cart\n            amount: {\n                currency_code: \"USD\",\n                value: cookies.cart.total,\n                breakdown: {\n                    // includes totals for items and taxes. Shipping and handling can be ignored\n                    // because the items are for pickup and handling is included in price\n                    item_total: {\n                        currency_code: \"USD\",\n                        value: cookies.cart.subtotal,\n                    },\n                    tax_total: {\n                        currency_code: \"USD\",\n                        value: cookies.cart.tax,\n                    },\n                }\n            },\n            // Deals with the individual item entries for the order\n            items: \n            [...cookies.cart.items.map((item) => {\n                // build description\n                let desc = [`Size: ${item[4]}`];\n                if(item[6] !== undefined){\n                    if(Array.isArray(item[6])){\n                        desc = [...desc, ...item[6]];\n                    }\n                    else{\n                        desc = [...desc, item[6]];\n                    }\n                }\n                desc = [...desc, item[5]];\n                return {\n                    name: item[1],\n                    // Description follows the format:\n                    // Size: {size}, (Gluten Free,) (Other addons,) \n                    description: desc.join(\", \"),\n                    unit_amount: {\n                        currency_code: \"USD\",\n                        value: (parseFloat(item[2])/parseFloat(item[3])).toFixed(2),\n                    },\n                    tax: {\n                        currency_code: \"USD\",\n                        value: 0,\n                    },\n                    quantity: item[3],\n                    category: \"PHYSICAL_GOODS\"\n                }\n            }), \n                {   name: \"taxes\",\n                    description: \"taxes\",\n                    unit_amount: {\n                        currency_code: \"USD\",\n                        value: 0,\n                    },\n                    tax: {\n                        currency_code: \"USD\",\n                        value: cookies.cart.tax,\n                    },\n                    quantity: 1,\n                    category: \"PHYSICAL_GOODS\"\n                }\n            ]\n        }],\n        shipping_type: 'PICKUP',\n    }\n    // To show PayPal buttons once the component loads\n    React.useEffect(() => {\n        window.paypal\n        .Buttons({\n            createOrder: async(data, actions) => {\n                return actions.order.create(paypalOrderObject);\n            },\n            onApprove: async (data, actions) => {\n                return actions.order.capture().then(function(details) {\n                    // details here includes payer name, phone number, and email\n\n                    // create order object\n                    let sendDate = new Date(props.selectedDate.getFullYear(),(props.selectedDate.getMonth()), props.selectedDate.getDate(),\n                        props.selectedTime.substring(0, 2), props.selectedTime.substring(3, 5));\n                    const orderObj = {\n                        \"Customer\": {\n                            \"Name\": details.payer.name.given_name + \" \" + details.payer.name.surname,\n                            \"Email\": details.payer.email_address,\n                            \"Phone\": details.payer.phone.phone_number.national_number\n                        },\n                        \"Pickup\": sendDate,\n                        \"PayPal\": {\n                            \"Amount\": parseFloat(cookies.cart.total).toFixed(2),\n                            \"transactionID\": data.orderID\n                        },\n                        \"Order\": \n                        cookies.cart.items.map((item) => {\n                            return {\n                                \"item\": item[1],\n                                \"quantity\": parseInt(item[3]),\n                                \"size\": item[4],\n                                \"accommodations\": \n                                    item[6] !== undefined\n                                        ? (Array.isArray(item[6]) \n                                            ? item[6].join(\",\") \n                                            : item[6]\n                                        )\n                                        : \"\",\n                                \"specialInstructions\": item[5],\n                            }\n                        })\n                    }\n                    // signal email automation by calling the /autoEmails/automate route, \n                    // this will automatically add the order to the database \n                    return fetch(`${BACKEND_URL}autoEmails/automate`, {\n                        method: \"POST\",\n                        headers: {\n                            \"content-type\": \"application/json\",\n                        },\n                        body: JSON.stringify(orderObj),\n                    }).then((res) => {\n                        if(res.ok){\n                            alert('Transaction completed! You will receive a confirmation email shortly.');\n                        } else {\n                            alert('Transaction completed, but email automation failed. You paid for your meal, and should get a confirmation from PayPal. Please contact us to set up your order.');\n                        }\n                        //clears the cart cookie after order is placed\n                        let newCart = {\n                            items: [],\n                            subtotal: \"00.00\",\n                            tax: \"00.00\",\n                            total: \"00.00\"\n                        }\n                        setCookie(\"cart\", newCart, { path: \"/\" });\n                        \n                        history.push(\"/\");\n                        history.go(0);\n                    })\n                    .catch(() => {\n                        alert(\"There was an internal error. Check your email for a recepit from PayPal, and contact us to set up your order.\");\n                    });\n                });\n            },\n            onCancel: () => {\n            },\n            onError: (err) => {\n                alert(\"An unexpected error occurred - your payment did not go through. Please try again later.\");\n\n            },\n        })\n        .render(paypalRef.current);\n    }, [cart]);\n\n    return (\n        <div>\n            <div ref={paypalRef}/>\n        </div>\n    )\n}","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/AdminMenuItems.js",["209"],"/**\n * This file renders a table filled with each item in the menu. It includes information\n * such as name, icon, price, addons, sizing, etc. This table is searchable based on name,\n * and sortable based on item caregory (main dish, appetizer, side, etc.). This table gives\n * the user the option to edit and remove existing items, and add new items.\n *\n * @summary     Renders admin menu items table for the Admin page\n * @author      PatrickBrown1\n */\n\nimport React, {useState, useEffect, useReducer} from 'react';\nimport {Modal, Button} from 'react-bootstrap';\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport SearchBar from \"material-ui-search-bar\";\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport '../css/AdminMenuItems.css';\nimport AddMenuItemModal from './AddMenuItemModal.js';\nimport EditMenuItemModal from './EditMenuItemModal.js';\nimport ChangeHeaderModal from './ChangeHeaderModal.js';\n\nimport {getJWT, logout} from '../util/Auth';\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\n/**\n * This function takes in data points from the get item route and formats them into\n * an object readable by the table.\n *\n * @param {string} itemName - name of the item\n * @param {string} imgSource - url of image source\n * @param {string} categoryName - item's category\n * @param {Object[]} options -  array of accommodation objects\n * @param {Object} baseprice - object with Individual and Family price properties\n * @param {string} description - description of the item\n * @param {string} id - item's id in database\n * @param {boolean} featured - indicates whether or not the item is featured on the menu\n * @param {Object} dietaryInfo - object containing dairyFree, vegan, vegetarian, and gluten-free boolean properties\n *\n * @return {Object} - Object with above parameters formatted in proper order.\n */\nfunction createData(itemName, imgSource, categoryName, options, baseprice, description, id, featured, dietaryInfo) {\n  return {\n        \"itemName\": itemName, \n        \"imgSource\": imgSource,\n        \"categoryName\": categoryName, \n        \"options\": options, \n        \"basePrice\": baseprice, \n        \"description\": description,\n        \"id\": id,\n        \"isFeatured\": featured,\n        \"dietaryInfo\": dietaryInfo\n    };\n}\n/**\n * Renders modal that asks the user if they want to remove the item from the menu.\n *\n * @param {boolean} deleteConfirmation - indicates whether or not to show the delete confirmation modal\n * @param {function} setDeleteConfirmation - sets value of deleteConfirmation\n * @param {Object[]} itemList - list of all menu item objects\n * @param {function} setItemList -  sets itemList\n * @param {Object} displayContent - list of menu item objects currently being displayed\n * @param {string} setDisplayContent - sets displayContent\n\n * @return - modal displaying delete confirmation message\n */\nconst deleteConfirmationModal = (deleteConfirmation, setDeleteConfirmation, itemList, setItemList, displayContent, setDisplayContent) => {\n    return (\n        <Modal \n            show={deleteConfirmation !== []} \n            onHide={() => setDeleteConfirmation([\"\", \"\"])} \n            backdrop='static'\n            style={{\"marginTop\": \"30vh\"}}\n        >\n                <Modal.Header closeButton>\n                    <Modal.Title>Delete Menu Item</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div>\n                        <p>Are you sure you want to remove {deleteConfirmation[0]} from the menu?</p>\n                    </div>\n                </Modal.Body>\n                \n                <Modal.Footer>\n                    <Button variant=\"primary\" className=\"menuAddButton\" onClick={() => {                        \n                        // Call database, remove item from menu\n                        handleRemoveByID(deleteConfirmation[1], itemList, setItemList, displayContent, setDisplayContent);\n                        setDeleteConfirmation([\"\", \"\"]);\n                    }}>\n                        Remove Item\n                    </Button>\n                    <Button variant=\"secondary\" onClick={() => {\n                        setDeleteConfirmation([\"\", \"\"]);\n                    }}>\n                        Cancel\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        );\n}\n/**\n * Renders table of items based on what is passed in through displayContent\n *\n * @param {Object} display - list of menu item objects currently being displayed\n * @param {string} setDisplay - sets display\n * @param {function} setDeleteConfirmation - sets value of deleteConfirmation\n * @param {function} handleFeatureChange -  function that handles when featured checkbox is toggled\n * @param {function} setCurrentEditItem - sets the item being edited if edit button is pressed\n\n * @return - renders table of menu items\n */\nfunction menuTable(display, setDisplay, setDeleteConfirmation, handleFeatureChange, setCurrentEditItem) {\n    return (\n        <TableContainer component={Paper} className=\"menuTableContainer\">\n            <Table aria-label=\"simple table\" className=\"menuTable\">\n                <TableHead>\n                    <TableRow style={{\"overflow\": \"hidden\"}}>\n                        <TableCell className=\"menuTableHeaders\" width=\"5%\">Feature</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"15%\" align=\"center\">Item Image</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"10%\" align=\"left\">Item Name</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"10%\" align=\"left\">Category Name</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"10%\" align=\"left\">Size</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"10%\" align=\"left\">Base Price</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"30%\" align=\"left\">Add-ons</TableCell>\n                        <TableCell className=\"menuTableHeaders\" width=\"10%\" align=\"left\">Edit</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {display.displayContent.map((row, index) => {\n                        const bgColor = index % 2 === 0 ? \"evenrowbg\" : \"oddrowbg\";\n                        return (\n                            <TableRow key={row._id} className={bgColor}>\n                                <TableCell component=\"th\" scope=\"row\" className=\"menuRowText\" width=\"5%\">\n                                    <Checkbox\n                                        id={row._id + \"checkbox\"}\n                                        checked={row.isFeatured}\n                                        onChange={(e) => {\n                                            handleFeatureChange(row);\n                                        }}\n                                        name={row.itemName}\n                                        style ={{\n                                            color: \"#747474\",\n                                        }}\n                                    />\n                                </TableCell>\n                                <TableCell align=\"center\" className=\"menuRowText\" width=\"15%\">\n                                    <img src={row.imgSource} alt={row.itemName} className=\"menuItemImage\"/>\n                                </TableCell>\n                                <TableCell className=\"menuRowText\" width=\"10%\">{row.itemName}</TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"10%\">{row.categoryName}</TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"10%\">\n                                {\n                                    row.basePrice.map((v) => {return (<>{v[0]}<br /></>)})\n                                }\n                                </TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"10%\">\n                                {\n                                    row.basePrice.map((v) => <>${v[1]}<br /></>)\n                                }\n                                </TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText accommodationCell\" width=\"30%\">\n                                {\n                                    row.options.map((v) => <p>{v[1].Description}</p>)\n                                }\n                                </TableCell>\n                                <TableCell align=\"left\" className=\"menuRowText\" width=\"10%\">\n                                    <IconButton onClick={() => setCurrentEditItem(row.id)}>\n                                        <EditIcon style={{\"marginRight\": \"5px\"}}/>\n                                    </IconButton>\n                                    <IconButton aria-label=\"delete item\" onClick={() => setDeleteConfirmation([row.itemName, row.id])}>\n                                        <DeleteIcon style={{\"marginLeft\": \"5px\"}}/>\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                    )})}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n/**\n * Removed an item from the database and from page state\n *\n * @param {string} id - id of item being removed\n * @param {Object[]} itemList - list of all menu items\n * @param {function} setItemList - sets value of itemList\n * @param {Object[]} displayContent -  list of all menu items being displayed\n * @param {function} setDisplayContent - sets value of displayContent\n */\nasync function handleRemoveByID(id, itemList, setItemList, displayContent, setDisplayContent){\n    // remove from database\n    await fetch(`${BACKEND_URL}item/remove`, {\n            method: \"DELETE\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                \"_id\": id,\n                \"token\": getJWT()\n            })\n        }).then(res => {\n            if(res.ok){\n                // remove from rows\n                setItemList(itemList.filter(x => x.id !== id));\n                // remove from filtered rows\n                setDisplayContent({displayContent: displayContent.displayContent.filter(x => x.id !== id)});\n            }\n            // invalid token\n            else if (res.status === 401){\n                logout();\n                // refresh will cause a redirect to login page\n                window.location.reload();\n                return;\n            }\n        })\n    \n}\nexport default function AdminMenuItems (props) {\n    const [deleteConfirmation, setDeleteConfirmation] = useState([\"\", \"\"]);\n    \n    const [itemList, setItemList] = useState([]);\n    const [loaded, setLoaded] = useState(false);\n    // eslint-disable-next-line no-unused-vars\n    const [checkboxUpdate, setCheckboxUpdate] = useState(\"\");\n    const [changeHeaderModal, setChangeHeaderModal] = useState(false);\n    const [addItemModal, setAddItemModal] = useState(false);\n    const [currentEditItem, setCurrentEditItem] = useState(\"\");\n    const [itemAddedSuccess, setItemAddedSuccess] = useState(false)\n    const [itemEditedSuccess, setItemEditedSuccess] = useState(false);\n\n    // const [searchTerm, setSearchTerm] = useState(\"\");\n    // const [filter, setFilter] = useState(\"All\");\n    // const [displayContent, setDisplayContent] = useState([]);\n    const [display, setDisplay] = useReducer(\n        (state, newState) => ({...state, ...newState}),\n        {searchTerm: \"\", filter: \"All\", displayContent: itemList}\n    )\n    const [headerImageURL, setHeaderImageURL] = useState(\"\");\n\n    // fetch all menu items to display in table\n    useEffect(() => {\n        \n        var data = null;\n        var imgUrl = null;\n        const fetchData = async () => {\n            const res = await fetch(`${BACKEND_URL}item/`, {\n                method: \"GET\",\n                headers: {\n                    \"content-type\": \"application/json\",\n                },\n            })\n            data = await res.json();\n            const rows = [];\n            data.items.forEach(element => {\n                // log(element);\n                rows.push(\n                    createData(\n                        element.Name,\n                        element.pictureURL, \n                        element.Category, \n                        Object.entries(element.Accommodations),\n                        Object.entries(element.Prices), \n                        element.Description,\n                        element._id,\n                        element.isFeatured,\n                        element.dietaryInfo\n                ));\n            });\n            const urlFetch = await fetch(`${BACKEND_URL}menuImages/`, {\n                method: \"GET\",\n                headers: {\n                    \"content-type\": \"application/json\",\n                },\n            })\n            data = await urlFetch.json();\n            setHeaderImageURL(data.imageUrl.imageUrl || '');\n            setItemList(rows);\n            setDisplay({displayContent: rows});\n            setLoaded(true);\n        }\n        \n        fetchData();\n    }, [loaded])\n\n    /**\n     * This functions takes in the filter string and the search term, and updates\n     * the display state to these new two values, and the items that correspond to\n     * these two values\n     *\n     * @param {String} filter - current filter\n     * @param {String} searchTerm - current search term\n     */\n    const handleDisplayChange = (filter, searchTerm) => {\n        // takes item list, filters by category then search term\n        let workingItems = [];\n        // filter by category\n        if(filter === \"All\"){ \n            workingItems = itemList;\n        }\n        else if(filter === \"Featured\"){\n            for(var index in itemList) { \n                if (itemList[index].isFeatured){\n                    workingItems.push(itemList[index]); \n                }\n            }\n        }\n        else{\n            for(var i in itemList) { \n                if (itemList[i][\"categoryName\"] === filter){\n                    workingItems.push(itemList[i]); \n                }\n            }\n        }\n        // filter by search term\n        if(searchTerm !== \"\"){\n            workingItems = workingItems.filter(x => x.itemName.toLowerCase().includes(searchTerm.toLowerCase()));\n\n        }\n        setDisplay({filter: filter, searchTerm: searchTerm, displayContent: workingItems});\n    }\n    /**\n    * Updates items and database when a feature checkbox is pressed\n    *\n    * @param {Object} row - row being updated\n    */\n    const handleFeatureChange = async (row) => {\n        const itemID = row.id;\n        const newValue = !row.isFeatured;\n        row.isFeatured = newValue;\n        // update item's feature property in local (displayContent and itemList)\n        var itemListIndex = -1;\n        itemList.forEach((x, index) => {\n            itemListIndex = x.id === itemID ? index : itemListIndex;\n        })\n        if(itemListIndex !== -1){\n            setItemList(prev => {\n                prev[itemListIndex].isFeatured = newValue;\n                return prev;\n            })\n        }\n        var displayContentIndex = display.displayContent.findIndex(x => x.id === itemID);\n        if(displayContentIndex !== -1){\n            display.displayContent[displayContentIndex].isFeatured = newValue;\n            setDisplay({displayContent: display.displayContent});\n        }\n        setCheckboxUpdate(row.itemName + \"\" + newValue);\n\n        // update item's feature property in database\n        await fetch(`${BACKEND_URL}item/feature`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                \"_id\": itemID,\n                \"isFeatured\": newValue,\n                \"token\": getJWT()\n            })\n        }).then(res => {\n            // invalid admin token\n            if (res.status === 401){\n                logout();\n                // refresh will cause a redirect to login page\n                window.location.reload();\n                return;\n            }\n        });\n    }\n    if(loaded){\n        return (  \n            <div className=\"adminMenuPageContainer\">\n                {currentEditItem !== \"\" && <EditMenuItemModal showModal={currentEditItem !== \"\"} setCurrentEditItem={setCurrentEditItem} item={itemList.filter(item => item.id === currentEditItem)[0]} setLoaded={setLoaded} setItemEditedSuccess={setItemEditedSuccess}/>}\n                {deleteConfirmation[0] !== \"\" && deleteConfirmationModal(deleteConfirmation, setDeleteConfirmation, itemList, setItemList, display, setDisplay)}\n                {addItemModal && <AddMenuItemModal addItemModal={addItemModal} setAddItemModal={setAddItemModal} setLoaded={setLoaded} setItemAddedSuccess={setItemAddedSuccess}/>}\n                {changeHeaderModal && <ChangeHeaderModal changeHeaderModal={changeHeaderModal} setChangeHeaderModal={setChangeHeaderModal} setLoaded={setLoaded} headerImageURL={headerImageURL}/>}\n                {/* Add/Edit item success snackbars*/}\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                    open={itemAddedSuccess}\n                    autoHideDuration={5000}\n                    onClose={() => setItemAddedSuccess(false)}\n                    message={<span id=\"message-id\">Item successfully added!</span>}\n                />\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                    open={itemEditedSuccess}\n                    autoHideDuration={5000}\n                    onClose={() => setItemEditedSuccess(false)}\n                    message={<span id=\"message-id\">Item successfully edited!</span>}\n                />\n\n                <div className=\"aboveTableContainer\">\n                    <div className=\"addUpdateButtonContainer\">\n                        <Button className=\"menuAddButton\" onClick={() => {setAddItemModal(true)}}>\n                            <AddCircleIcon className=\"menuAddButtonIcon\" />\n                            Add Item\n                        </Button>\n                        <Button className=\"menuChangeHeaderButton\" onClick={() => {setChangeHeaderModal(true)}}>\n                            Change Header\n                        </Button>\n                    </div>\n                    <div className=\"searchFilterContainer\">\n                        <Select\n                            className=\"menuFilterSelect\"\n                            id=\"item-filter-select\"\n                            defaultValue=\"All\"\n                            displayEmpty=\"false\"\n                            variant=\"outlined\"\n                            value={display.filter}\n                            onChange={(v) => {\n                                handleDisplayChange(v.target.value, display.searchTerm);\n                            }}\n                        >\n                            <MenuItem value=\"All\">All</MenuItem>\n                            <MenuItem value=\"Featured\">Featured</MenuItem>\n                            <MenuItem value=\"Appetizers\">Appetizers</MenuItem>\n                            <MenuItem value=\"Main Dishes\">Main Dishes</MenuItem>\n                            <MenuItem value=\"Sides\">Sides</MenuItem>\n                            <MenuItem value=\"Drinks\">Drinks</MenuItem>\n                        </Select>\n                        <SearchBar\n                            className=\"menuSearchBar\"\n                            value={display.searchTerm}\n                            onChange={(newValue) => {\n                                handleDisplayChange(display.filter, newValue);\n                            }}\n                            onRequestSearch={(newValue) => {\n                                handleDisplayChange(display.filter, newValue);\n                            }}\n                            onCancelSearch={() => {                                \n                                handleDisplayChange(display.filter, \"\");\n                            }}\n                        />\n                    </div>\n                </div>\n                {menuTable(display, setDisplay, setDeleteConfirmation, handleFeatureChange, setCurrentEditItem)}\n            </div>\n        )\n    }\n    else{\n        return (\n            <div style={{color: \"#f9ce1d\", display: \"flex\", justifyContent: \"center\"}}>\n                <CircularProgress color='inherit' size={40}/>\n            </div>\n        )\n    }\n}\n","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/CustomTimePicker.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItemPopup.js",["210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225"],"/**\r\n * Popup that displays specified item when MenuItem is clicked. Has form to \r\n * pass data to/add items to cart. Popup gives relevant information such as \r\n * pricing, description, additional accommodations etc.\r\n * \r\n * @summary     Displays item information and allows user to add item to cart.\r\n * @author      Aaron Kirk, Navid Boloorian\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport '../css/MenuItemPopup.css';\r\nimport plus from '../media/plus.svg';\r\nimport minus from '../media/minus.svg';\r\nimport info from '../media/info.svg';\r\n\r\nconst MenuItemPopup = ({ values, togglePopup, processForm }) => {\r\n\r\n    /**\r\n     * Calculates the initial cost to add on from default selected accommodations\r\n     * when editing an item (when auto-selecting fields). Must be used first to\r\n     * set the inital totalPrice state when editing items.\r\n     * \r\n     * @returns {number} - Sum of the price of all auto-selected accommodations\r\n     */\r\n    const getInitialAccommodationsCost = () => {\r\n        var sum = 0;\r\n        if(values.get(\"fillIns\") != undefined) {\r\n            values.get(\"accommodations\").forEach((accommodation) => {\r\n                if(values.get(\"fillIns\").accommodations.includes(accommodation.Description)) {\r\n                    sum += parseFloat(accommodation.Price);\r\n                }\r\n            });\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    // TODO: fix the absurd tertiary statements here...\r\n    const [quantity, setQuantity] = useState((values.get(\"fillIns\") != undefined) ? parseInt(values.get(\"fillIns\").quantity) : 1);\r\n    // if individual price exists, use that as default; otherwise, use family\r\n    const [accommodationCost, setAccommodationCost] = useState(getInitialAccommodationsCost());\r\n    const [currPrice, setCurrPrice] = useState(parseFloat((values.get(\"fillIns\") != undefined) ? ((values.get(\"fillIns\").size == \"Individual\") ? values.get(\"price\").Individual : values.get(\"price\").Family) : ((\"Individual\" in values.get(\"price\")) ? values.get(\"price\").Individual : values.get(\"price\").Family)) + parseFloat(accommodationCost));\r\n    const [totalPrice, setTotalPrice] = useState(parseFloat(currPrice * quantity));\r\n\r\n    /**\r\n     * Updates the quantity and price states accordingly when the user tries to\r\n     * increment or decrement the quantity.\r\n     * \r\n     * @param {*} sign - Symbol (+ or -) indicating whether to increase or decrease quantity\r\n     */\r\n    const changeQuantity = sign => {\r\n        // two scenarios: increments or decrements quantity\r\n        if(sign == \"+\") {\r\n            setQuantity(quantity + 1);\r\n            // calulates on quantity + 1 b/c state hasn't updated yet\r\n            setTotalPrice(currPrice * (quantity + 1));\r\n        }\r\n        else if(sign == \"-\") {\r\n            if(quantity > 1) {\r\n                setQuantity(quantity - 1);\r\n                // calulates on quantity - 1 b/c state hasn't updated yet\r\n                setTotalPrice(currPrice * (quantity - 1));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates price when accommodations are selected or unselected.\r\n     * \r\n     * @param {*} checked - Checked state of the accommodation field \r\n     * @param {*} price - Price of the accommodation to be added or removed\r\n     */\r\n    const handleAccommodation = (checked, price) => {\r\n        // adds price if field is now checked; removes price otherwise\r\n        if(checked) {\r\n            // parseFloat() is necessary because otherwise they get treated like strings for addition\r\n            setAccommodationCost(parseFloat(accommodationCost) + parseFloat(price));\r\n            setCurrPrice(parseFloat(price) + parseFloat(currPrice));\r\n            setTotalPrice(parseFloat((parseFloat(currPrice) + parseFloat(price)) * quantity));\r\n        } else {\r\n            setAccommodationCost((accommodationCost - price));\r\n            setCurrPrice(currPrice - price);\r\n            setTotalPrice((currPrice - price) * quantity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to render a sizing option and determine whether or not\r\n     * it should be checked by default.\r\n     * \r\n     * @param {*} name - Name of Size (Individual or Family)\r\n     * @param {*} price - Price of Size\r\n     * @param {*} hasBothPrices - boolean indicating whether both options are being rendered in order to choose default selection\r\n     */\r\n    const renderSize = (name, price, hasBothPrices) => {\r\n        return(\r\n            // conditionally displays family size as an \"add-on\" if both are possible\r\n            // TODO: fix the absurd nested tertiary statements\r\n            //      (these decide whether the element should be checked by default\r\n            //       depending on which size this is, whether both sizes are \r\n            //       available, and whether an item is passed in to fill populate fields)\r\n            <label className=\"choice-label\">\r\n                <input onClick={() => handleSize(price)} type=\"radio\" name=\"size\" value={name} defaultChecked={(name == \"Individual\" || ((values.get(\"fillIns\") != undefined) && values.get(\"fillIns\").size == name) || !(\"Individual\" in values.get(\"price\")))} required />\r\n                <span onClick={() => handleSize(price)} className=\"label-title\">{name + \" \"}<span title=\"Suited for 5-6 people\"><img src={info} className={(name == \"Family\") ? \"size-info\" : \"hidden size-info\"} alt=\"Size Info\"/></span>{(hasBothPrices) ? \" +($\" + parseFloat(price - values.get(\"price\").Individual).toFixed(2) + \")\": null}</span>\r\n            </label>\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * Changes price depending on the size selected.\r\n     * \r\n     * @param {*} newPrice - Price of the newly selected size\r\n     */\r\n    const handleSize = (newPrice) => {\r\n        setCurrPrice(parseFloat(accommodationCost) + parseFloat(newPrice));\r\n        // currPrice has yet to update, so still using newPrice\r\n        // fix to 2 decimal places\r\n        setTotalPrice((parseFloat(accommodationCost) + parseFloat(newPrice)) * (quantity));\r\n    }\r\n\r\n    /**\r\n     * Helper function to render the entire accommodations section.\r\n     */\r\n    const renderAccommodations = () => {\r\n        // return nothing if there are no accommodations\r\n        if(values.get(\"accommodations\").length == 0) return;\r\n        else {\r\n            return (\r\n                /** Header */\r\n                <div className=\"section accommodations-section\">\r\n                <div className=\"section-title\">\r\n                    <h3>Accommodations</h3>\r\n                    <i>optional</i>\r\n                </div>\r\n                {/* map through and render all accommodations */}\r\n                {values.get(\"accommodations\").map((accommodation) => {\r\n                    return(\r\n                        <label className=\"choice-label\">\r\n\r\n                            <input type=\"checkbox\" name=\"accommodations\" \r\n                                defaultChecked={values.get(\"fillIns\") != undefined && values.get(\"fillIns\").accommodations.includes(accommodation.Description)}\r\n                                value={accommodation.Description} id={accommodation.Description} onChange={(e) => handleAccommodation(e.target.checked, accommodation.Price)} />\r\n\r\n                            <span className=\"label-title\">{accommodation.Description + \" +($\" + parseFloat(accommodation.Price).toFixed(2) + \")\"}</span>\r\n                        </label>\r\n                    );\r\n                })}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to count number of dietary information.\r\n     * \r\n     * @returns {number} - Number of dietary information fields that are true for this item.\r\n     */\r\n    const numDietaryInfo = () => {\r\n        // convert to Object\r\n        const dietaryInfo = Object.entries(values.get(\"dietary-info\"));\r\n        var count = 0;\r\n        // loop through all the dietaryInfo and account for ones that are true\r\n        for (const [key, value] of dietaryInfo) {\r\n            if(value) count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Helper function to render all the dietary information\r\n     */\r\n    const renderDietaryInfo = () => {\r\n        // returns nothing in the trivial case that there is no information to show\r\n        // this is so that the horizontal line (<hr/>) will not render\r\n        if (numDietaryInfo() == 0) return;\r\n        else {\r\n            return (\r\n                <>\r\n                <hr/>\r\n                <p className=\"dietary-info\">\r\n                    {(values.get(\"dietary-info\").vegan) ? \"*Vegan\" : null}\r\n                    {(values.get(\"dietary-info\").vegan) ? <br/> : null}\r\n                    {(values.get(\"dietary-info\").vegetarian) ? \"*Vegetarian\" : null}\r\n                    {(values.get(\"dietary-info\").vegetarian) ? <br/> : null}\r\n                    {(values.get(\"dietary-info\").glutenFree) ? \"*Gluten-free\" : null}\r\n                    {(values.get(\"dietary-info\").glutenFree) ? <br/> : null}\r\n                    {(values.get(\"dietary-info\").containsDairy) ? \"*Contains Dairy\" : null}\r\n                </p>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/** div that fades out the background */}\r\n            <div className=\"greyout\" onClick={togglePopup}></div>\r\n            <div className=\"menu-item-popup\">\r\n                <span className=\"close-button\" onClick={togglePopup}>+</span>\r\n                <div className=\"group-popup\">\r\n\r\n                    {/** Left side with dish details */}\r\n                    <div className=\"left-popup\">\r\n                        <div className=\"popup-image\" style={{backgroundImage: \"url(\" + values.get(\"image\") + \")\", backgroundSize:\"cover\"}}>\r\n                            <div className=\"popup-image-price\"><h3>{\"$\" + parseFloat(currPrice).toFixed(2)}</h3></div>\r\n                        </div>\r\n                        <div className=\"popup-item-info\">\r\n                            <h3 className=\"title-popup\">{values.get(\"title\")}</h3>\r\n                            <p className=\"desc-popup\">{values.get(\"description\")}</p>\r\n                            {renderDietaryInfo()}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/** right side with order options */}\r\n                    <div className=\"right-popup\">\r\n                        <form onSubmit={processForm} id=\"popup-form\">\r\n\r\n                            {/** sizing options */}\r\n                            <div className=\"section size-section\">\r\n                                <div className=\"section-title\">\r\n                                    <h3>Choose Size</h3>\r\n                                    <i>required</i>\r\n                                </div>\r\n                                {/** checks to ensure individual/family sizes exist; conditionally displays family size as an \"add-on\" if both are possible */}\r\n                                {(\"Individual\" in values.get(\"price\")) ? renderSize(\"Individual\", values.get(\"price\").Individual, false) : null}\r\n                                {(\"Family\" in values.get(\"price\")) ? renderSize(\"Family\", values.get(\"price\").Family, (\"Individual\" in values.get(\"price\"))) : null}\r\n                            </div>\r\n\r\n                            {/** accommodations options */}\r\n                            {renderAccommodations()}\r\n\r\n                            {/** custom instructions text area */}\r\n                            <div className=\"section instructions-section\">\r\n                                <div className=\"section-title\">\r\n                                    <h3>Special Instructions</h3>\r\n                                    <i>optional</i>\r\n                                </div>\r\n                                <p className=\"instructions-note\">Special accommodations can be made for orders placed in advanced but are not guaranteed, please <a href=\"/contact\">contact us</a> directly for more info.</p>\r\n                                <textarea name=\"instructions\" maxLength=\"75\" className=\"instructions-textarea\" defaultValue={(values.get(\"fillIns\") != undefined) ? values.get(\"fillIns\").instructions : \"\"}></textarea>\r\n                            </div>\r\n\r\n                            {/** quantity selection */}\r\n                            <div className=\"section quantity-section\">\r\n                                <div className=\"section-title\"><h3>Quantity</h3></div>\r\n                                <div className=\"quantity-buttons\">\r\n                                    <button type=\"button\" className=\"button decrease-button\" onClick={() => {changeQuantity(\"-\");}\r\n                                    }><img src={minus} alt=\"Decrease Quantity\" /></button>\r\n                                    <span className=\"quantity-number\">{quantity}</span>\r\n                                    <button type=\"button\" className=\"button increase-button\" \r\n                                    onClick={() => {changeQuantity(\"+\");}}><img src={plus} alt=\"Increase Quantity\" /></button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/** hidden fields to pass along to the total price and  quantity */}\r\n                            <input name=\"popupValues\" type=\"hidden\" value={JSON.stringify(Object.fromEntries(values))} />\r\n                            <input name=\"price\" type=\"hidden\" value={parseFloat(totalPrice).toFixed(2)} />\r\n                            <input name=\"quantity\" type=\"hidden\" value={quantity} />\r\n                            <input className=\"submit-order-button\" type=\"submit\" value={(values.get(\"fillIns\") != undefined) ? \"Save Changes: $\" + parseFloat(totalPrice).toFixed(2) : \"Add \" + quantity + \" to cart: $\" + parseFloat(totalPrice).toFixed(2)} />\r\n                        </form>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n  \r\n    export default MenuItemPopup;\r\n","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ChangeHeaderModal.js",["226","227"],"/**\n * Modal used to change the header image of the Menu page. The modal renders\n * whenever the \"Change Header\" button from AdminMenuItems.js is clicked. It\n * contains a simple form used to update the URL of the header image of the\n * Menu page.\n * \n * An error is thrown if and only if the \"Image Link\" field is empty.\n *\n * Note: the backend functionality for this modal, which stores the menu header\n * image URL in the database, throws an error in case of inserting a duplicate\n * URL or an invalid URL. This case is handled by the backend, and the frontend\n * displays an error message to let the user know.\n * \n * @summary     Modal used to change the header image of the Menu page.\n */\n\nimport React, { useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { Modal, FormControl, OutlinedInput, Snackbar, IconButton } from '@material-ui/core';\nimport '../css/ChangeHeaderModal.css';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport {getJWT, logout} from '../util/Auth';\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\n/**\n * Renders a red asterisk that indicates a required field.\n * \n * @returns {HTMLParagraphElement} - Red asterisk to indicate a required field\n */\nfunction requiredAsterisk(){\n    return (\n        <p className=\"requiredAsterisk\">*</p>\n    );\n}\n\n/**\n * Renders the modal used to change the URL of the Menu page's header image.\n * \n * @param {boolean} changeHeaderModal - show/hide modal\n * @param {function} setChangeHeaderModal - set changeHeaderModal\n * @param {function} setLoaded - sets AdminMenuItems.js loaded state\n * @param {string} headerImageUrl - current header image URL\n * @returns {HTMLElement} - A modal with implemented functionality\n */\nexport default function ChangeHeaderModal (props){\n    // inherit display functions as props\n    const showModal = props.changeHeaderModal;\n    const setShowModal = props.setChangeHeaderModal;\n    const setLoaded = props.setLoaded;\n\n    // error handling\n    const [menuError, setMenuError] = useState(false);\n    const [errorSnackbar, setErrorSnackbar] = useState({\n        display: false,\n        message: ''\n    });\n    const [failedAdminAuth, setFailedAdminAuth] = useState(false);\n\n    // form's states\n    const [headerImageURL, setHeaderImageURL] = useState(props.headerImageURL);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        // validate input\n        if (headerImageURL === \"\")\n        {\n            setMenuError(true);\n            setErrorSnackbar({display: true, message: \"URL cannot be empty\"});\n            return;\n        }\n        // create the object to oush to the database\n        const imageURLObject = {\n            \"imageUrl\": headerImageURL,\n            \"token\": getJWT()\n        }\n        // push to database\n        await fetch(`${BACKEND_URL}menuImages/changeMenuImage`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify(imageURLObject)\n        }).then(res => {\n            // success\n            if(res.ok){\n                alert(\"The header image was changed!\");\n                // refetch\n                setLoaded(false);\n                setShowModal(false);\n            } \n            // invalid admin token\n            else if(res.status === 401){\n                logout();\n                // refresh will cause a redirect to login page\n                window.location.reload();\n                return;\n            }\n            // system error on backend \n            else if (res.status === 500){\n                setMenuError(true);\n                setErrorSnackbar({display: true, message: \"A system error has occurred - try again later\"});\n                return;\n            }\n            // failure\n            else{\n                setMenuError(true);\n                setErrorSnackbar({display: true, message: \"URL is either already in use or invalid\"});\n                return;\n            }\n        })\n\n    }\n        return(\n            <>\n                {/* Failure Snackbar */}\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                    open={errorSnackbar.display}\n                    autoHideDuration={5000}\n                    onClose={() => setErrorSnackbar({...errorSnackbar, display: false})}\n                    message={<span id=\"message-id\">{errorSnackbar.message}</span>}\n                />\n                {/* Change header image Modal */}\n                <Modal open={showModal} onClose={() => setShowModal(false)} \n                    className=\"modalContainer\" style={{display:'flex',alignItems:'center',justifyContent:'center'}}\n                >\n                    <div className=\"modalBackground\">\n                        <div className=\"modalHeader\">\n                            {/* Modal close button */}\n                            <IconButton className=\"closeModalButton\" \n                                onClick={() => setShowModal(false)}\n                            >\n                                <ClearIcon/>\n                            </IconButton>\n                        </div>\n                        <form autocomplete=\"off\" onSubmit={(e) => handleSubmit(e)}>\n                            <div className=\"modalBody\">\n                                {/* Header image URL */}\n                                <p className=\"formLabelText\">Image Link {requiredAsterisk()}</p>\n                                <FormControl fullWidth error={menuError && headerImageURL === \"\"} className=\"formItem\" margin='dense'>\n                                    <OutlinedInput name=\"imageUrl\" id=\"imageUrl\" className=\"formTextInput\"\n                                        value={headerImageURL}\n                                        onChange={(e) => setHeaderImageURL(e.target.value)}\n                                        size=\"small\"\n                                    />\n                                </FormControl>\n                            </div>\n                            <div className=\"modalFooter\">\n                                {/* Change header button */}\n                                <Button className=\"changeHeaderButton\" type=\"submit\">\n                                    Change Header\n                                </Button>\n                            </div>\n                        </form>\n                    </div>\n                </Modal>\n            </>\n        );\n}","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/EditMenuItemModal.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/AddMenuItemModal.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/OrdersTable.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ChangeSecondaryEmailScreen.js",["228"],"/**\n * This file renders the information related to the secondary emails.\n * It displays all the current secondary emails that that admin \n * user has authorized.\n * It makes two calls to the backend:\n * \n *  1) POST call to add secondary email\n *  2) DELETE call to remove a secondary email\n * \n * @summary     Handles functionality of secondary emails on Admin page.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport TextField from '@material-ui/core/TextField';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusCircle, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {getJWT, logout} from '../util/Auth';\n\nimport '../css/ChangeEmailScreen.css';\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\n// styling for the MUI form\nconst useStyles = makeStyles((theme) => ({\n    span: {\n      \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n        borderColor: \"black\"\n      },\n      \"& .MuiInputLabel-outlined.Mui-focused\": {\n        color: \"black\"\n      }\n    }\n}));\n\n/**\n * Renders the node containing the email addresses.\n * \n * @param {string} email - Secondary email\n * @param {array} secondaryEmails - List of all current secondary emails\n * @param {function} setSecondaryEmails - Function to update secondary emails list\n * @param {function} updateSecondaryEmails - Parent function to update parent state \n * @returns {component} - Renders the node with email\n */\nconst renderNode = (email, secondaryEmails, setSecondaryEmails, updateSecondaryEmails) => {\n    // delete the email from the database\n    const deleteItem = () => {\n        fetch(`${BACKEND_URL}email/removeSecondary`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                email: email,\n                \"token\": getJWT()\n            })\n        })\n        .then(res => {\n            if(res.ok) {\n                // update the array in the current class\n                // and in the parent class\n                const arr = secondaryEmails.filter(a => a !== email);\n                setSecondaryEmails(arr);\n                updateSecondaryEmails(arr);\n            }\n            // invalid admin token\n            else if(res.status === 401){\n                logout();\n                // refresh will cause a redirect to login page\n                window.location.reload();\n                return;\n            }\n        })  \n    }\n    \n    return (\n        <div>\n            <p className=\"secondary-email-name\">{email}</p>\n            <FontAwesomeIcon icon={faTrash} className=\"trash-icon\" \n                onClick={(e) => deleteItem()}\n            />\n        </div>\n    )\n}\n\n// styling used for the plus icon\nconst plusIcon = {\n    color: 'white',\n    marginRight: 'calc(0.5vw)'\n}\n\nexport default function ChangeSecondaryEmailScreen (props) {\n    const classes = useStyles();\n    const updateSecondaryEmails = props.updateSecondaryEmails;\n    const [secondaryEmails, setSecondaryEmails] = useState([]);\n    const [primaryEmail, setPrimaryEmail] = useState(\"\");\n    const [addSecondaryEmail, setAddSecondaryEmail] = useState(\"\");\n    const [inputError, setInputError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    // allows user to press 'enter' to submit\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            addEmail(addSecondaryEmail);    \n        }\n    }\n\n    // loads all emails from the parent class\n    useEffect(() => {\n        setSecondaryEmails(props.emails);\n        setPrimaryEmail(props.primaryEmail);\n    }, [props])\n\n    /**\n     * Adds the email to the database.\n     * \n     * @param {string} addSecondaryEmail - Email to add\n     */\n    const addEmail = (addSecondaryEmail) => {\n        // make sure email is not a primary email \n        if(addSecondaryEmail === primaryEmail) {\n            setErrorMessage(\"This is currently your primary email.\"); \n            setInputError(true);\n            return;\n        }\n\n        // make sure the email follows proper format\n        if ((addSecondaryEmail && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(addSecondaryEmail)) || addSecondaryEmail.length === 0) {\n            setErrorMessage(\"Enter a valid email address.\");\n            setInputError(true);\n            return;\n        }\n\n        fetch(`${BACKEND_URL}email/addSecondary`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                email: addSecondaryEmail,\n                \"token\": getJWT()\n            })\n        })\n        .then(res => {\n            if(res.ok) {\n                // update the parent's array and the child's array\n                const getNewEmail = addSecondaryEmail;\n                const arr = secondaryEmails.concat(getNewEmail)\n                setSecondaryEmails(arr);\n                updateSecondaryEmails(arr);\n                // clear the textfield\n                setAddSecondaryEmail(\"\");\n                // clear any error handling\n                setInputError(false);\n                setErrorMessage(\"\");\n            }\n            // invalid admin token\n            else if(res.status === 401){\n                logout();\n                // refresh will cause a redirect to login page\n                window.location.reload();\n                return;\n            } else {\n                // error handling\n                setErrorMessage(\"This email is already listed as a secondary email.\"); \n                setInputError(true);\n            }\n        })\n    }\n\n    return (\n        <div className=\"secondary-emails-container\"> \n            <h1 className=\"emailHeading\">Change Secondary Email</h1>\n            <p className=\"emailDescription\">Order confirmations will be sent to this email.</p>\n            \n            <div className=\"secondary-emails\">\n                {secondaryEmails.map((secondary, ind) => (\n                    renderNode(secondary, secondaryEmails, setSecondaryEmails, updateSecondaryEmails)\n                ))}\n            </div>\n            \n            {/* The textfield */}\n            <div className=\"add-secondary-email\">\n                <span className={classes.span}>\n                    <TextField id=\"email-input\" \n                        size=\"small\"\n                        error={inputError} \n                        value={addSecondaryEmail} \n                        type=\"email\" \n                        onChange={(e) => setAddSecondaryEmail(e.target.value)} \n                        onKeyDown={(e) => handleKeyDown(e)}\n                        label=\"Add Secondary Email\" \n                        variant=\"outlined\"\n                        helperText={errorMessage}\n                        id=\"secondaryEmail\"\n                    />\n                </span>\n\n                <Button id=\"submit\" className=\"emailAddButton\" \n                    onClick={(e) => addEmail(addSecondaryEmail)}\n                >   \n                    {/* The \"add\" icon */}\n                    <FontAwesomeIcon icon={faPlusCircle} style={plusIcon} />\n                        Add\n                </Button>\n            </div>\n        </div>\n    )\n}\n","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/ChangeEmailScreen.js",["229"],"/**\n * This renders the \"change primary email\" portion of\n * the \"emails\" tab under the \"Admin\" page.\n * \n * @summary     Handles changing primary email functionality.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport TextField from '@material-ui/core/TextField';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {getJWT, logout} from '../util/Auth';\n\nimport '../css/ChangeEmailScreen.css';\n\nconst config = require('../config');\nconst BACKEND_URL = config.backend.uri;\n\nconst useStyles = makeStyles((theme) => ({\n    span: {\n      \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n        borderColor: \"black\"\n      },\n      \"& .MuiInputLabel-outlined.Mui-focused\": {\n        color: \"black\"\n      }\n    }\n}));\n\nexport default function ChangeEmailScreen (props) {\n    const classes = useStyles();\n    const [inputEmail, setPrimaryEmail] = useState(\"\");\n    const [secondaryEmails, setSecondaryEmails] = useState([]);\n    const [primaryEmail, updateStatePrimaryEmail] = useState(\"\")\n    const [inputError, setInputError] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    // catch enter rerendeing entire admin page\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            handleFormSubmit(inputEmail, setInputError, setOpen)\n        }\n    }\n\n    useEffect(() => {\n        setSecondaryEmails(props.emails);\n        updateStatePrimaryEmail(props.primaryEmail);\n    }, [props])\n\n    /**\n     * Updates the primary email in the database.\n     * \n     * @param {string} email - Primary email to update\n     * @param {function} setInputError - Error handling \n     * @param {function} setOpen - Snackbox rendering \n     */\n    async function handleFormSubmit(email, setInputError, setOpen) {\n        // make sure it is not a secondary email\n        if(secondaryEmails.includes(email)) {\n            setInputError(true);\n            setErrorMessage(\"This email is already listed as a secondary email.\");  \n            return;\n        }\n\n        // check for empty string\n        if(email.length === 0) {\n            setInputError(true);\n            setErrorMessage(\"Enter a valid email address.\");    \n            return;\n        }\n        \n        // validate to make sure email is an email\n        if (email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\n            setInputError(true);\n            setErrorMessage(\"Enter a valid email address.\");\n            return;\n        }\n\n        // change the primary email backend call\n        await fetch(`${BACKEND_URL}email/changePrimary`, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                email: email,\n                \"token\": getJWT()\n            })\n        }).then(res => {\n            if(res.ok){\n                setInputError(false);\n                setOpen(true);\n                setPrimaryEmail(\"\");\n                setErrorMessage(\"\");\n                props.updatePrimaryEmail(email);\n            }\n            // invalid admin token\n            else if(res.status === 401){\n                logout();\n                // refresh will cause a redirect to login page\n                window.location.reload();\n                return;\n            }\n            else {\n                setErrorMessage(\"This is currently your primary email.\");  \n                setInputError(true);\n            }\n        })\n    }\n\n    return (\n        <div> \n            <br />\n            <h1 className=\"emailHeading\">Change Primary Email</h1>\n            <p className=\"emailDescription\">Order confirmations and customer inquiries will be sent to this email.</p>\n\n            <span>\n                <TextField id=\"primary-email-disabled\" \n                    size=\"small\"\n                    value={primaryEmail} \n                    type=\"email\" \n                    variant=\"outlined\"\n                    disabled={true}\n                />\n            </span>\n\n            <br />\n            <br />\n                <span className={classes.span}>\n                    <TextField id=\"email-input\" \n                        size=\"small\"\n                        error={inputError} \n                        value={inputEmail} \n                        type=\"email\" \n                        id=\"emailUpdateInput\" \n                        onChange={(e) => setPrimaryEmail(e.target.value)} \n                        onKeyDown={(e) => handleKeyDown(e)}\n                        label=\"Primary Email\" \n                        variant=\"outlined\"\n                        helperText={errorMessage}\n                        className={classes.form}\n                    />\n                </span>\n            <br />\n            <br />\n\n            <Button id=\"submit\" \n                className=\"emailUpdateButton\" \n                onClick={() => handleFormSubmit(inputEmail, setInputError, setOpen)}\n            >\n                Update\n            </Button>\n\n            <Snackbar open={open} autoHideDuration={4000} onClose={(e) => setOpen(false)}\n                message=\"Email updated successfully!\">\n            </Snackbar>\n        </div>\n    )\n}\n","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuFilter.js",["230"],"/**\n * Component that groups all filter buttons together. Responsible for sending \n * the relevant props to individual buttons.\n * \n * @summary   Component that groups all filter buttons.\n * @author    Navid Boloorian\n */\n\nimport React, { Component} from 'react';\nimport MenuFilterButton from './MenuFilterButton';\nimport \"../css/MenuFilter.css\";\n\nconst MenuFilter = ( {foodCategories, changeVisibleCategories, toggledFilter, setToggledFilter} ) => {\n    return (\n      <div className=\"menu-filter\">\n        {foodCategories.map((categoryName, key) => (\n          // generates filter buttons based on categories\n          <MenuFilterButton toggledFilter={toggledFilter} setToggledFilter={setToggledFilter} categoryName={categoryName} key={key} changeVisibleCategories={changeVisibleCategories()} />\n        ))}\n      </div>\n    )\n  }\n  \n  export default MenuFilter;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItems.js",["231"],"/**\n * Groups MenuItemCategory components for formatting purposes. Renders \n * categories based off of what is being displayed with filters/states. \n * Simplifies passing of props as it centralizes the components.\n * \n * @summary   Grouping of MenuItemCategory components.\n * @author    Navid Boloorian\n */\n\nimport React from 'react';\nimport MenuItemCategory from './MenuItemCategory';\nimport '../css/MenuItems.css';\n\nconst MenuItems = ({ foodCategories, processForm, popupVisible, popupValues, togglePopup }) => {\n\n  return (\n\n      <div className=\"menu-items\">\n        {/** generates categories in the menu */}\n        {foodCategories.map((categoryName, key) => {\n          return <MenuItemCategory key={key} categoryName={categoryName} key={key} processForm={processForm} popupVisible={popupVisible} popupValues={popupValues} togglePopup={togglePopup}/>\n        })}\n      </div>\n\n  )\n}\n  \n  export default MenuItems;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuFilterButton.js",["232"],"/**\n * Individual buttons that handle toggle the display of sections onclick. \n * Toggling is based on props so that they dynamically change.\n * \n * @summary   Individual buttons that toggle the display of sections.\n * @author    Navid Boloorian\n */\n\nimport React from 'react';\nimport '../css/MenuFilterButton.css';\n\nconst MenuFilterButton = ( {categoryName, changeVisibleCategories, toggledFilter, setToggledFilter} ) => {\n\n    /**\n     * Function that groups the filter toggling state calls.\n     */\n    function updateFilters() {\n      changeVisibleCategories(categoryName);\n      setToggledFilter(categoryName);\n    }\n\n    // logic to check whether or not the filter button should be highlighted\n    let filterMatch = (categoryName === toggledFilter) && (categoryName != \"Whole Menu\");\n\n    return (\n      <button \n        className={`menu-filter-button ${filterMatch ? \"toggled-filter\": \"\"}`}\n        onClick={() => (updateFilters())}>\n        {categoryName} \n      </button>\n    )\n  }\n  \n  export default MenuFilterButton;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItemCategory.js",["233","234"],"/**\r\n * Individual buttons that handle toggle the display of sections onclick. \r\n * Toggling is based on props so that they dynamically change.\r\n * \r\n * @summary   Individual buttons that toggle the display of sections.\r\n * @author    Navid Boloorian\r\n */\r\n\r\nimport React, { useState, useEffect} from 'react';\r\nimport '../css/MenuItemCategory.css';\r\nimport MenuItem from './MenuItem';\r\nimport MenuItemPopup from './MenuItemPopup';\r\n\r\nconst config = require('../config');\r\nconst BACKEND_URL = config.backend.uri;\r\n\r\nconst MenuItemCategory = ({ categoryName, processForm, popupVisible, popupValues, togglePopup }) => {\r\n  // array that stores menu items for the current category\r\n  const [menuItems, setMenuItems] = useState(new Array());\r\n  const menuItemValues = [];\r\n\r\n  /**\r\n   * useEffect() is called to get information from database\r\n   */\r\n  useEffect(() => {\r\n    fetch(`${BACKEND_URL}item/`)\r\n    .then(async result => {\r\n      if (result.ok) {\r\n        const json = await result.json();\r\n\r\n        for(var i = 0; i < json.items.length; i++) {\r\n          // since \"featured\" isn't a category, we need to handle it differently\r\n          let isCategoryEqual = json.items[i].Category === categoryName;\r\n          let isFeatured = (categoryName === \"Featured\") && (json.items[i].isFeatured);\r\n\r\n          // is stored only if the category name is the same as json's category\r\n          if((json.items !== undefined) && (isCategoryEqual || isFeatured)) {\r\n            menuItemValues.push(json.items[i]);\r\n          }\r\n        }\r\n        setMenuItems(menuItemValues);\r\n      }\r\n      else {\r\n        console.log(\"error\");\r\n      }\r\n    })\r\n\r\n  /**\r\n   * sets dependency on categoryName, meaning that whenever categoryName \r\n   * changes, useEffect is called again. This is necessary so that when filters * are clicked data is actually reloaded\r\n   */\r\n  }, [categoryName]);\r\n  \r\n  return (\r\n      <>\r\n        {/** popup is created here, if it is visible it is rendered */}\r\n        {popupVisible ? <MenuItemPopup values={popupValues} togglePopup={togglePopup} processForm={processForm} /> : null}\r\n        <div className=\"menu-item-category\">\r\n          <h2> {categoryName} </h2>\r\n          <div className=\"menu-item-category-grid\">\r\n            {/** generate menu items based off of array */}\r\n            {menuItems.map((menuItem, key) => {\r\n              let title = menuItem.Name;\r\n              let image = menuItem.pictureURL;\r\n              let description = menuItem.Description;\r\n              // since some items will only have a family pricing option, we use individual as the default; if individual doesnt exist, use family instead\r\n              let price = (\"Individual\" in menuItem.Prices) ? menuItem.Prices.Individual : menuItem.Prices.Family\r\n              let accommodations = menuItem.Accommodations;\r\n              let priceOptions = menuItem.Prices;\r\n              let dietaryInfo = menuItem.dietaryInfo;\r\n              let id = menuItem._id;\r\n\r\n              return <MenuItem title={title} image={image} price={price} description={description} togglePopup={togglePopup} key={key} dietaryInfo={dietaryInfo} priceOptions={priceOptions} accommodations={accommodations} id={id}/>\r\n            })}\r\n          </div>\r\n        </div>\r\n      </>\r\n  )\r\n}\r\n\r\nexport default MenuItemCategory;\r\n","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/MenuItem.js",["235"],"/**\n * Component responsible for displaying and formatting items on menu. Bases \n * information on props and displays them accordingly. \n * \n * @summary   Component representing items in the menu.\n * @author    Navid Boloorian\n */\n\nimport React from 'react';\nimport \"../css/MenuItem.css\";\n\nconst MenuItem = ( {description, image, price, title, togglePopup, dietaryInfo, priceOptions, accommodations, id} ) => {\n    return (\n      <div className=\"menu-item\" onClick={() => togglePopup(title, description, priceOptions, image, dietaryInfo, accommodations, id)}>\n        <div className=\"menu-image\">\n          <img src={image} alt=\"Item Image\"></img>\n        </div>\n        <div className=\"menu-text\">\n          <h3 className=\"menu-name\">{title}</h3>\n          <p className=\"menu-description\">{description}</p>\n        </div>\n        <div className=\"menu-absolutes\">\n          <p className=\"menu-price\">${price}</p>\n        </div>\n      </div>\n    );\n}\n  \nexport default MenuItem;","/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/components/OrdersTableColumns.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/util/OrdersTableFunctions.js",[],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/About.js",["236"],"/Users/luckilyclueless/Desktop/Projects/TSE/20-21/UWEAST-Community-Kitchen/frontend/src/pages/Custom404.js",[],{"ruleId":"237","replacedBy":"238"},{"ruleId":"239","replacedBy":"240"},{"ruleId":"241","severity":1,"message":"242","line":43,"column":11,"nodeType":"243","endLine":43,"endColumn":13,"suggestions":"244"},{"ruleId":"241","severity":1,"message":"242","line":114,"column":6,"nodeType":"243","endLine":114,"endColumn":8,"suggestions":"245"},{"ruleId":"246","severity":1,"message":"247","line":105,"column":35,"nodeType":"248","messageId":"249","endLine":105,"endColumn":37},{"ruleId":"241","severity":1,"message":"242","line":99,"column":6,"nodeType":"243","endLine":99,"endColumn":8,"suggestions":"250"},{"ruleId":"251","severity":1,"message":"252","line":101,"column":22,"nodeType":"253","messageId":"254","endLine":101,"endColumn":33},{"ruleId":"255","severity":1,"message":"256","line":19,"column":5,"nodeType":"257","messageId":"258","endLine":19,"endColumn":48},{"ruleId":"255","severity":1,"message":"256","line":26,"column":5,"nodeType":"257","messageId":"258","endLine":26,"endColumn":67},{"ruleId":"255","severity":1,"message":"256","line":30,"column":5,"nodeType":"257","messageId":"258","endLine":30,"endColumn":60},{"ruleId":"241","severity":1,"message":"242","line":51,"column":8,"nodeType":"243","endLine":51,"endColumn":10,"suggestions":"259"},{"ruleId":"255","severity":1,"message":"256","line":53,"column":5,"nodeType":"257","messageId":"258","endLine":53,"endColumn":110},{"ruleId":"255","severity":1,"message":"256","line":62,"column":5,"nodeType":"257","messageId":"258","endLine":62,"endColumn":75},{"ruleId":"246","severity":1,"message":"247","line":48,"column":27,"nodeType":"248","messageId":"249","endLine":48,"endColumn":29},{"ruleId":"246","severity":1,"message":"247","line":54,"column":33,"nodeType":"248","messageId":"249","endLine":54,"endColumn":35},{"ruleId":"246","severity":1,"message":"260","line":30,"column":26,"nodeType":"248","messageId":"249","endLine":30,"endColumn":28},{"ruleId":"261","severity":1,"message":"262","line":42,"column":7,"nodeType":"263","endLine":42,"endColumn":111},{"ruleId":"246","severity":1,"message":"247","line":117,"column":31,"nodeType":"248","messageId":"249","endLine":117,"endColumn":33},{"ruleId":"246","severity":1,"message":"247","line":44,"column":21,"nodeType":"248","messageId":"249","endLine":44,"endColumn":23},{"ruleId":"246","severity":1,"message":"247","line":53,"column":35,"nodeType":"248","messageId":"249","endLine":53,"endColumn":37},{"ruleId":"251","severity":1,"message":"264","line":84,"column":9,"nodeType":"253","messageId":"254","endLine":84,"endColumn":13},{"ruleId":"241","severity":1,"message":"265","line":216,"column":8,"nodeType":"243","endLine":216,"endColumn":14,"suggestions":"266"},{"ruleId":"251","severity":1,"message":"267","line":259,"column":13,"nodeType":"253","messageId":"254","endLine":259,"endColumn":19},{"ruleId":"246","severity":1,"message":"260","line":27,"column":34,"nodeType":"248","messageId":"249","endLine":27,"endColumn":36},{"ruleId":"246","severity":1,"message":"260","line":38,"column":69,"nodeType":"248","messageId":"249","endLine":38,"endColumn":71},{"ruleId":"246","severity":1,"message":"260","line":41,"column":82,"nodeType":"248","messageId":"249","endLine":41,"endColumn":84},{"ruleId":"246","severity":1,"message":"247","line":41,"column":127,"nodeType":"248","messageId":"249","endLine":41,"endColumn":129},{"ruleId":"246","severity":1,"message":"247","line":52,"column":17,"nodeType":"248","messageId":"249","endLine":52,"endColumn":19},{"ruleId":"246","severity":1,"message":"247","line":57,"column":22,"nodeType":"248","messageId":"249","endLine":57,"endColumn":24},{"ruleId":"246","severity":1,"message":"247","line":102,"column":118,"nodeType":"248","messageId":"249","endLine":102,"endColumn":120},{"ruleId":"246","severity":1,"message":"260","line":102,"column":161,"nodeType":"248","messageId":"249","endLine":102,"endColumn":163},{"ruleId":"246","severity":1,"message":"247","line":102,"column":205,"nodeType":"248","messageId":"249","endLine":102,"endColumn":207},{"ruleId":"246","severity":1,"message":"247","line":103,"column":162,"nodeType":"248","messageId":"249","endLine":103,"endColumn":164},{"ruleId":"246","severity":1,"message":"247","line":125,"column":48,"nodeType":"248","messageId":"249","endLine":125,"endColumn":50},{"ruleId":"246","severity":1,"message":"260","line":140,"column":71,"nodeType":"248","messageId":"249","endLine":140,"endColumn":73},{"ruleId":"251","severity":1,"message":"268","line":162,"column":21,"nodeType":"253","messageId":"254","endLine":162,"endColumn":24},{"ruleId":"246","severity":1,"message":"247","line":174,"column":30,"nodeType":"248","messageId":"249","endLine":174,"endColumn":32},{"ruleId":"246","severity":1,"message":"260","line":242,"column":149,"nodeType":"248","messageId":"249","endLine":242,"endColumn":151},{"ruleId":"246","severity":1,"message":"260","line":261,"column":112,"nodeType":"248","messageId":"249","endLine":261,"endColumn":114},{"ruleId":"251","severity":1,"message":"269","line":58,"column":12,"nodeType":"253","messageId":"254","endLine":58,"endColumn":27},{"ruleId":"251","severity":1,"message":"270","line":58,"column":29,"nodeType":"253","messageId":"254","endLine":58,"endColumn":47},{"ruleId":"271","severity":1,"message":"272","line":197,"column":25,"nodeType":"273","endLine":197,"endColumn":44},{"ruleId":"271","severity":1,"message":"272","line":137,"column":25,"nodeType":"273","endLine":137,"endColumn":46},{"ruleId":"251","severity":1,"message":"274","line":9,"column":17,"nodeType":"253","messageId":"254","endLine":9,"endColumn":26},{"ruleId":"271","severity":1,"message":"272","line":21,"column":74,"nodeType":"273","endLine":21,"endColumn":83},{"ruleId":"246","severity":1,"message":"260","line":23,"column":73,"nodeType":"248","messageId":"249","endLine":23,"endColumn":75},{"ruleId":"275","severity":1,"message":"276","line":19,"column":46,"nodeType":"277","messageId":"278","endLine":19,"endColumn":57},{"ruleId":"241","severity":1,"message":"279","line":52,"column":6,"nodeType":"243","endLine":52,"endColumn":20,"suggestions":"280"},{"ruleId":"261","severity":1,"message":"262","line":16,"column":11,"nodeType":"263","endLine":16,"endColumn":45},{"ruleId":"251","severity":1,"message":"281","line":7,"column":7,"nodeType":"253","messageId":"254","endLine":7,"endColumn":18},"no-native-reassign",["282"],"no-negated-in-lhs",["283"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.","ArrayExpression",["284"],["285"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["286"],"no-unused-vars","'setIsMobile' is assigned a value but never used.","Identifier","unusedVar","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["287"],"Expected '!==' and instead saw '!='.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'json' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'cookies.cart.items', 'cookies.cart.total', 'history', 'paypalOrderObject', 'props.selectedDate', 'props.selectedTime', and 'setCookie'. Either include them or remove the dependency array.",["288"],"'imgUrl' is assigned a value but never used.","'key' is assigned a value but never used.","'failedAdminAuth' is assigned a value but never used.","'setFailedAdminAuth' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Component' is defined but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","React Hook useEffect has a missing dependency: 'menuItemValues'. Either include it or remove the dependency array.",["289"],"'BACKEND_URL' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"290","fix":"291"},{"desc":"290","fix":"292"},{"desc":"290","fix":"293"},{"desc":"290","fix":"294"},{"desc":"295","fix":"296"},{"desc":"297","fix":"298"},"Update the dependencies array to be: [state]",{"range":"299","text":"300"},{"range":"301","text":"300"},{"range":"302","text":"300"},{"range":"303","text":"300"},"Update the dependencies array to be: [cart, cookies.cart.items, cookies.cart.total, history, paypalOrderObject, props.selectedDate, props.selectedTime, setCookie]",{"range":"304","text":"305"},"Update the dependencies array to be: [categoryName, menuItemValues]",{"range":"306","text":"307"},[1319,1321],"[state]",[3485,3487],[2805,2807],[1509,1511],[9386,9392],"[cart, cookies.cart.items, cookies.cart.total, history, paypalOrderObject, props.selectedDate, props.selectedTime, setCookie]",[1859,1873],"[categoryName, menuItemValues]"]